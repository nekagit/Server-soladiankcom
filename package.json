{
  "name": "soladia-marketplace",
  "version": "1.0.0",
  "description": "Soladia Marketplace - Solana-powered e-commerce platform",
  "private": true,
  "workspaces": [
    "frontend",
    "backend"
  ],
  "scripts": {
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "cd backend && python3 -m uvicorn main:app --reload --host 0.0.0.0 --port 8000",
    "build": "npm run build:frontend && npm run build:backend",
    "build:frontend": "cd frontend && npm run build",
    "build:backend": "cd backend && echo 'Backend build completed'",
    "start": "npm run dev",
    "install:all": "npm install && cd frontend && npm install && cd ../backend && pip install -r requirements.txt",
    "clean": "rm -rf node_modules frontend/node_modules frontend/dist backend/__pycache__",
    "test": "npm run test:frontend && npm run test:backend",
    "test:frontend": "cd frontend && npm run test",
    "test:backend": "cd backend && python3 -m pytest",
    "test:integration": "npm run test:frontend:integration && npm run test:backend:integration",
    "test:frontend:integration": "cd frontend && npm run test:integration",
    "test:backend:integration": "cd backend && python3 -m pytest tests/integration/",
    "test:coverage": "npm run test:frontend:coverage && npm run test:backend:coverage",
    "test:frontend:coverage": "cd frontend && npm run test:coverage",
    "test:backend:coverage": "cd backend && python3 -m pytest --cov=. --cov-report=html",
    "test:watch": "concurrently \"npm run test:frontend:watch\" \"npm run test:backend:watch\"",
    "test:frontend:watch": "cd frontend && npm run test:watch",
    "test:backend:watch": "cd backend && python3 -m pytest --watch",
    "lint": "npm run lint:frontend && npm run lint:backend",
    "lint:frontend": "cd frontend && npm run lint",
    "lint:backend": "cd backend && python3 -m flake8 . && python3 -m black --check . && python3 -m isort --check-only .",
    "lint:fix": "npm run lint:frontend:fix && npm run lint:backend:fix",
    "lint:frontend:fix": "cd frontend && npm run lint:fix",
    "lint:backend:fix": "cd backend && python3 -m black . && python3 -m isort .",
    "type-check": "npm run type-check:frontend && npm run type-check:backend",
    "type-check:frontend": "cd frontend && npm run type-check",
    "type-check:backend": "cd backend && python3 -m mypy . --ignore-missing-imports",
    "format": "npm run format:frontend && npm run format:backend",
    "format:frontend": "cd frontend && npm run format",
    "format:backend": "cd backend && python3 -m black . && python3 -m isort .",
    "docker:build": "docker-compose build",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "docker:prod": "docker-compose -f docker-compose.prod.yml up -d",
    "docker:prod:down": "docker-compose -f docker-compose.prod.yml down",
    "docker:prod:logs": "docker-compose -f docker-compose.prod.yml logs -f",
    "db:migrate": "cd backend && python3 -c \"from database import engine, Base; Base.metadata.create_all(bind=engine)\"",
    "db:reset": "cd backend && python3 -c \"from database import engine, Base; Base.metadata.drop_all(bind=engine); Base.metadata.create_all(bind=engine)\"",
    "db:seed": "cd backend && python3 scripts/seed_database.py",
    "health": "curl -f http://localhost:8000/health && curl -f http://localhost:4321/",
    "security:audit": "npm audit && cd frontend && npm audit && cd ../backend && pip install safety && safety check",
    "security:fix": "npm audit fix && cd frontend && npm audit fix",
    "performance:test": "cd frontend && npm run performance:test",
    "performance:test:frontend": "cd frontend && npm run lighthouse",
    "performance:test:backend": "cd backend && python3 -m pytest tests/performance/",
    "monitor": "docker-compose -f docker-compose.prod.yml logs -f prometheus grafana",
    "backup:db": "cd backend && python3 scripts/backup_database.py",
    "restore:db": "cd backend && python3 scripts/restore_database.py",
    "deploy:staging": "npm run build && npm run test && npm run docker:prod",
    "deploy:production": "npm run build && npm run test && npm run security:audit && npm run docker:prod",
    "docs:serve": "cd docs && python3 -m http.server 8080",
    "docs:build": "cd docs && mkdocs build",
    "docs:deploy": "cd docs && mkdocs gh-deploy",
    "release:patch": "npm version patch && git push --tags",
    "release:minor": "npm version minor && git push --tags",
    "release:major": "npm version major && git push --tags"
  },
  "devDependencies": {
    "concurrently": "^8.2.2"
  },
  "keywords": [
    "solana",
    "blockchain",
    "marketplace",
    "e-commerce",
    "astro",
    "fastapi",
    "typescript"
  ],
  "author": "Soladia Team",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  }
}