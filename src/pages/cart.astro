---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import PaymentModal from '../components/solana/PaymentModal.astro';

// Sample cart data - in a real app, this would come from state management or API
const cartItems = [
  {
    id: 1,
    title: "Vintage Camera Collection",
    description: "Rare vintage cameras from the 1960s",
    price: 299.99,
    originalPrice: 399.99,
    image: "https://via.placeholder.com/150x150/E60012/FFFFFF?text=Product+1",
    quantity: 1,
    seller: "CameraExpert",
    condition: "Used"
  },
  {
    id: 2,
    title: "Wireless Headphones",
    description: "Premium noise-canceling headphones",
    price: 199.99,
    image: "https://via.placeholder.com/150x150/0066CC/FFFFFF?text=Product+2",
    quantity: 2,
    seller: "TechStore",
    condition: "New"
  }
];

const subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
const shipping = 9.99;
const tax = subtotal * 0.08;
const total = subtotal + shipping + tax;
---

<Layout title="Shopping Cart - Soladia">
  <Navigation />
  
  <div class="cart-container">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <h1 class="page-title">Shopping Cart</h1>
      
      {cartItems.length > 0 ? (
        <div class="cart-content">
          <!-- Cart Items -->
          <div class="cart-items">
            {cartItems.map((item) => (
              <div class="cart-item" data-item-id={item.id}>
                <div class="item-image">
                  <img src={item.image} alt={item.title} />
                </div>
                <div class="item-details">
                  <h3 class="item-title">{item.title}</h3>
                  <p class="item-description">{item.description}</p>
                  <div class="item-meta">
                    <span class="item-seller">Sold by: {item.seller}</span>
                    <span class="item-condition">Condition: {item.condition}</span>
                  </div>
                </div>
                <div class="item-quantity">
                  <label for={`quantity-${item.id}`}>Qty:</label>
                  <select id={`quantity-${item.id}`} class="quantity-select" data-item-id={item.id}>
                    {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((qty) => (
                      <option value={qty} selected={qty === item.quantity}>{qty}</option>
                    ))}
                  </select>
                </div>
                <div class="item-price">
                  <div class="price-current">${item.price.toFixed(2)}</div>
                  {item.originalPrice && (
                    <div class="price-original">${item.originalPrice.toFixed(2)}</div>
                  )}
                </div>
                <div class="item-total">
                  ${(item.price * item.quantity).toFixed(2)}
                </div>
                <button class="remove-item" data-item-id={item.id}>
                  <span class="remove-icon">üóëÔ∏è</span>
                </button>
              </div>
            ))}
          </div>

          <!-- Order Summary -->
          <div class="order-summary">
            <h3 class="summary-title">Order Summary</h3>
            <div class="summary-line">
              <span>Subtotal ({cartItems.length} items)</span>
              <span>${subtotal.toFixed(2)}</span>
            </div>
            <div class="summary-line">
              <span>Shipping</span>
              <span>${shipping.toFixed(2)}</span>
            </div>
            <div class="summary-line">
              <span>Tax</span>
              <span>${tax.toFixed(2)}</span>
            </div>
            <div class="summary-line summary-total">
              <span>Total</span>
              <span>${total.toFixed(2)}</span>
            </div>
            
            <!-- Solana Payment Options -->
            <div class="payment-options">
              <h4 class="payment-title">Payment Options</h4>
              <div class="payment-methods">
                <button class="payment-method active" data-method="sol">
                  <span class="method-icon">‚òÄÔ∏è</span>
                  <span class="method-name">Pay with SOL</span>
                  <span class="method-amount">{(total / 100).toFixed(4)} SOL</span>
                </button>
                <button class="payment-method" data-method="usdc">
                  <span class="method-icon">üíµ</span>
                  <span class="method-name">Pay with USDC</span>
                  <span class="method-amount">{total.toFixed(2)} USDC</span>
                </button>
              </div>
            </div>

            <!-- Checkout Button -->
            <button class="checkout-btn" id="checkout-btn">
              <span class="checkout-icon">üõí</span>
              Proceed to Checkout
            </button>
          </div>
        </div>
      ) : (
        <div class="empty-cart">
          <div class="empty-icon">üõí</div>
          <h2 class="empty-title">Your cart is empty</h2>
          <p class="empty-description">Add some items to get started!</p>
          <a href="/" class="btn-primary">Continue Shopping</a>
        </div>
      )}
    </div>
  </div>

  <!-- Payment Modal -->
  <PaymentModal />
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Quantity change handler
    const quantitySelects = document.querySelectorAll('.quantity-select');
    quantitySelects.forEach(select => {
      select.addEventListener('change', function() {
        const itemId = this.getAttribute('data-item-id');
        const newQuantity = parseInt(this.value);
        updateItemQuantity(itemId, newQuantity);
      });
    });

    // Remove item handler
    const removeButtons = document.querySelectorAll('.remove-item');
    removeButtons.forEach(button => {
      button.addEventListener('click', function() {
        const itemId = this.getAttribute('data-item-id');
        removeItem(itemId);
      });
    });

    // Payment method selection
    const paymentMethods = document.querySelectorAll('.payment-method');
    paymentMethods.forEach(method => {
      method.addEventListener('click', function() {
        paymentMethods.forEach(m => m.classList.remove('active'));
        this.classList.add('active');
      });
    });

    // Checkout button
    const checkoutBtn = document.getElementById('checkout-btn');
    if (checkoutBtn) {
      checkoutBtn.addEventListener('click', () => {
        const selectedMethod = document.querySelector('.payment-method.active');
        const method = selectedMethod?.getAttribute('data-method') || 'sol';
        initiateCheckout(method);
      });
    }
  });

  function updateItemQuantity(itemId: string, quantity: number) {
    // In a real app, this would update the cart state and recalculate totals
    console.log(`Updating item ${itemId} quantity to ${quantity}`);
    // For now, just show a notification
    showNotification('Quantity updated', 'success');
  }

  function removeItem(itemId: string) {
    // In a real app, this would remove the item from cart state
    const itemElement = document.querySelector(`[data-item-id="${itemId}"]`);
    if (itemElement) {
      itemElement.remove();
      showNotification('Item removed from cart', 'info');
    }
  }

  function initiateCheckout(method: string) {
    // In a real app, this would open the payment modal or redirect to checkout
    console.log(`Initiating checkout with ${method}`);
    
    // Show payment modal
    const paymentModal = document.getElementById('payment-modal');
    if (paymentModal) {
      paymentModal.classList.add('active');
    }
  }

  function showNotification(message: string, type: 'success' | 'error' | 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }
</script>

<style>
  .cart-container {
    @apply min-h-screen bg-gray-50;
  }

  .page-title {
    @apply text-3xl font-bold text-gray-900 mb-8;
  }

  .cart-content {
    @apply grid grid-cols-1 lg:grid-cols-3 gap-8;
  }

  .cart-items {
    @apply lg:col-span-2 space-y-4;
  }

  .cart-item {
    @apply bg-white rounded-lg shadow-sm p-6 flex items-center space-x-4;
  }

  .item-image img {
    @apply w-20 h-20 object-cover rounded-lg;
  }

  .item-details {
    @apply flex-1;
  }

  .item-title {
    @apply text-lg font-semibold text-gray-900;
  }

  .item-description {
    @apply text-gray-600 text-sm mt-1;
  }

  .item-meta {
    @apply flex space-x-4 mt-2 text-sm text-gray-500;
  }

  .item-quantity {
    @apply flex items-center space-x-2;
  }

  .quantity-select {
    @apply border border-gray-300 rounded px-2 py-1;
  }

  .item-price {
    @apply text-right;
  }

  .price-current {
    @apply text-lg font-semibold text-gray-900;
  }

  .price-original {
    @apply text-sm text-gray-500 line-through;
  }

  .item-total {
    @apply text-lg font-bold text-gray-900;
  }

  .remove-item {
    @apply p-2 text-gray-400 hover:text-red-500 transition-colors;
  }

  .order-summary {
    @apply bg-white rounded-lg shadow-sm p-6 h-fit;
  }

  .summary-title {
    @apply text-xl font-semibold text-gray-900 mb-4;
  }

  .summary-line {
    @apply flex justify-between py-2 border-b border-gray-200;
  }

  .summary-total {
    @apply text-lg font-bold text-gray-900 border-b-0 pt-2;
  }

  .payment-options {
    @apply mt-6;
  }

  .payment-title {
    @apply text-lg font-semibold text-gray-900 mb-3;
  }

  .payment-methods {
    @apply space-y-2;
  }

  .payment-method {
    @apply w-full p-3 border border-gray-300 rounded-lg flex items-center justify-between hover:bg-gray-50 transition-colors;
  }

  .payment-method.active {
    @apply border-blue-500 bg-blue-50;
  }

  .method-icon {
    @apply text-xl;
  }

  .method-name {
    @apply font-medium;
  }

  .method-amount {
    @apply text-sm text-gray-600;
  }

  .checkout-btn {
    @apply w-full mt-6 bg-blue-600 text-white py-3 px-4 rounded-lg font-semibold hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2;
  }

  .checkout-icon {
    @apply text-lg;
  }

  .empty-cart {
    @apply text-center py-16;
  }

  .empty-icon {
    @apply text-6xl mb-4;
  }

  .empty-title {
    @apply text-2xl font-bold text-gray-900 mb-2;
  }

  .empty-description {
    @apply text-gray-600 mb-6;
  }

  .btn-primary {
    @apply bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors;
  }

  .notification {
    @apply fixed top-4 right-4 px-4 py-2 rounded-lg text-white font-medium z-50;
  }

  .notification-success {
    @apply bg-green-600;
  }

  .notification-error {
    @apply bg-red-600;
  }

  .notification-info {
    @apply bg-blue-600;
  }
</style>
