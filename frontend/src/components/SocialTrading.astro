---
// SocialTrading.astro - Social trading features and community components
export interface Props {
  userId?: string;
  showLeaderboard?: boolean;
  showSocialFeed?: boolean;
  showCopyTrading?: boolean;
  showCommunity?: boolean;
}

const {
  userId = '',
  showLeaderboard = true,
  showSocialFeed = true,
  showCopyTrading = true,
  showCommunity = true
} = Astro.props;

// Mock social trading data
const leaderboard = [
  { rank: 1, username: 'CryptoWhale', pnl: 125000, winRate: 87.5, followers: 12500, avatar: '/avatars/whale.jpg' },
  { rank: 2, username: 'NFTMaster', pnl: 98000, winRate: 82.3, followers: 8900, avatar: '/avatars/master.jpg' },
  { rank: 3, username: 'SolanaTrader', pnl: 87500, winRate: 79.1, followers: 6700, avatar: '/avatars/trader.jpg' },
  { rank: 4, username: 'ArtCollector', pnl: 72000, winRate: 75.8, followers: 5400, avatar: '/avatars/collector.jpg' },
  { rank: 5, username: 'DeFiGuru', pnl: 68000, winRate: 73.2, followers: 4200, avatar: '/avatars/guru.jpg' }
];

const socialFeed = [
  {
    id: 1,
    user: { username: 'CryptoWhale', avatar: '/avatars/whale.jpg', verified: true },
    content: 'Just bought 10 Bored Apes at floor price. Bullish on the collection! üöÄ',
    timestamp: '2h ago',
    likes: 245,
    comments: 32,
    shares: 15,
    type: 'trade',
    tradeData: { action: 'bought', item: 'Bored Ape #1234', price: 45.2, quantity: 10 }
  },
  {
    id: 2,
    user: { username: 'NFTMaster', avatar: '/avatars/master.jpg', verified: true },
    content: 'My analysis on the current NFT market trends. What do you think?',
    timestamp: '4h ago',
    likes: 189,
    comments: 28,
    shares: 12,
    type: 'analysis',
    analysisData: { title: 'NFT Market Analysis Q1 2024', views: 1250 }
  },
  {
    id: 3,
    user: { username: 'ArtCollector', avatar: '/avatars/collector.jpg', verified: false },
    content: 'Check out this amazing digital art piece I just discovered!',
    timestamp: '6h ago',
    likes: 156,
    comments: 19,
    shares: 8,
    type: 'discovery',
    discoveryData: { item: 'Digital Art #5678', artist: 'CryptoArtist', price: 12.5 }
  }
];

const copyTraders = [
  { id: 1, username: 'CryptoWhale', pnl: 125000, winRate: 87.5, followers: 12500, copyFee: 5.0, isFollowing: true },
  { id: 2, username: 'NFTMaster', pnl: 98000, winRate: 82.3, followers: 8900, copyFee: 3.5, isFollowing: false },
  { id: 3, username: 'SolanaTrader', pnl: 87500, winRate: 79.1, followers: 6700, copyFee: 2.0, isFollowing: true }
];

const communityStats = {
  totalMembers: 125000,
  activeTraders: 8900,
  totalVolume: 2500000,
  averagePnl: 15.2,
  topPerformer: 'CryptoWhale',
  trendingCollection: 'Bored Ape Yacht Club'
};
---

<div class="social-trading" id="social-trading">
  <div class="social-header">
    <h2 class="social-title">Social Trading</h2>
    <div class="social-stats">
      <div class="stat-item">
        <span class="stat-value">{communityStats.totalMembers.toLocaleString()}</span>
        <span class="stat-label">Members</span>
      </div>
      <div class="stat-item">
        <span class="stat-value">{communityStats.activeTraders.toLocaleString()}</span>
        <span class="stat-label">Active Traders</span>
      </div>
      <div class="stat-item">
        <span class="stat-value">${communityStats.totalVolume.toLocaleString()}</span>
        <span class="stat-label">Total Volume</span>
      </div>
    </div>
  </div>

  <div class="social-content">
    {showLeaderboard && (
      <div class="leaderboard-section">
        <h3 class="section-title">Top Traders</h3>
        <div class="leaderboard">
          {leaderboard.map((trader) => (
            <div class="leaderboard-item" data-rank={trader.rank}>
              <div class="rank">#{trader.rank}</div>
              <div class="trader-info">
                <img src={trader.avatar} alt={trader.username} class="trader-avatar" />
                <div class="trader-details">
                  <div class="trader-name">
                    {trader.username}
                    <span class="verified-badge">‚úì</span>
                  </div>
                  <div class="trader-stats">
                    <span class="stat">${trader.pnl.toLocaleString()} PnL</span>
                    <span class="stat">{trader.winRate}% Win Rate</span>
                    <span class="stat">{trader.followers.toLocaleString()} Followers</span>
                  </div>
                </div>
              </div>
              <div class="trader-actions">
                <button class="follow-btn" data-user={trader.username}>
                  Follow
                </button>
                <button class="copy-btn" data-user={trader.username}>
                  Copy
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    )}

    {showSocialFeed && (
      <div class="social-feed-section">
        <h3 class="section-title">Social Feed</h3>
        <div class="feed-container">
          <div class="feed-composer">
            <div class="composer-header">
              <img src="/avatars/user.jpg" alt="You" class="composer-avatar" />
              <input type="text" placeholder="Share your trading insights..." class="composer-input" />
            </div>
            <div class="composer-actions">
              <button class="composer-btn" data-type="trade">
                <span class="btn-icon">üí∞</span>
                Trade
              </button>
              <button class="composer-btn" data-type="analysis">
                <span class="btn-icon">üìä</span>
                Analysis
              </button>
              <button class="composer-btn" data-type="discovery">
                <span class="btn-icon">üîç</span>
                Discovery
              </button>
              <button class="post-btn">Post</button>
            </div>
          </div>

          <div class="feed-list">
            {socialFeed.map((post) => (
              <div class="feed-item" data-post-id={post.id}>
                <div class="post-header">
                  <img src={post.user.avatar} alt={post.user.username} class="post-avatar" />
                  <div class="post-user">
                    <div class="post-username">
                      {post.user.username}
                      {post.user.verified && <span class="verified-badge">‚úì</span>}
                    </div>
                    <div class="post-timestamp">{post.timestamp}</div>
                  </div>
                  <button class="post-menu">‚ãØ</button>
                </div>
                
                <div class="post-content">
                  <p class="post-text">{post.content}</p>
                  
                  {post.type === 'trade' && post.tradeData && (
                    <div class="trade-card">
                      <div class="trade-info">
                        <span class="trade-action">{post.tradeData.action}</span>
                        <span class="trade-item">{post.tradeData.item}</span>
                        <span class="trade-price">{post.tradeData.price} SOL</span>
                        {post.tradeData.quantity > 1 && (
                          <span class="trade-quantity">x{post.tradeData.quantity}</span>
                        )}
                      </div>
                    </div>
                  )}
                  
                  {post.type === 'analysis' && post.analysisData && (
                    <div class="analysis-card">
                      <div class="analysis-title">{post.analysisData.title}</div>
                      <div class="analysis-views">{post.analysisData.views} views</div>
                    </div>
                  )}
                  
                  {post.type === 'discovery' && post.discoveryData && (
                    <div class="discovery-card">
                      <div class="discovery-item">{post.discoveryData.item}</div>
                      <div class="discovery-artist">by {post.discoveryData.artist}</div>
                      <div class="discovery-price">{post.discoveryData.price} SOL</div>
                    </div>
                  )}
                </div>
                
                <div class="post-actions">
                  <button class="action-btn like-btn" data-post-id={post.id}>
                    <span class="btn-icon">‚ù§Ô∏è</span>
                    {post.likes}
                  </button>
                  <button class="action-btn comment-btn" data-post-id={post.id}>
                    <span class="btn-icon">üí¨</span>
                    {post.comments}
                  </button>
                  <button class="action-btn share-btn" data-post-id={post.id}>
                    <span class="btn-icon">üîÑ</span>
                    {post.shares}
                  </button>
                  <button class="action-btn copy-trade-btn" data-post-id={post.id}>
                    <span class="btn-icon">üìã</span>
                    Copy Trade
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    )}

    {showCopyTrading && (
      <div class="copy-trading-section">
        <h3 class="section-title">Copy Trading</h3>
        <div class="copy-traders">
          {copyTraders.map((trader) => (
            <div class="copy-trader-card" data-trader-id={trader.id}>
              <div class="trader-header">
                <img src="/avatars/trader.jpg" alt={trader.username} class="trader-avatar" />
                <div class="trader-info">
                  <div class="trader-name">{trader.username}</div>
                  <div class="trader-followers">{trader.followers.toLocaleString()} followers</div>
                </div>
                <div class="trader-status">
                  {trader.isFollowing ? (
                    <span class="status-following">Following</span>
                  ) : (
                    <span class="status-available">Available</span>
                  )}
                </div>
              </div>
              
              <div class="trader-metrics">
                <div class="metric">
                  <span class="metric-label">PnL</span>
                  <span class="metric-value positive">${trader.pnl.toLocaleString()}</span>
                </div>
                <div class="metric">
                  <span class="metric-label">Win Rate</span>
                  <span class="metric-value">{trader.winRate}%</span>
                </div>
                <div class="metric">
                  <span class="metric-label">Copy Fee</span>
                  <span class="metric-value">{trader.copyFee}%</span>
                </div>
              </div>
              
              <div class="trader-actions">
                {trader.isFollowing ? (
                  <button class="unfollow-btn" data-trader-id={trader.id}>
                    Unfollow
                  </button>
                ) : (
                  <button class="follow-btn" data-trader-id={trader.id}>
                    Follow
                  </button>
                )}
                <button class="copy-btn" data-trader-id={trader.id}>
                  Copy Trades
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    )}

    {showCommunity && (
      <div class="community-section">
        <h3 class="section-title">Community</h3>
        <div class="community-content">
          <div class="community-stats">
            <div class="stat-card">
              <div class="stat-icon">üë•</div>
              <div class="stat-content">
                <div class="stat-value">{communityStats.totalMembers.toLocaleString()}</div>
                <div class="stat-label">Total Members</div>
              </div>
            </div>
            <div class="stat-card">
              <div class="stat-icon">üìà</div>
              <div class="stat-content">
                <div class="stat-value">{communityStats.averagePnl}%</div>
                <div class="stat-label">Average PnL</div>
              </div>
            </div>
            <div class="stat-card">
              <div class="stat-icon">üèÜ</div>
              <div class="stat-content">
                <div class="stat-value">{communityStats.topPerformer}</div>
                <div class="stat-label">Top Performer</div>
              </div>
            </div>
            <div class="stat-card">
              <div class="stat-icon">üî•</div>
              <div class="stat-content">
                <div class="stat-value">{communityStats.trendingCollection}</div>
                <div class="stat-label">Trending Collection</div>
              </div>
            </div>
          </div>
          
          <div class="community-features">
            <div class="feature-card">
              <div class="feature-icon">üí¨</div>
              <div class="feature-content">
                <h4 class="feature-title">Discord Community</h4>
                <p class="feature-description">Join our Discord for real-time discussions and trading tips</p>
                <button class="feature-btn">Join Discord</button>
              </div>
            </div>
            
            <div class="feature-card">
              <div class="feature-icon">üìö</div>
              <div class="feature-content">
                <h4 class="feature-title">Trading Academy</h4>
                <p class="feature-description">Learn from the best traders with our educational content</p>
                <button class="feature-btn">Start Learning</button>
              </div>
            </div>
            
            <div class="feature-card">
              <div class="feature-icon">üéØ</div>
              <div class="feature-content">
                <h4 class="feature-title">Trading Challenges</h4>
                <p class="feature-description">Participate in weekly trading challenges and win prizes</p>
                <button class="feature-btn">Join Challenge</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    )}
  </div>
</div>

<script>
  class SocialTrading {
    private userId: string;
    private following: Set<string> = new Set();
    private likedPosts: Set<string> = new Set();

    constructor(userId: string = '') {
      this.userId = userId;
      this.initializeElements();
      this.setupEventListeners();
      this.loadUserData();
    }

    private initializeElements() {
      // This will be called when the component is mounted
    }

    private setupEventListeners() {
      document.addEventListener('DOMContentLoaded', () => {
        // Follow/Unfollow buttons
        const followBtns = document.querySelectorAll('.follow-btn');
        followBtns.forEach(btn => {
          btn.addEventListener('click', (e) => this.handleFollow(e));
        });

        // Copy trade buttons
        const copyBtns = document.querySelectorAll('.copy-btn');
        copyBtns.forEach(btn => {
          btn.addEventListener('click', (e) => this.handleCopyTrade(e));
        });

        // Post actions
        const likeBtns = document.querySelectorAll('.like-btn');
        likeBtns.forEach(btn => {
          btn.addEventListener('click', (e) => this.handleLike(e));
        });

        const commentBtns = document.querySelectorAll('.comment-btn');
        commentBtns.forEach(btn => {
          btn.addEventListener('click', (e) => this.handleComment(e));
        });

        const shareBtns = document.querySelectorAll('.share-btn');
        shareBtns.forEach(btn => {
          btn.addEventListener('click', (e) => this.handleShare(e));
        });

        const copyTradeBtns = document.querySelectorAll('.copy-trade-btn');
        copyTradeBtns.forEach(btn => {
          btn.addEventListener('click', (e) => this.handleCopyTradeFromPost(e));
        });

        // Composer actions
        const composerBtns = document.querySelectorAll('.composer-btn');
        composerBtns.forEach(btn => {
          btn.addEventListener('click', (e) => this.handleComposerAction(e));
        });

        const postBtn = document.querySelector('.post-btn');
        postBtn?.addEventListener('click', () => this.handlePost());
      });
    }

    private loadUserData() {
      // Load user's following list and liked posts
      const followingData = localStorage.getItem('soladia_following');
      if (followingData) {
        this.following = new Set(JSON.parse(followingData));
      }

      const likedData = localStorage.getItem('soladia_liked_posts');
      if (likedData) {
        this.likedPosts = new Set(JSON.parse(likedData));
      }

      this.updateUI();
    }

    private updateUI() {
      // Update follow buttons based on following status
      const followBtns = document.querySelectorAll('.follow-btn');
      followBtns.forEach(btn => {
        const username = btn.getAttribute('data-user');
        if (username && this.following.has(username)) {
          btn.textContent = 'Following';
          btn.classList.add('following');
        }
      });

      // Update like buttons based on liked status
      const likeBtns = document.querySelectorAll('.like-btn');
      likeBtns.forEach(btn => {
        const postId = btn.getAttribute('data-post-id');
        if (postId && this.likedPosts.has(postId)) {
          btn.classList.add('liked');
        }
      });
    }

    private async handleFollow(event: Event) {
      const btn = event.target as HTMLButtonElement;
      const username = btn.getAttribute('data-user') || btn.getAttribute('data-trader-id');
      
      if (!username) return;

      try {
        if (this.following.has(username)) {
          // Unfollow
          this.following.delete(username);
          btn.textContent = 'Follow';
          btn.classList.remove('following');
          this.showNotification(`Unfollowed ${username}`, 'info');
        } else {
          // Follow
          this.following.add(username);
          btn.textContent = 'Following';
          btn.classList.add('following');
          this.showNotification(`Following ${username}`, 'success');
        }

        // Save to localStorage
        localStorage.setItem('soladia_following', JSON.stringify([...this.following]));
        
        // In a real implementation, this would call the API
        await this.updateFollowStatus(username, this.following.has(username));
        
      } catch (error) {
        this.showNotification('Failed to update follow status', 'error');
        console.error('Follow error:', error);
      }
    }

    private async handleCopyTrade(event: Event) {
      const btn = event.target as HTMLButtonElement;
      const traderId = btn.getAttribute('data-trader-id') || btn.getAttribute('data-user');
      
      if (!traderId) return;

      try {
        this.showNotification('Setting up copy trading...', 'info');
        
        // In a real implementation, this would set up copy trading
        await this.setupCopyTrading(traderId);
        
        this.showNotification('Copy trading activated!', 'success');
        btn.textContent = 'Copying...';
        btn.disabled = true;
        
      } catch (error) {
        this.showNotification('Failed to setup copy trading', 'error');
        console.error('Copy trade error:', error);
      }
    }

    private async handleLike(event: Event) {
      const btn = event.target as HTMLButtonElement;
      const postId = btn.getAttribute('data-post-id');
      
      if (!postId) return;

      try {
        const isLiked = this.likedPosts.has(postId);
        
        if (isLiked) {
          this.likedPosts.delete(postId);
          btn.classList.remove('liked');
          // Decrease like count
          const count = parseInt(btn.textContent || '0');
          btn.textContent = (count - 1).toString();
        } else {
          this.likedPosts.add(postId);
          btn.classList.add('liked');
          // Increase like count
          const count = parseInt(btn.textContent || '0');
          btn.textContent = (count + 1).toString();
        }

        // Save to localStorage
        localStorage.setItem('soladia_liked_posts', JSON.stringify([...this.likedPosts]));
        
        // In a real implementation, this would call the API
        await this.updateLikeStatus(postId, !isLiked);
        
      } catch (error) {
        this.showNotification('Failed to update like status', 'error');
        console.error('Like error:', error);
      }
    }

    private async handleComment(event: Event) {
      const btn = event.target as HTMLButtonElement;
      const postId = btn.getAttribute('data-post-id');
      
      if (!postId) return;

      // In a real implementation, this would open a comment modal
      this.showNotification('Comment feature coming soon!', 'info');
    }

    private async handleShare(event: Event) {
      const btn = event.target as HTMLButtonElement;
      const postId = btn.getAttribute('data-post-id');
      
      if (!postId) return;

      try {
        // In a real implementation, this would share the post
        if (navigator.share) {
          await navigator.share({
            title: 'Check out this trade on Soladia',
            text: 'Amazing trading insight on Soladia marketplace',
            url: window.location.href
          });
        } else {
          // Fallback to copying to clipboard
          await navigator.clipboard.writeText(window.location.href);
          this.showNotification('Link copied to clipboard!', 'success');
        }
        
        // Update share count
        const count = parseInt(btn.textContent || '0');
        btn.textContent = (count + 1).toString();
        
      } catch (error) {
        this.showNotification('Failed to share post', 'error');
        console.error('Share error:', error);
      }
    }

    private async handleCopyTradeFromPost(event: Event) {
      const btn = event.target as HTMLButtonElement;
      const postId = btn.getAttribute('data-post-id');
      
      if (!postId) return;

      try {
        this.showNotification('Copying trade from post...', 'info');
        
        // In a real implementation, this would extract trade data from the post
        // and set up copy trading
        await this.copyTradeFromPost(postId);
        
        this.showNotification('Trade copied successfully!', 'success');
        
      } catch (error) {
        this.showNotification('Failed to copy trade', 'error');
        console.error('Copy trade from post error:', error);
      }
    }

    private handleComposerAction(event: Event) {
      const btn = event.target as HTMLButtonElement;
      const type = btn.getAttribute('data-type');
      
      // In a real implementation, this would open different composer modes
      this.showNotification(`${type} composer coming soon!`, 'info');
    }

    private async handlePost() {
      const input = document.querySelector('.composer-input') as HTMLInputElement;
      const content = input?.value.trim();
      
      if (!content) {
        this.showNotification('Please enter some content', 'error');
        return;
      }

      try {
        this.showNotification('Posting...', 'info');
        
        // In a real implementation, this would post to the social feed
        await this.createPost(content);
        
        this.showNotification('Post published!', 'success');
        input.value = '';
        
        // Refresh the feed
        this.refreshFeed();
        
      } catch (error) {
        this.showNotification('Failed to publish post', 'error');
        console.error('Post error:', error);
      }
    }

    private async updateFollowStatus(username: string, isFollowing: boolean): Promise<void> {
      // Mock API call
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    private async setupCopyTrading(traderId: string): Promise<void> {
      // Mock API call
      await new Promise(resolve => setTimeout(resolve, 2000));
    }

    private async updateLikeStatus(postId: string, isLiked: boolean): Promise<void> {
      // Mock API call
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    private async copyTradeFromPost(postId: string): Promise<void> {
      // Mock API call
      await new Promise(resolve => setTimeout(resolve, 1500));
    }

    private async createPost(content: string): Promise<void> {
      // Mock API call
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    private refreshFeed() {
      // In a real implementation, this would refresh the social feed
      console.log('Refreshing social feed...');
    }

    private showNotification(message: string, type: 'success' | 'error' | 'info') {
      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
  }

  // Initialize social trading when DOM is loaded
  let socialTrading: SocialTrading;
  
  document.addEventListener('DOMContentLoaded', () => {
    socialTrading = new SocialTrading('${userId}');
  });

  // Export for external use
  window.getSocialTrading = () => socialTrading;
</script>

<style>
  .social-trading {
    @apply bg-white rounded-lg shadow-sm border border-gray-200 p-6;
  }

  .social-header {
    @apply flex justify-between items-center mb-6;
  }

  .social-title {
    @apply text-2xl font-bold text-gray-900;
  }

  .social-stats {
    @apply flex space-x-6;
  }

  .stat-item {
    @apply text-center;
  }

  .stat-value {
    @apply block text-lg font-bold text-gray-900;
  }

  .stat-label {
    @apply text-sm text-gray-600;
  }

  .social-content {
    @apply space-y-8;
  }

  .section-title {
    @apply text-lg font-semibold text-gray-900 mb-4;
  }

  .leaderboard-section {
    @apply space-y-4;
  }

  .leaderboard {
    @apply space-y-3;
  }

  .leaderboard-item {
    @apply flex items-center justify-between p-4 bg-gray-50 rounded-lg;
  }

  .rank {
    @apply text-2xl font-bold text-blue-600 w-12;
  }

  .trader-info {
    @apply flex items-center space-x-3 flex-1;
  }

  .trader-avatar {
    @apply w-12 h-12 rounded-full object-cover;
  }

  .trader-details {
    @apply flex-1;
  }

  .trader-name {
    @apply font-semibold text-gray-900 flex items-center space-x-1;
  }

  .verified-badge {
    @apply text-blue-500 text-sm;
  }

  .trader-stats {
    @apply text-sm text-gray-600 space-x-4;
  }

  .stat {
    @apply inline-block;
  }

  .trader-actions {
    @apply flex space-x-2;
  }

  .follow-btn,
  .copy-btn {
    @apply px-4 py-2 rounded-lg font-medium transition-colors;
  }

  .follow-btn {
    @apply bg-blue-600 text-white hover:bg-blue-700;
  }

  .follow-btn.following {
    @apply bg-gray-200 text-gray-700;
  }

  .copy-btn {
    @apply bg-green-600 text-white hover:bg-green-700;
  }

  .social-feed-section {
    @apply space-y-4;
  }

  .feed-container {
    @apply space-y-4;
  }

  .feed-composer {
    @apply bg-gray-50 rounded-lg p-4 space-y-3;
  }

  .composer-header {
    @apply flex items-center space-x-3;
  }

  .composer-avatar {
    @apply w-10 h-10 rounded-full object-cover;
  }

  .composer-input {
    @apply flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
  }

  .composer-actions {
    @apply flex items-center space-x-2;
  }

  .composer-btn {
    @apply px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors flex items-center space-x-1;
  }

  .post-btn {
    @apply px-4 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors;
  }

  .feed-list {
    @apply space-y-4;
  }

  .feed-item {
    @apply bg-white border border-gray-200 rounded-lg p-4;
  }

  .post-header {
    @apply flex items-center space-x-3 mb-3;
  }

  .post-avatar {
    @apply w-10 h-10 rounded-full object-cover;
  }

  .post-user {
    @apply flex-1;
  }

  .post-username {
    @apply font-semibold text-gray-900 flex items-center space-x-1;
  }

  .post-timestamp {
    @apply text-sm text-gray-500;
  }

  .post-menu {
    @apply p-1 text-gray-400 hover:text-gray-600;
  }

  .post-content {
    @apply mb-3;
  }

  .post-text {
    @apply text-gray-900 mb-3;
  }

  .trade-card,
  .analysis-card,
  .discovery-card {
    @apply bg-blue-50 border border-blue-200 rounded-lg p-3;
  }

  .trade-info {
    @apply flex items-center space-x-2 text-sm;
  }

  .trade-action {
    @apply font-semibold text-blue-600;
  }

  .trade-item {
    @apply text-gray-900;
  }

  .trade-price {
    @apply font-mono text-green-600;
  }

  .trade-quantity {
    @apply text-gray-600;
  }

  .analysis-title {
    @apply font-semibold text-gray-900;
  }

  .analysis-views {
    @apply text-sm text-gray-600;
  }

  .discovery-item {
    @apply font-semibold text-gray-900;
  }

  .discovery-artist {
    @apply text-sm text-gray-600;
  }

  .discovery-price {
    @apply font-mono text-green-600;
  }

  .post-actions {
    @apply flex items-center space-x-4;
  }

  .action-btn {
    @apply flex items-center space-x-1 text-sm text-gray-600 hover:text-gray-900 transition-colors;
  }

  .action-btn.liked {
    @apply text-red-600;
  }

  .btn-icon {
    @apply text-sm;
  }

  .copy-trading-section {
    @apply space-y-4;
  }

  .copy-traders {
    @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4;
  }

  .copy-trader-card {
    @apply bg-white border border-gray-200 rounded-lg p-4 space-y-3;
  }

  .trader-header {
    @apply flex items-center space-x-3;
  }

  .trader-status {
    @apply ml-auto;
  }

  .status-following {
    @apply text-sm text-green-600 font-medium;
  }

  .status-available {
    @apply text-sm text-gray-600;
  }

  .trader-metrics {
    @apply grid grid-cols-3 gap-4;
  }

  .metric {
    @apply text-center;
  }

  .metric-label {
    @apply block text-xs text-gray-600 mb-1;
  }

  .metric-value {
    @apply block text-sm font-semibold;
  }

  .metric-value.positive {
    @apply text-green-600;
  }

  .trader-actions {
    @apply flex space-x-2;
  }

  .unfollow-btn {
    @apply px-3 py-1 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors;
  }

  .community-section {
    @apply space-y-4;
  }

  .community-content {
    @apply space-y-6;
  }

  .community-stats {
    @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4;
  }

  .stat-card {
    @apply bg-gray-50 rounded-lg p-4 flex items-center space-x-3;
  }

  .stat-icon {
    @apply text-2xl;
  }

  .stat-content {
    @apply flex-1;
  }

  .stat-value {
    @apply block text-lg font-bold text-gray-900;
  }

  .stat-label {
    @apply block text-sm text-gray-600;
  }

  .community-features {
    @apply grid grid-cols-1 md:grid-cols-3 gap-4;
  }

  .feature-card {
    @apply bg-white border border-gray-200 rounded-lg p-4 space-y-3;
  }

  .feature-icon {
    @apply text-2xl;
  }

  .feature-title {
    @apply font-semibold text-gray-900;
  }

  .feature-description {
    @apply text-sm text-gray-600;
  }

  .feature-btn {
    @apply px-4 py-2 bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors;
  }

  .notification {
    @apply fixed top-4 right-4 px-4 py-2 rounded-lg text-white font-medium z-50;
  }

  .notification-success {
    @apply bg-green-600;
  }

  .notification-error {
    @apply bg-red-600;
  }

  .notification-info {
    @apply bg-blue-600;
  }
</style>

<!-- Global types for TypeScript -->
<script>
  declare global {
    interface Window {
      getSocialTrading: () => SocialTrading;
    }
  }
</script>
