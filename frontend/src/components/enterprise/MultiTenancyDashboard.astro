---
// Multi-Tenancy Dashboard Component
// Enterprise-grade tenant management and administration
---

<div class="multi-tenancy-dashboard">
  <!-- Header -->
  <div class="dashboard-header">
    <div class="header-content">
      <h1 class="dashboard-title">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
        </svg>
        Multi-Tenancy Management
      </h1>
      <p class="dashboard-subtitle">Manage tenants, users, and enterprise configurations</p>
    </div>
    <div class="header-actions">
      <button class="btn btn-primary" id="create-tenant-btn">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Create Tenant
      </button>
    </div>
  </div>

  <!-- Stats Overview -->
  <div class="stats-grid">
    <div class="stat-card">
      <div class="stat-icon">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
        </svg>
      </div>
      <div class="stat-content">
        <h3 class="stat-value" id="total-tenants">0</h3>
        <p class="stat-label">Total Tenants</p>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
        </svg>
      </div>
      <div class="stat-content">
        <h3 class="stat-value" id="total-users">0</h3>
        <p class="stat-label">Total Users</p>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
      </div>
      <div class="stat-content">
        <h3 class="stat-value" id="active-tenants">0</h3>
        <p class="stat-label">Active Tenants</p>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
        </svg>
      </div>
      <div class="stat-content">
        <h3 class="stat-value" id="monthly-revenue">$0</h3>
        <p class="stat-label">Monthly Revenue</p>
      </div>
    </div>
  </div>

  <!-- Filters and Search -->
  <div class="filters-section">
    <div class="filters-left">
      <div class="search-box">
        <svg class="search-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
        <input type="text" id="tenant-search" placeholder="Search tenants..." class="search-input">
      </div>
      
      <select id="tier-filter" class="filter-select">
        <option value="">All Tiers</option>
        <option value="starter">Starter</option>
        <option value="professional">Professional</option>
        <option value="enterprise">Enterprise</option>
        <option value="custom">Custom</option>
      </select>
      
      <select id="status-filter" class="filter-select">
        <option value="">All Status</option>
        <option value="active">Active</option>
        <option value="suspended">Suspended</option>
        <option value="pending">Pending</option>
        <option value="expired">Expired</option>
      </select>
    </div>
    
    <div class="filters-right">
      <button class="btn btn-secondary" id="export-btn">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        Export
      </button>
    </div>
  </div>

  <!-- Tenants Table -->
  <div class="tenants-table-container">
    <table class="tenants-table">
      <thead>
        <tr>
          <th>
            <input type="checkbox" id="select-all" class="checkbox">
          </th>
          <th>Tenant</th>
          <th>Tier</th>
          <th>Status</th>
          <th>Users</th>
          <th>Created</th>
          <th>Last Active</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="tenants-table-body">
        <!-- Tenants will be loaded here -->
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div class="pagination-container">
    <div class="pagination-info">
      <span id="pagination-info">Showing 0-0 of 0 tenants</span>
    </div>
    <div class="pagination-controls">
      <button class="btn btn-secondary" id="prev-page" disabled>
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
        Previous
      </button>
      <div class="page-numbers" id="page-numbers">
        <!-- Page numbers will be generated here -->
      </div>
      <button class="btn btn-secondary" id="next-page" disabled>
        Next
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<!-- Create Tenant Modal -->
<div id="create-tenant-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h2>Create New Tenant</h2>
      <button class="modal-close" id="close-create-modal">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    <div class="modal-body">
      <form id="create-tenant-form" class="form">
        <div class="form-group">
          <label for="tenant-name" class="form-label">Tenant Name *</label>
          <input type="text" id="tenant-name" name="name" class="form-input" required>
        </div>
        
        <div class="form-group">
          <label for="tenant-domain" class="form-label">Domain *</label>
          <input type="text" id="tenant-domain" name="domain" class="form-input" placeholder="example.com" required>
        </div>
        
        <div class="form-group">
          <label for="tenant-subdomain" class="form-label">Subdomain</label>
          <input type="text" id="tenant-subdomain" name="subdomain" class="form-input" placeholder="subdomain">
        </div>
        
        <div class="form-group">
          <label for="tenant-tier" class="form-label">Tier *</label>
          <select id="tenant-tier" name="tier" class="form-select" required>
            <option value="starter">Starter</option>
            <option value="professional">Professional</option>
            <option value="enterprise">Enterprise</option>
            <option value="custom">Custom</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="billing-email" class="form-label">Billing Email *</label>
          <input type="email" id="billing-email" name="billing_email" class="form-input" required>
        </div>
        
        <div class="form-group">
          <label for="tenant-settings" class="form-label">Settings (JSON)</label>
          <textarea id="tenant-settings" name="settings" class="form-textarea" rows="4" placeholder='{"feature1": true, "feature2": false}'></textarea>
        </div>
      </form>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" id="cancel-create-tenant">Cancel</button>
      <button type="submit" form="create-tenant-form" class="btn btn-primary">Create Tenant</button>
    </div>
  </div>
</div>

<!-- Tenant Details Modal -->
<div id="tenant-details-modal" class="modal">
  <div class="modal-content large">
    <div class="modal-header">
      <h2 id="tenant-details-title">Tenant Details</h2>
      <button class="modal-close" id="close-details-modal">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    <div class="modal-body">
      <div class="tenant-details-tabs">
        <button class="tab-button active" data-tab="overview">Overview</button>
        <button class="tab-button" data-tab="users">Users</button>
        <button class="tab-button" data-tab="settings">Settings</button>
        <button class="tab-button" data-tab="billing">Billing</button>
        <button class="tab-button" data-tab="analytics">Analytics</button>
      </div>
      
      <div class="tab-content active" id="overview-tab">
        <!-- Overview content will be loaded here -->
      </div>
      
      <div class="tab-content" id="users-tab">
        <!-- Users content will be loaded here -->
      </div>
      
      <div class="tab-content" id="settings-tab">
        <!-- Settings content will be loaded here -->
      </div>
      
      <div class="tab-content" id="billing-tab">
        <!-- Billing content will be loaded here -->
      </div>
      
      <div class="tab-content" id="analytics-tab">
        <!-- Analytics content will be loaded here -->
      </div>
    </div>
  </div>
</div>

<style>
  .multi-tenancy-dashboard {
    padding: 2rem;
    max-width: 1400px;
    margin: 0 auto;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
  }

  .header-content {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .dashboard-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0;
  }

  .dashboard-subtitle {
    color: var(--text-secondary);
    margin: 0.5rem 0 0 0;
  }

  .header-actions {
    display: flex;
    gap: 1rem;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .stat-card {
    background: var(--card-background);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-lg);
    padding: 1.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    transition: all 0.2s ease;
  }

  .stat-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }

  .stat-icon {
    width: 3rem;
    height: 3rem;
    background: var(--primary-color);
    border-radius: var(--border-radius-md);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .stat-icon .icon {
    width: 1.5rem;
    height: 1.5rem;
  }

  .stat-content {
    flex: 1;
  }

  .stat-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0;
  }

  .stat-label {
    color: var(--text-secondary);
    margin: 0.25rem 0 0 0;
    font-size: 0.875rem;
  }

  .filters-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    gap: 1rem;
  }

  .filters-left {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .search-box {
    position: relative;
    min-width: 300px;
  }

  .search-icon {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1.25rem;
    height: 1.25rem;
    color: var(--text-secondary);
  }

  .search-input {
    width: 100%;
    padding: 0.75rem 0.75rem 0.75rem 2.5rem;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    background: var(--input-background);
    color: var(--text-primary);
    font-size: 0.875rem;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px var(--primary-color-alpha);
  }

  .filter-select {
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    background: var(--input-background);
    color: var(--text-primary);
    font-size: 0.875rem;
    min-width: 150px;
  }

  .filters-right {
    display: flex;
    gap: 1rem;
  }

  .tenants-table-container {
    background: var(--card-background);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-lg);
    overflow: hidden;
    margin-bottom: 1.5rem;
  }

  .tenants-table {
    width: 100%;
    border-collapse: collapse;
  }

  .tenants-table th {
    background: var(--background-secondary);
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    color: var(--text-primary);
    border-bottom: 1px solid var(--border-color);
  }

  .tenants-table td {
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-primary);
  }

  .tenants-table tbody tr:hover {
    background: var(--background-secondary);
  }

  .checkbox {
    width: 1rem;
    height: 1rem;
    accent-color: var(--primary-color);
  }

  .tenant-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .tenant-avatar {
    width: 2.5rem;
    height: 2.5rem;
    border-radius: var(--border-radius-md);
    background: var(--primary-color);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
  }

  .tenant-details h4 {
    margin: 0;
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-primary);
  }

  .tenant-details p {
    margin: 0.25rem 0 0 0;
    font-size: 0.75rem;
    color: var(--text-secondary);
  }

  .tier-badge {
    padding: 0.25rem 0.75rem;
    border-radius: var(--border-radius-full);
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .tier-starter {
    background: var(--success-color-alpha);
    color: var(--success-color);
  }

  .tier-professional {
    background: var(--info-color-alpha);
    color: var(--info-color);
  }

  .tier-enterprise {
    background: var(--warning-color-alpha);
    color: var(--warning-color);
  }

  .tier-custom {
    background: var(--primary-color-alpha);
    color: var(--primary-color);
  }

  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: var(--border-radius-full);
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
  }

  .status-active {
    background: var(--success-color-alpha);
    color: var(--success-color);
  }

  .status-suspended {
    background: var(--error-color-alpha);
    color: var(--error-color);
  }

  .status-pending {
    background: var(--warning-color-alpha);
    color: var(--warning-color);
  }

  .status-expired {
    background: var(--text-muted-alpha);
    color: var(--text-muted);
  }

  .action-buttons {
    display: flex;
    gap: 0.5rem;
  }

  .btn-icon {
    width: 2rem;
    height: 2rem;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .btn-icon .icon {
    width: 1rem;
    height: 1rem;
  }

  .pagination-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1.5rem;
  }

  .pagination-info {
    color: var(--text-secondary);
    font-size: 0.875rem;
  }

  .pagination-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .page-numbers {
    display: flex;
    gap: 0.25rem;
  }

  .page-number {
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    background: var(--card-background);
    color: var(--text-primary);
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .page-number:hover {
    background: var(--background-secondary);
  }

  .page-number.active {
    background: var(--primary-color);
    color: white;
    border-color: var(--primary-color);
  }

  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    align-items: center;
    justify-content: center;
  }

  .modal.active {
    display: flex;
  }

  .modal-content {
    background: var(--card-background);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-xl);
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
  }

  .modal-content.large {
    max-width: 800px;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
  }

  .modal-header h2 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
  }

  .modal-close {
    width: 2rem;
    height: 2rem;
    border: none;
    background: none;
    color: var(--text-secondary);
    cursor: pointer;
    border-radius: var(--border-radius-md);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-close:hover {
    background: var(--background-secondary);
  }

  .modal-close .icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  .modal-body {
    padding: 1.5rem;
  }

  .modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1.5rem;
    border-top: 1px solid var(--border-color);
  }

  .form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-label {
    font-weight: 500;
    color: var(--text-primary);
    font-size: 0.875rem;
  }

  .form-input,
  .form-select,
  .form-textarea {
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    background: var(--input-background);
    color: var(--text-primary);
    font-size: 0.875rem;
  }

  .form-input:focus,
  .form-select:focus,
  .form-textarea:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px var(--primary-color-alpha);
  }

  .form-textarea {
    resize: vertical;
    min-height: 100px;
  }

  .tenant-details-tabs {
    display: flex;
    border-bottom: 1px solid var(--border-color);
    margin-bottom: 1.5rem;
  }

  .tab-button {
    padding: 0.75rem 1rem;
    border: none;
    background: none;
    color: var(--text-secondary);
    cursor: pointer;
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
  }

  .tab-button:hover {
    color: var(--text-primary);
  }

  .tab-button.active {
    color: var(--primary-color);
    border-bottom-color: var(--primary-color);
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  @media (max-width: 768px) {
    .multi-tenancy-dashboard {
      padding: 1rem;
    }

    .dashboard-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .filters-section {
      flex-direction: column;
      align-items: stretch;
    }

    .filters-left {
      flex-direction: column;
    }

    .search-box {
      min-width: auto;
    }

    .tenants-table-container {
      overflow-x: auto;
    }

    .pagination-container {
      flex-direction: column;
      gap: 1rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const multiTenancyDashboard = new MultiTenancyDashboard();
    multiTenancyDashboard.init();
  });

  class MultiTenancyDashboard {
    constructor() {
      this.currentPage = 1;
      this.pageSize = 10;
      this.totalTenants = 0;
      this.tenants = [];
      this.filters = {
        search: '',
        tier: '',
        status: ''
      };
    }

    async init() {
      this.setupEventListeners();
      await this.loadDashboardData();
      await this.loadTenants();
    }

    setupEventListeners() {
      // Search and filters
      document.getElementById('tenant-search').addEventListener('input', (e) => {
        this.filters.search = e.target.value;
        this.debounceSearch();
      });

      document.getElementById('tier-filter').addEventListener('change', (e) => {
        this.filters.tier = e.target.value;
        this.loadTenants();
      });

      document.getElementById('status-filter').addEventListener('change', (e) => {
        this.filters.status = e.target.value;
        this.loadTenants();
      });

      // Create tenant modal
      document.getElementById('create-tenant-btn').addEventListener('click', () => {
        this.showCreateTenantModal();
      });

      document.getElementById('close-create-modal').addEventListener('click', () => {
        this.hideCreateTenantModal();
      });

      document.getElementById('cancel-create-tenant').addEventListener('click', () => {
        this.hideCreateTenantModal();
      });

      document.getElementById('create-tenant-form').addEventListener('submit', (e) => {
        e.preventDefault();
        this.createTenant();
      });

      // Tenant details modal
      document.getElementById('close-details-modal').addEventListener('click', () => {
        this.hideTenantDetailsModal();
      });

      // Tab switching
      document.querySelectorAll('.tab-button').forEach(button => {
        button.addEventListener('click', (e) => {
          this.switchTab(e.target.dataset.tab);
        });
      });

      // Pagination
      document.getElementById('prev-page').addEventListener('click', () => {
        if (this.currentPage > 1) {
          this.currentPage--;
          this.loadTenants();
        }
      });

      document.getElementById('next-page').addEventListener('click', () => {
        const totalPages = Math.ceil(this.totalTenants / this.pageSize);
        if (this.currentPage < totalPages) {
          this.currentPage++;
          this.loadTenants();
        }
      });

      // Export
      document.getElementById('export-btn').addEventListener('click', () => {
        this.exportTenants();
      });
    }

    async loadDashboardData() {
      try {
        // Load dashboard statistics
        const response = await fetch('/api/enterprise/dashboard-stats');
        const data = await response.json();

        document.getElementById('total-tenants').textContent = data.totalTenants || 0;
        document.getElementById('total-users').textContent = data.totalUsers || 0;
        document.getElementById('active-tenants').textContent = data.activeTenants || 0;
        document.getElementById('monthly-revenue').textContent = `$${(data.monthlyRevenue || 0).toLocaleString()}`;
      } catch (error) {
        console.error('Failed to load dashboard data:', error);
      }
    }

    async loadTenants() {
      try {
        const params = new URLSearchParams({
          page: this.currentPage,
          limit: this.pageSize,
          search: this.filters.search,
          tier: this.filters.tier,
          status: this.filters.status
        });

        const response = await fetch(`/api/enterprise/tenants?${params}`);
        const data = await response.json();

        this.tenants = data.tenants || [];
        this.totalTenants = data.total || 0;

        this.renderTenantsTable();
        this.renderPagination();
      } catch (error) {
        console.error('Failed to load tenants:', error);
      }
    }

    renderTenantsTable() {
      const tbody = document.getElementById('tenants-table-body');
      tbody.innerHTML = '';

      this.tenants.forEach(tenant => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>
            <input type="checkbox" class="checkbox" data-tenant-id="${tenant.tenant_id}">
          </td>
          <td>
            <div class="tenant-info">
              <div class="tenant-avatar">
                ${tenant.name.charAt(0).toUpperCase()}
              </div>
              <div class="tenant-details">
                <h4>${tenant.name}</h4>
                <p>${tenant.domain}</p>
              </div>
            </div>
          </td>
          <td>
            <span class="tier-badge tier-${tenant.tier}">${tenant.tier}</span>
          </td>
          <td>
            <span class="status-badge status-${tenant.status}">${tenant.status}</span>
          </td>
          <td>${tenant.user_count || 0}</td>
          <td>${new Date(tenant.created_at).toLocaleDateString()}</td>
          <td>${tenant.last_active ? new Date(tenant.last_active).toLocaleDateString() : 'Never'}</td>
          <td>
            <div class="action-buttons">
              <button class="btn btn-icon btn-secondary" onclick="multiTenancyDashboard.viewTenant('${tenant.tenant_id}')" title="View Details">
                <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
              </button>
              <button class="btn btn-icon btn-secondary" onclick="multiTenancyDashboard.editTenant('${tenant.tenant_id}')" title="Edit">
                <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
              </button>
              <button class="btn btn-icon btn-danger" onclick="multiTenancyDashboard.deleteTenant('${tenant.tenant_id}')" title="Delete">
                <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            </div>
          </td>
        `;
        tbody.appendChild(row);
      });
    }

    renderPagination() {
      const totalPages = Math.ceil(this.totalTenants / this.pageSize);
      
      // Update pagination info
      const start = (this.currentPage - 1) * this.pageSize + 1;
      const end = Math.min(this.currentPage * this.pageSize, this.totalTenants);
      document.getElementById('pagination-info').textContent = `Showing ${start}-${end} of ${this.totalTenants} tenants`;

      // Update prev/next buttons
      document.getElementById('prev-page').disabled = this.currentPage === 1;
      document.getElementById('next-page').disabled = this.currentPage === totalPages;

      // Generate page numbers
      const pageNumbers = document.getElementById('page-numbers');
      pageNumbers.innerHTML = '';

      const startPage = Math.max(1, this.currentPage - 2);
      const endPage = Math.min(totalPages, this.currentPage + 2);

      for (let i = startPage; i <= endPage; i++) {
        const pageButton = document.createElement('button');
        pageButton.className = `page-number ${i === this.currentPage ? 'active' : ''}`;
        pageButton.textContent = i;
        pageButton.addEventListener('click', () => {
          this.currentPage = i;
          this.loadTenants();
        });
        pageNumbers.appendChild(pageButton);
      }
    }

    showCreateTenantModal() {
      document.getElementById('create-tenant-modal').classList.add('active');
    }

    hideCreateTenantModal() {
      document.getElementById('create-tenant-modal').classList.remove('active');
      document.getElementById('create-tenant-form').reset();
    }

    async createTenant() {
      try {
        const formData = new FormData(document.getElementById('create-tenant-form'));
        const tenantData = {
          name: formData.get('name'),
          domain: formData.get('domain'),
          subdomain: formData.get('subdomain'),
          tier: formData.get('tier'),
          billing_email: formData.get('billing_email'),
          settings: formData.get('settings') ? JSON.parse(formData.get('settings')) : {}
        };

        const response = await fetch('/api/enterprise/tenants', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(tenantData)
        });

        if (response.ok) {
          this.hideCreateTenantModal();
          await this.loadTenants();
          await this.loadDashboardData();
          this.showNotification('Tenant created successfully', 'success');
        } else {
          const error = await response.json();
          this.showNotification(error.detail || 'Failed to create tenant', 'error');
        }
      } catch (error) {
        console.error('Failed to create tenant:', error);
        this.showNotification('Failed to create tenant', 'error');
      }
    }

    async viewTenant(tenantId) {
      try {
        const response = await fetch(`/api/enterprise/tenants/${tenantId}`);
        const tenant = await response.json();

        document.getElementById('tenant-details-title').textContent = tenant.name;
        document.getElementById('tenant-details-modal').classList.add('active');

        // Load tenant details in tabs
        await this.loadTenantOverview(tenant);
      } catch (error) {
        console.error('Failed to load tenant details:', error);
        this.showNotification('Failed to load tenant details', 'error');
      }
    }

    async loadTenantOverview(tenant) {
      const overviewTab = document.getElementById('overview-tab');
      overviewTab.innerHTML = `
        <div class="tenant-overview">
          <div class="overview-grid">
            <div class="overview-item">
              <h4>Basic Information</h4>
              <p><strong>Name:</strong> ${tenant.name}</p>
              <p><strong>Domain:</strong> ${tenant.domain}</p>
              <p><strong>Subdomain:</strong> ${tenant.subdomain || 'N/A'}</p>
              <p><strong>Tier:</strong> <span class="tier-badge tier-${tenant.tier}">${tenant.tier}</span></p>
              <p><strong>Status:</strong> <span class="status-badge status-${tenant.status}">${tenant.status}</span></p>
            </div>
            <div class="overview-item">
              <h4>Contact Information</h4>
              <p><strong>Billing Email:</strong> ${tenant.billing_email}</p>
              <p><strong>Created:</strong> ${new Date(tenant.created_at).toLocaleDateString()}</p>
              <p><strong>Last Updated:</strong> ${new Date(tenant.updated_at).toLocaleDateString()}</p>
            </div>
            <div class="overview-item">
              <h4>Usage Statistics</h4>
              <p><strong>Users:</strong> ${tenant.user_count || 0}</p>
              <p><strong>Products:</strong> ${tenant.product_count || 0}</p>
              <p><strong>Orders:</strong> ${tenant.order_count || 0}</p>
            </div>
          </div>
        </div>
      `;
    }

    hideTenantDetailsModal() {
      document.getElementById('tenant-details-modal').classList.remove('active');
    }

    switchTab(tabName) {
      // Update tab buttons
      document.querySelectorAll('.tab-button').forEach(button => {
        button.classList.remove('active');
      });
      document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

      // Update tab content
      document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
      });
      document.getElementById(`${tabName}-tab`).classList.add('active');
    }

    async editTenant(tenantId) {
      // Implementation for editing tenant
      console.log('Edit tenant:', tenantId);
    }

    async deleteTenant(tenantId) {
      if (confirm('Are you sure you want to delete this tenant? This action cannot be undone.')) {
        try {
          const response = await fetch(`/api/enterprise/tenants/${tenantId}`, {
            method: 'DELETE'
          });

          if (response.ok) {
            await this.loadTenants();
            await this.loadDashboardData();
            this.showNotification('Tenant deleted successfully', 'success');
          } else {
            this.showNotification('Failed to delete tenant', 'error');
          }
        } catch (error) {
          console.error('Failed to delete tenant:', error);
          this.showNotification('Failed to delete tenant', 'error');
        }
      }
    }

    async exportTenants() {
      try {
        const response = await fetch('/api/enterprise/tenants/export');
        const blob = await response.blob();
        
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `tenants-export-${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } catch (error) {
        console.error('Failed to export tenants:', error);
        this.showNotification('Failed to export tenants', 'error');
      }
    }

    debounceSearch() {
      clearTimeout(this.searchTimeout);
      this.searchTimeout = setTimeout(() => {
        this.currentPage = 1;
        this.loadTenants();
      }, 300);
    }

    showNotification(message, type) {
      // Implementation for showing notifications
      console.log(`${type.toUpperCase()}: ${message}`);
    }
  }
</script>


