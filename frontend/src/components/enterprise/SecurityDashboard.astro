---
// Security Dashboard Component
// Enterprise-grade security monitoring and management
---

<div class="security-dashboard">
  <!-- Header -->
  <div class="dashboard-header">
    <div class="header-content">
      <h1 class="dashboard-title">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
        </svg>
        Security Dashboard
      </h1>
      <p class="dashboard-subtitle">Monitor security events, threats, and compliance status</p>
    </div>
    <div class="header-actions">
      <button class="btn btn-secondary" id="refresh-btn">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
        Refresh
      </button>
      <button class="btn btn-primary" id="run-security-audit-btn">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        Run Security Audit
      </button>
    </div>
  </div>

  <!-- Security Status Overview -->
  <div class="security-status-grid">
    <div class="status-card healthy">
      <div class="status-icon">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      </div>
      <div class="status-content">
        <h3 class="status-value" id="security-score">95</h3>
        <p class="status-label">Security Score</p>
        <div class="status-bar">
          <div class="status-progress" style="width: 95%"></div>
        </div>
      </div>
    </div>

    <div class="status-card warning">
      <div class="status-icon">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
        </svg>
      </div>
      <div class="status-content">
        <h3 class="status-value" id="active-threats">3</h3>
        <p class="status-label">Active Threats</p>
        <div class="status-bar">
          <div class="status-progress warning" style="width: 30%"></div>
        </div>
      </div>
    </div>

    <div class="status-card critical">
      <div class="status-icon">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      </div>
      <div class="status-content">
        <h3 class="status-value" id="critical-alerts">1</h3>
        <p class="status-label">Critical Alerts</p>
        <div class="status-bar">
          <div class="status-progress critical" style="width: 100%"></div>
        </div>
      </div>
    </div>

    <div class="status-card healthy">
      <div class="status-icon">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
        </svg>
      </div>
      <div class="status-content">
        <h3 class="status-value" id="compliance-score">88</h3>
        <p class="status-label">Compliance Score</p>
        <div class="status-bar">
          <div class="status-progress" style="width: 88%"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Content Grid -->
  <div class="dashboard-grid">
    <!-- Security Events -->
    <div class="dashboard-card">
      <div class="card-header">
        <h3 class="card-title">Recent Security Events</h3>
        <div class="card-actions">
          <select id="event-filter" class="filter-select">
            <option value="">All Events</option>
            <option value="threat_detected">Threats</option>
            <option value="login_attempt">Login Attempts</option>
            <option value="api_access">API Access</option>
            <option value="system_event">System Events</option>
          </select>
          <button class="btn btn-sm btn-secondary" id="view-all-events">View All</button>
        </div>
      </div>
      <div class="card-content">
        <div class="events-list" id="events-list">
          <!-- Events will be loaded here -->
        </div>
      </div>
    </div>

    <!-- Threat Analysis -->
    <div class="dashboard-card">
      <div class="card-header">
        <h3 class="card-title">Threat Analysis</h3>
        <div class="card-actions">
          <button class="btn btn-sm btn-secondary" id="configure-rules">Configure Rules</button>
        </div>
      </div>
      <div class="card-content">
        <div class="threat-chart" id="threat-chart">
          <!-- Threat analysis chart will be rendered here -->
        </div>
        <div class="threat-stats">
          <div class="threat-stat">
            <span class="threat-type">SQL Injection</span>
            <span class="threat-count">12</span>
          </div>
          <div class="threat-stat">
            <span class="threat-type">XSS Attacks</span>
            <span class="threat-count">8</span>
          </div>
          <div class="threat-stat">
            <span class="threat-type">Brute Force</span>
            <span class="threat-count">25</span>
          </div>
          <div class="threat-stat">
            <span class="threat-type">DDoS</span>
            <span class="threat-count">3</span>
        </div>
      </div>
    </div>

    <!-- Security Rules -->
    <div class="dashboard-card">
      <div class="card-header">
        <h3 class="card-title">Security Rules</h3>
        <div class="card-actions">
          <button class="btn btn-sm btn-primary" id="create-rule-btn">Create Rule</button>
        </div>
      </div>
      <div class="card-content">
        <div class="rules-list" id="rules-list">
          <!-- Rules will be loaded here -->
        </div>
      </div>
    </div>

    <!-- Compliance Status -->
    <div class="dashboard-card">
      <div class="card-header">
        <h3 class="card-title">Compliance Status</h3>
        <div class="card-actions">
          <button class="btn btn-sm btn-secondary" id="run-compliance-check">Run Check</button>
        </div>
      </div>
      <div class="card-content">
        <div class="compliance-list" id="compliance-list">
          <!-- Compliance items will be loaded here -->
        </div>
      </div>
    </div>

    <!-- System Health -->
    <div class="dashboard-card">
      <div class="card-header">
        <h3 class="card-title">System Health</h3>
        <div class="card-actions">
          <button class="btn btn-sm btn-secondary" id="refresh-health">Refresh</button>
        </div>
      </div>
      <div class="card-content">
        <div class="health-metrics" id="health-metrics">
          <!-- Health metrics will be loaded here -->
        </div>
      </div>
    </div>

    <!-- Security Alerts -->
    <div class="dashboard-card">
      <div class="card-header">
        <h3 class="card-title">Active Alerts</h3>
        <div class="card-actions">
          <button class="btn btn-sm btn-secondary" id="acknowledge-all">Acknowledge All</button>
        </div>
      </div>
      <div class="card-content">
        <div class="alerts-list" id="alerts-list">
          <!-- Alerts will be loaded here -->
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Create Security Rule Modal -->
<div id="create-rule-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h2>Create Security Rule</h2>
      <button class="modal-close" id="close-create-rule-modal">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    <div class="modal-body">
      <form id="create-rule-form" class="form">
        <div class="form-group">
          <label for="rule-name" class="form-label">Rule Name *</label>
          <input type="text" id="rule-name" name="name" class="form-input" required>
        </div>
        
        <div class="form-group">
          <label for="rule-description" class="form-label">Description</label>
          <textarea id="rule-description" name="description" class="form-textarea" rows="3"></textarea>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="rule-type" class="form-label">Rule Type *</label>
            <select id="rule-type" name="rule_type" class="form-select" required>
              <option value="">Select Type</option>
              <option value="rate_limit">Rate Limit</option>
              <option value="ip_block">IP Block</option>
              <option value="pattern_match">Pattern Match</option>
              <option value="geo_block">Geographic Block</option>
              <option value="user_agent">User Agent</option>
            </select>
          </div>
          
          <div class="form-group">
            <label for="rule-severity" class="form-label">Severity *</label>
            <select id="rule-severity" name="severity" class="form-select" required>
              <option value="low">Low</option>
              <option value="medium" selected>Medium</option>
              <option value="high">High</option>
              <option value="critical">Critical</option>
            </select>
          </div>
        </div>
        
        <div class="form-group">
          <label for="rule-conditions" class="form-label">Conditions (JSON) *</label>
          <textarea id="rule-conditions" name="conditions" class="form-textarea code-editor" rows="4" required placeholder='{"ip_patterns": ["192.168.1.*"], "user_agent_patterns": ["bot"]}'></textarea>
        </div>
        
        <div class="form-group">
          <label for="rule-actions" class="form-label">Actions (JSON) *</label>
          <textarea id="rule-actions" name="actions" class="form-textarea code-editor" rows="4" required placeholder='{"block_ip": true, "send_alert": true, "log_event": true}'></textarea>
        </div>
        
        <div class="form-row">
          <div class="form-group">
            <label for="rule-rate-limit" class="form-label">Rate Limit (per hour)</label>
            <input type="number" id="rule-rate-limit" name="rate_limit" class="form-input" min="1">
          </div>
          
          <div class="form-group">
            <label for="rule-cooldown" class="form-label">Cooldown Period (seconds)</label>
            <input type="number" id="rule-cooldown" name="cooldown_period" class="form-input" min="60" value="300">
          </div>
        </div>
      </form>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" id="cancel-create-rule">Cancel</button>
      <button type="submit" form="create-rule-form" class="btn btn-primary">Create Rule</button>
    </div>
  </div>
</div>

<!-- Security Event Details Modal -->
<div id="event-details-modal" class="modal">
  <div class="modal-content large">
    <div class="modal-header">
      <h2 id="event-details-title">Security Event Details</h2>
      <button class="modal-close" id="close-event-details-modal">
        <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    <div class="modal-body">
      <div class="event-details" id="event-details-content">
        <!-- Event details will be loaded here -->
      </div>
    </div>
  </div>
</div>

<style>
  .security-dashboard {
    padding: 2rem;
    max-width: 1400px;
    margin: 0 auto;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
  }

  .header-content {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .dashboard-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0;
  }

  .dashboard-subtitle {
    color: var(--text-secondary);
    margin: 0.5rem 0 0 0;
  }

  .header-actions {
    display: flex;
    gap: 1rem;
  }

  .security-status-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .status-card {
    background: var(--card-background);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-lg);
    padding: 1.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    transition: all 0.2s ease;
  }

  .status-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }

  .status-card.healthy {
    border-left: 4px solid var(--success-color);
  }

  .status-card.warning {
    border-left: 4px solid var(--warning-color);
  }

  .status-card.critical {
    border-left: 4px solid var(--error-color);
  }

  .status-icon {
    width: 3rem;
    height: 3rem;
    border-radius: var(--border-radius-md);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .status-card.healthy .status-icon {
    background: var(--success-color-alpha);
    color: var(--success-color);
  }

  .status-card.warning .status-icon {
    background: var(--warning-color-alpha);
    color: var(--warning-color);
  }

  .status-card.critical .status-icon {
    background: var(--error-color-alpha);
    color: var(--error-color);
  }

  .status-icon .icon {
    width: 1.5rem;
    height: 1.5rem;
  }

  .status-content {
    flex: 1;
  }

  .status-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0;
  }

  .status-label {
    color: var(--text-secondary);
    margin: 0.25rem 0 0.5rem 0;
    font-size: 0.875rem;
  }

  .status-bar {
    width: 100%;
    height: 0.5rem;
    background: var(--background-secondary);
    border-radius: var(--border-radius-full);
    overflow: hidden;
  }

  .status-progress {
    height: 100%;
    background: var(--success-color);
    border-radius: var(--border-radius-full);
    transition: width 0.3s ease;
  }

  .status-progress.warning {
    background: var(--warning-color);
  }

  .status-progress.critical {
    background: var(--error-color);
  }

  .dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 1.5rem;
  }

  .dashboard-card {
    background: var(--card-background);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-lg);
    overflow: hidden;
  }

  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    background: var(--background-secondary);
  }

  .card-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }

  .card-actions {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .card-content {
    padding: 1.5rem;
  }

  .filter-select {
    padding: 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    background: var(--input-background);
    color: var(--text-primary);
    font-size: 0.875rem;
  }

  .events-list {
    max-height: 400px;
    overflow-y: auto;
  }

  .event-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
    transition: background 0.2s ease;
  }

  .event-item:hover {
    background: var(--background-secondary);
  }

  .event-item:last-child {
    border-bottom: none;
  }

  .event-icon {
    width: 2rem;
    height: 2rem;
    border-radius: var(--border-radius-md);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .event-icon.critical {
    background: var(--error-color-alpha);
    color: var(--error-color);
  }

  .event-icon.high {
    background: var(--warning-color-alpha);
    color: var(--warning-color);
  }

  .event-icon.medium {
    background: var(--info-color-alpha);
    color: var(--info-color);
  }

  .event-icon.low {
    background: var(--success-color-alpha);
    color: var(--success-color);
  }

  .event-details {
    flex: 1;
  }

  .event-title {
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 0.25rem 0;
  }

  .event-description {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin: 0 0 0.25rem 0;
  }

  .event-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.75rem;
    color: var(--text-muted);
  }

  .event-time {
    margin-left: auto;
    font-size: 0.75rem;
    color: var(--text-muted);
  }

  .threat-chart {
    height: 200px;
    background: var(--background-secondary);
    border-radius: var(--border-radius-md);
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-secondary);
    margin-bottom: 1rem;
  }

  .threat-stats {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .threat-stat {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background: var(--background-secondary);
    border-radius: var(--border-radius-md);
  }

  .threat-type {
    font-weight: 500;
    color: var(--text-primary);
  }

  .threat-count {
    font-weight: 600;
    color: var(--error-color);
  }

  .rules-list {
    max-height: 300px;
    overflow-y: auto;
  }

  .rule-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
  }

  .rule-item:last-child {
    border-bottom: none;
  }

  .rule-status {
    width: 0.75rem;
    height: 0.75rem;
    border-radius: var(--border-radius-full);
  }

  .rule-status.active {
    background: var(--success-color);
  }

  .rule-status.inactive {
    background: var(--text-muted);
  }

  .rule-details {
    flex: 1;
  }

  .rule-name {
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 0.25rem 0;
  }

  .rule-description {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin: 0;
  }

  .rule-actions {
    display: flex;
    gap: 0.5rem;
  }

  .compliance-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .compliance-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: var(--background-secondary);
    border-radius: var(--border-radius-md);
  }

  .compliance-icon {
    width: 2rem;
    height: 2rem;
    border-radius: var(--border-radius-md);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .compliance-icon.pass {
    background: var(--success-color-alpha);
    color: var(--success-color);
  }

  .compliance-icon.fail {
    background: var(--error-color-alpha);
    color: var(--error-color);
  }

  .compliance-icon.warning {
    background: var(--warning-color-alpha);
    color: var(--warning-color);
  }

  .compliance-details {
    flex: 1;
  }

  .compliance-name {
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 0.25rem 0;
  }

  .compliance-description {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin: 0;
  }

  .compliance-status {
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.75rem;
  }

  .compliance-status.pass {
    color: var(--success-color);
  }

  .compliance-status.fail {
    color: var(--error-color);
  }

  .compliance-status.warning {
    color: var(--warning-color);
  }

  .health-metrics {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 1rem;
  }

  .health-metric {
    text-align: center;
    padding: 1rem;
    background: var(--background-secondary);
    border-radius: var(--border-radius-md);
  }

  .health-metric-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0 0 0.25rem 0;
  }

  .health-metric-label {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin: 0;
  }

  .alerts-list {
    max-height: 300px;
    overflow-y: auto;
  }

  .alert-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
  }

  .alert-item:last-child {
    border-bottom: none;
  }

  .alert-severity {
    width: 0.75rem;
    height: 0.75rem;
    border-radius: var(--border-radius-full);
  }

  .alert-severity.critical {
    background: var(--error-color);
  }

  .alert-severity.high {
    background: var(--warning-color);
  }

  .alert-severity.medium {
    background: var(--info-color);
  }

  .alert-severity.low {
    background: var(--success-color);
  }

  .alert-details {
    flex: 1;
  }

  .alert-title {
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 0.25rem 0;
  }

  .alert-description {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin: 0;
  }

  .alert-actions {
    display: flex;
    gap: 0.5rem;
  }

  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    align-items: center;
    justify-content: center;
  }

  .modal.active {
    display: flex;
  }

  .modal-content {
    background: var(--card-background);
    border-radius: var(--border-radius-lg);
    box-shadow: var(--shadow-xl);
    max-width: 500px;
    width: 90%;
    max-height: 90vh;
    overflow-y: auto;
  }

  .modal-content.large {
    max-width: 800px;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
  }

  .modal-header h2 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
  }

  .modal-close {
    width: 2rem;
    height: 2rem;
    border: none;
    background: none;
    color: var(--text-secondary);
    cursor: pointer;
    border-radius: var(--border-radius-md);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-close:hover {
    background: var(--background-secondary);
  }

  .modal-close .icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  .modal-body {
    padding: 1.5rem;
  }

  .modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1.5rem;
    border-top: 1px solid var(--border-color);
  }

  .form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-label {
    font-weight: 500;
    color: var(--text-primary);
    font-size: 0.875rem;
  }

  .form-input,
  .form-select,
  .form-textarea {
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius-md);
    background: var(--input-background);
    color: var(--text-primary);
    font-size: 0.875rem;
  }

  .form-input:focus,
  .form-select:focus,
  .form-textarea:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px var(--primary-color-alpha);
  }

  .form-textarea {
    resize: vertical;
    min-height: 100px;
  }

  .code-editor {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.875rem;
    line-height: 1.5;
  }

  .btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: var(--border-radius-md);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }

  .btn-primary {
    background: var(--primary-color);
    color: white;
  }

  .btn-primary:hover {
    background: var(--primary-color-dark);
  }

  .btn-secondary {
    background: var(--background-secondary);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
  }

  .btn-secondary:hover {
    background: var(--border-color);
  }

  .btn-sm {
    padding: 0.375rem 0.75rem;
    font-size: 0.875rem;
  }

  .btn-danger {
    background: var(--error-color);
    color: white;
  }

  .btn-danger:hover {
    background: var(--error-color-dark);
  }

  .btn .icon {
    width: 1rem;
    height: 1rem;
  }

  @media (max-width: 768px) {
    .security-dashboard {
      padding: 1rem;
    }

    .dashboard-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .dashboard-grid {
      grid-template-columns: 1fr;
    }

    .form-row {
      grid-template-columns: 1fr;
    }

    .security-status-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const securityDashboard = new SecurityDashboard();
    securityDashboard.init();
  });

  class SecurityDashboard {
    constructor() {
      this.refreshInterval = null;
    }

    async init() {
      this.setupEventListeners();
      await this.loadDashboardData();
      this.startAutoRefresh();
    }

    setupEventListeners() {
      // Refresh button
      document.getElementById('refresh-btn').addEventListener('click', () => {
        this.loadDashboardData();
      });

      // Security audit button
      document.getElementById('run-security-audit-btn').addEventListener('click', () => {
        this.runSecurityAudit();
      });

      // Event filter
      document.getElementById('event-filter').addEventListener('change', (e) => {
        this.filterEvents(e.target.value);
      });

      // View all events
      document.getElementById('view-all-events').addEventListener('click', () => {
        this.viewAllEvents();
      });

      // Configure rules
      document.getElementById('configure-rules').addEventListener('click', () => {
        this.configureRules();
      });

      // Create rule modal
      document.getElementById('create-rule-btn').addEventListener('click', () => {
        this.showCreateRuleModal();
      });

      document.getElementById('close-create-rule-modal').addEventListener('click', () => {
        this.hideCreateRuleModal();
      });

      document.getElementById('cancel-create-rule').addEventListener('click', () => {
        this.hideCreateRuleModal();
      });

      document.getElementById('create-rule-form').addEventListener('submit', (e) => {
        e.preventDefault();
        this.createSecurityRule();
      });

      // Event details modal
      document.getElementById('close-event-details-modal').addEventListener('click', () => {
        this.hideEventDetailsModal();
      });

      // Compliance check
      document.getElementById('run-compliance-check').addEventListener('click', () => {
        this.runComplianceCheck();
      });

      // Refresh health
      document.getElementById('refresh-health').addEventListener('click', () => {
        this.refreshHealthMetrics();
      });

      // Acknowledge all alerts
      document.getElementById('acknowledge-all').addEventListener('click', () => {
        this.acknowledgeAllAlerts();
      });
    }

    async loadDashboardData() {
      try {
        // Load security overview
        const overviewResponse = await fetch('/api/security/dashboard');
        const overviewData = await overviewResponse.json();

        // Update status cards
        document.getElementById('security-score').textContent = overviewData.security_score || 95;
        document.getElementById('active-threats').textContent = overviewData.active_threats || 3;
        document.getElementById('critical-alerts').textContent = overviewData.critical_alerts || 1;
        document.getElementById('compliance-score').textContent = overviewData.compliance_score || 88;

        // Load security events
        await this.loadSecurityEvents();

        // Load security rules
        await this.loadSecurityRules();

        // Load compliance status
        await this.loadComplianceStatus();

        // Load system health
        await this.loadSystemHealth();

        // Load active alerts
        await this.loadActiveAlerts();

      } catch (error) {
        console.error('Failed to load dashboard data:', error);
      }
    }

    async loadSecurityEvents() {
      try {
        const response = await fetch('/api/security/events?limit=10');
        const data = await response.json();

        const eventsList = document.getElementById('events-list');
        eventsList.innerHTML = '';

        data.events.forEach(event => {
          const eventItem = document.createElement('div');
          eventItem.className = 'event-item';
          eventItem.innerHTML = `
            <div class="event-icon ${event.severity}">
              <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
            <div class="event-details">
              <h4 class="event-title">${event.event_type}</h4>
              <p class="event-description">${event.description}</p>
              <div class="event-meta">
                <span>IP: ${event.ip_address || 'Unknown'}</span>
                <span>Type: ${event.threat_type || 'N/A'}</span>
              </div>
            </div>
            <div class="event-time">
              ${new Date(event.created_at).toLocaleTimeString()}
            </div>
          `;
          eventItem.addEventListener('click', () => {
            this.showEventDetails(event);
          });
          eventsList.appendChild(eventItem);
        });
      } catch (error) {
        console.error('Failed to load security events:', error);
      }
    }

    async loadSecurityRules() {
      try {
        const response = await fetch('/api/security/rules');
        const data = await response.json();

        const rulesList = document.getElementById('rules-list');
        rulesList.innerHTML = '';

        data.rules.forEach(rule => {
          const ruleItem = document.createElement('div');
          ruleItem.className = 'rule-item';
          ruleItem.innerHTML = `
            <div class="rule-status ${rule.is_active ? 'active' : 'inactive'}"></div>
            <div class="rule-details">
              <h4 class="rule-name">${rule.name}</h4>
              <p class="rule-description">${rule.description || 'No description'}</p>
            </div>
            <div class="rule-actions">
              <button class="btn btn-sm btn-secondary" onclick="securityDashboard.editRule('${rule.rule_id}')">Edit</button>
              <button class="btn btn-sm btn-danger" onclick="securityDashboard.deleteRule('${rule.rule_id}')">Delete</button>
            </div>
          `;
          rulesList.appendChild(ruleItem);
        });
      } catch (error) {
        console.error('Failed to load security rules:', error);
      }
    }

    async loadComplianceStatus() {
      try {
        const response = await fetch('/api/security/compliance');
        const data = await response.json();

        const complianceList = document.getElementById('compliance-list');
        complianceList.innerHTML = '';

        data.compliance_items.forEach(item => {
          const complianceItem = document.createElement('div');
          complianceItem.className = 'compliance-item';
          complianceItem.innerHTML = `
            <div class="compliance-icon ${item.status}">
              <svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="compliance-details">
              <h4 class="compliance-name">${item.name}</h4>
              <p class="compliance-description">${item.description}</p>
            </div>
            <div class="compliance-status ${item.status}">${item.status}</div>
          `;
          complianceList.appendChild(complianceItem);
        });
      } catch (error) {
        console.error('Failed to load compliance status:', error);
      }
    }

    async loadSystemHealth() {
      try {
        const response = await fetch('/api/security/health');
        const data = await response.json();

        const healthMetrics = document.getElementById('health-metrics');
        healthMetrics.innerHTML = '';

        Object.entries(data.metrics).forEach(([key, value]) => {
          const metricItem = document.createElement('div');
          metricItem.className = 'health-metric';
          metricItem.innerHTML = `
            <div class="health-metric-value">${value}</div>
            <div class="health-metric-label">${key.replace(/_/g, ' ').toUpperCase()}</div>
          `;
          healthMetrics.appendChild(metricItem);
        });
      } catch (error) {
        console.error('Failed to load system health:', error);
      }
    }

    async loadActiveAlerts() {
      try {
        const response = await fetch('/api/security/alerts?status=active');
        const data = await response.json();

        const alertsList = document.getElementById('alerts-list');
        alertsList.innerHTML = '';

        data.alerts.forEach(alert => {
          const alertItem = document.createElement('div');
          alertItem.className = 'alert-item';
          alertItem.innerHTML = `
            <div class="alert-severity ${alert.severity}"></div>
            <div class="alert-details">
              <h4 class="alert-title">${alert.title}</h4>
              <p class="alert-description">${alert.description}</p>
            </div>
            <div class="alert-actions">
              <button class="btn btn-sm btn-secondary" onclick="securityDashboard.acknowledgeAlert('${alert.alert_id}')">Acknowledge</button>
              <button class="btn btn-sm btn-primary" onclick="securityDashboard.resolveAlert('${alert.alert_id}')">Resolve</button>
            </div>
          `;
          alertsList.appendChild(alertItem);
        });
      } catch (error) {
        console.error('Failed to load active alerts:', error);
      }
    }

    async runSecurityAudit() {
      try {
        const response = await fetch('/api/security/audit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            audit_type: 'comprehensive'
          })
        });

        if (response.ok) {
          this.showNotification('Security audit started', 'success');
          // Refresh data after a delay
          setTimeout(() => {
            this.loadDashboardData();
          }, 5000);
        } else {
          this.showNotification('Failed to start security audit', 'error');
        }
      } catch (error) {
        console.error('Failed to run security audit:', error);
        this.showNotification('Failed to run security audit', 'error');
      }
    }

    filterEvents(eventType) {
      // Implementation for filtering events
      console.log('Filtering events by type:', eventType);
    }

    viewAllEvents() {
      // Implementation for viewing all events
      console.log('Viewing all events');
    }

    configureRules() {
      // Implementation for configuring rules
      console.log('Configuring rules');
    }

    showCreateRuleModal() {
      document.getElementById('create-rule-modal').classList.add('active');
    }

    hideCreateRuleModal() {
      document.getElementById('create-rule-modal').classList.remove('active');
      document.getElementById('create-rule-form').reset();
    }

    async createSecurityRule() {
      try {
        const formData = new FormData(document.getElementById('create-rule-form'));
        const ruleData = {
          name: formData.get('name'),
          description: formData.get('description'),
          rule_type: formData.get('rule_type'),
          severity: formData.get('severity'),
          conditions: JSON.parse(formData.get('conditions')),
          actions: JSON.parse(formData.get('actions')),
          rate_limit: formData.get('rate_limit') ? parseInt(formData.get('rate_limit')) : null,
          cooldown_period: parseInt(formData.get('cooldown_period'))
        };

        const response = await fetch('/api/security/rules', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(ruleData)
        });

        if (response.ok) {
          this.hideCreateRuleModal();
          await this.loadSecurityRules();
          this.showNotification('Security rule created successfully', 'success');
        } else {
          this.showNotification('Failed to create security rule', 'error');
        }
      } catch (error) {
        console.error('Failed to create security rule:', error);
        this.showNotification('Failed to create security rule', 'error');
      }
    }

    showEventDetails(event) {
      document.getElementById('event-details-title').textContent = event.event_type;
      document.getElementById('event-details-content').innerHTML = `
        <div class="event-detail-section">
          <h4>Event Information</h4>
          <p><strong>Type:</strong> ${event.event_type}</p>
          <p><strong>Threat Type:</strong> ${event.threat_type || 'N/A'}</p>
          <p><strong>Severity:</strong> ${event.severity}</p>
          <p><strong>Description:</strong> ${event.description}</p>
        </div>
        <div class="event-detail-section">
          <h4>Request Details</h4>
          <p><strong>IP Address:</strong> ${event.ip_address || 'Unknown'}</p>
          <p><strong>User Agent:</strong> ${event.user_agent || 'Unknown'}</p>
          <p><strong>Request Path:</strong> ${event.request_path || 'N/A'}</p>
          <p><strong>Request Method:</strong> ${event.request_method || 'N/A'}</p>
        </div>
        <div class="event-detail-section">
          <h4>Timing</h4>
          <p><strong>Created:</strong> ${new Date(event.created_at).toLocaleString()}</p>
          <p><strong>Response Time:</strong> ${event.response_time || 'N/A'}ms</p>
        </div>
      `;
      document.getElementById('event-details-modal').classList.add('active');
    }

    hideEventDetailsModal() {
      document.getElementById('event-details-modal').classList.remove('active');
    }

    async runComplianceCheck() {
      try {
        const response = await fetch('/api/security/compliance/check', {
          method: 'POST'
        });

        if (response.ok) {
          this.showNotification('Compliance check started', 'success');
          setTimeout(() => {
            this.loadComplianceStatus();
          }, 3000);
        } else {
          this.showNotification('Failed to start compliance check', 'error');
        }
      } catch (error) {
        console.error('Failed to run compliance check:', error);
        this.showNotification('Failed to run compliance check', 'error');
      }
    }

    async refreshHealthMetrics() {
      await this.loadSystemHealth();
      this.showNotification('Health metrics refreshed', 'success');
    }

    async acknowledgeAllAlerts() {
      try {
        const response = await fetch('/api/security/alerts/acknowledge-all', {
          method: 'POST'
        });

        if (response.ok) {
          await this.loadActiveAlerts();
          this.showNotification('All alerts acknowledged', 'success');
        } else {
          this.showNotification('Failed to acknowledge alerts', 'error');
        }
      } catch (error) {
        console.error('Failed to acknowledge alerts:', error);
        this.showNotification('Failed to acknowledge alerts', 'error');
      }
    }

    async acknowledgeAlert(alertId) {
      try {
        const response = await fetch(`/api/security/alerts/${alertId}/acknowledge`, {
          method: 'POST'
        });

        if (response.ok) {
          await this.loadActiveAlerts();
          this.showNotification('Alert acknowledged', 'success');
        } else {
          this.showNotification('Failed to acknowledge alert', 'error');
        }
      } catch (error) {
        console.error('Failed to acknowledge alert:', error);
        this.showNotification('Failed to acknowledge alert', 'error');
      }
    }

    async resolveAlert(alertId) {
      try {
        const response = await fetch(`/api/security/alerts/${alertId}/resolve`, {
          method: 'POST'
        });

        if (response.ok) {
          await this.loadActiveAlerts();
          this.showNotification('Alert resolved', 'success');
        } else {
          this.showNotification('Failed to resolve alert', 'error');
        }
      } catch (error) {
        console.error('Failed to resolve alert:', error);
        this.showNotification('Failed to resolve alert', 'error');
      }
    }

    async editRule(ruleId) {
      // Implementation for editing rule
      console.log('Editing rule:', ruleId);
    }

    async deleteRule(ruleId) {
      if (confirm('Are you sure you want to delete this security rule?')) {
        try {
          const response = await fetch(`/api/security/rules/${ruleId}`, {
            method: 'DELETE'
          });

          if (response.ok) {
            await this.loadSecurityRules();
            this.showNotification('Security rule deleted', 'success');
          } else {
            this.showNotification('Failed to delete security rule', 'error');
          }
        } catch (error) {
          console.error('Failed to delete security rule:', error);
          this.showNotification('Failed to delete security rule', 'error');
        }
      }
    }

    startAutoRefresh() {
      // Refresh data every 30 seconds
      this.refreshInterval = setInterval(() => {
        this.loadDashboardData();
      }, 30000);
    }

    stopAutoRefresh() {
      if (this.refreshInterval) {
        clearInterval(this.refreshInterval);
        this.refreshInterval = null;
      }
    }

    showNotification(message, type) {
      // Implementation for showing notifications
      console.log(`${type.toUpperCase()}: ${message}`);
    }
  }
</script>


