---
// Enhanced Advanced NFT Tools Component
// IPFS integration and bulk operations
---

<div class="enhanced-advanced-nft-tools" data-testid="enhanced-advanced-nft-tools">
  <!-- Tools Header -->
  <div class="tools-header">
    <h1>Advanced NFT Tools</h1>
    <p class="header-subtitle">Professional-grade tools for NFT creation, management, and optimization</p>
  </div>

  <!-- Tools Navigation -->
  <div class="tools-nav" data-testid="tools-nav">
    <div class="nav-tabs">
      <button class="nav-tab active" data-testid="nav-bulk-mint" data-tool="bulk-mint">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
        Bulk Mint
      </button>
      <button class="nav-tab" data-testid="nav-ipfs-upload" data-tool="ipfs-upload">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
          <polyline points="7,10 12,15 17,10"/>
          <line x1="12" y1="15" x2="12" y2="3"/>
        </svg>
        IPFS Upload
      </button>
      <button class="nav-tab" data-testid="nav-metadata-generator" data-tool="metadata-generator">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
          <polyline points="14,2 14,8 20,8"/>
          <line x1="16" y1="13" x2="8" y2="13"/>
          <line x1="16" y1="17" x2="8" y2="17"/>
          <polyline points="10,9 9,9 8,9"/>
        </svg>
        Metadata Generator
      </button>
      <button class="nav-tab" data-testid="nav-batch-operations" data-tool="batch-operations">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="3" y="3" width="7" height="7"/>
          <rect x="14" y="3" width="7" height="7"/>
          <rect x="14" y="14" width="7" height="7"/>
          <rect x="3" y="14" width="7" height="7"/>
        </svg>
        Batch Operations
      </button>
      <button class="nav-tab" data-testid="nav-analytics" data-tool="analytics">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M18 20V10"/>
          <path d="M12 20V4"/>
          <path d="M6 20v-6"/>
        </svg>
        Analytics
      </button>
    </div>
  </div>

  <!-- Tools Content -->
  <div class="tools-content">
    <!-- Bulk Mint Tool -->
    <div class="tool-content active" data-testid="bulk-mint-content" data-tool="bulk-mint">
      <div class="tool-header">
        <h2>Bulk NFT Minting</h2>
        <p>Create multiple NFTs efficiently with batch processing and automated metadata generation</p>
      </div>

      <div class="tool-body">
        <div class="upload-section">
          <div class="upload-area" data-testid="bulk-upload-area">
            <div class="upload-icon">
              <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                <polyline points="7,10 12,15 17,10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </div>
            <h3>Upload Images</h3>
            <p>Drag and drop multiple images or click to browse</p>
            <input type="file" multiple accept="image/*" data-testid="bulk-upload-input" style="display: none;">
            <button class="btn btn-primary upload-btn" data-testid="bulk-upload-btn">Choose Files</button>
          </div>
        </div>

        <div class="mint-settings">
          <h3>Mint Settings</h3>
          <div class="settings-grid">
            <div class="setting-group">
              <label for="collection-name">Collection Name *</label>
              <input type="text" id="collection-name" data-testid="collection-name" placeholder="My NFT Collection">
            </div>
            <div class="setting-group">
              <label for="collection-symbol">Collection Symbol *</label>
              <input type="text" id="collection-symbol" data-testid="collection-symbol" placeholder="MNC" maxlength="10">
            </div>
            <div class="setting-group">
              <label for="mint-price">Mint Price (SOL)</label>
              <input type="number" id="mint-price" data-testid="mint-price" placeholder="0.1" step="0.001" min="0">
            </div>
            <div class="setting-group">
              <label for="max-supply">Max Supply</label>
              <input type="number" id="max-supply" data-testid="max-supply" placeholder="1000" min="1">
            </div>
          </div>
        </div>

        <div class="metadata-settings">
          <h3>Metadata Settings</h3>
          <div class="metadata-options">
            <label class="option-checkbox">
              <input type="checkbox" data-testid="auto-generate-metadata">
              <span class="checkmark"></span>
              Auto-generate metadata from image analysis
            </label>
            <label class="option-checkbox">
              <input type="checkbox" data-testid="include-attributes">
              <span class="checkmark"></span>
              Include AI-generated attributes
            </label>
            <label class="option-checkbox">
              <input type="checkbox" data-testid="upload-to-ipfs">
              <span class="checkmark"></span>
              Upload images and metadata to IPFS
            </label>
          </div>
        </div>

        <div class="mint-actions">
          <button class="btn btn-secondary preview-btn" data-testid="preview-mint">Preview</button>
          <button class="btn btn-primary mint-btn" data-testid="start-mint">
            <span class="btn-text">Start Bulk Minting</span>
            <div class="btn-loading" data-testid="mint-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </button>
        </div>
      </div>
    </div>

    <!-- IPFS Upload Tool -->
    <div class="tool-content" data-testid="ipfs-upload-content" data-tool="ipfs-upload">
      <div class="tool-header">
        <h2>IPFS Upload Manager</h2>
        <p>Upload and manage your files on IPFS with advanced pinning and redundancy options</p>
      </div>

      <div class="tool-body">
        <div class="ipfs-upload-area">
          <div class="upload-zone" data-testid="ipfs-upload-zone">
            <div class="upload-icon">
              <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                <polyline points="7,10 12,15 17,10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </div>
            <h3>Upload to IPFS</h3>
            <p>Drag and drop files or click to browse</p>
            <input type="file" multiple data-testid="ipfs-upload-input" style="display: none;">
            <button class="btn btn-primary upload-btn" data-testid="ipfs-upload-btn">Choose Files</button>
          </div>
        </div>

        <div class="ipfs-settings">
          <h3>IPFS Settings</h3>
          <div class="settings-grid">
            <div class="setting-group">
              <label for="pin-service">Pin Service</label>
              <select id="pin-service" data-testid="pin-service">
                <option value="pinata">Pinata</option>
                <option value="infura">Infura</option>
                <option value="local">Local Node</option>
              </select>
            </div>
            <div class="setting-group">
              <label for="redundancy">Redundancy Level</label>
              <select id="redundancy" data-testid="redundancy">
                <option value="standard">Standard (3 copies)</option>
                <option value="high">High (5 copies)</option>
                <option value="maximum">Maximum (10 copies)</option>
              </select>
            </div>
            <div class="setting-group">
              <label for="encryption">Encryption</label>
              <select id="encryption" data-testid="encryption">
                <option value="none">None</option>
                <option value="aes256">AES-256</option>
                <option value="gpg">GPG</option>
              </select>
            </div>
          </div>
        </div>

        <div class="upload-queue" data-testid="upload-queue">
          <h3>Upload Queue</h3>
          <div class="queue-list">
            <!-- Upload queue items will be populated here -->
          </div>
        </div>
      </div>
    </div>

    <!-- Metadata Generator Tool -->
    <div class="tool-content" data-testid="metadata-generator-content" data-tool="metadata-generator">
      <div class="tool-header">
        <h2>Metadata Generator</h2>
        <p>Create comprehensive NFT metadata with AI-powered analysis and attribute generation</p>
      </div>

      <div class="tool-body">
        <div class="metadata-generator">
          <div class="generator-tabs">
            <button class="generator-tab active" data-testid="tab-single" data-type="single">Single NFT</button>
            <button class="generator-tab" data-testid="tab-batch" data-type="batch">Batch Generation</button>
          </div>

          <div class="generator-content">
            <div class="single-metadata" data-testid="single-metadata">
              <div class="image-upload">
                <div class="upload-area" data-testid="metadata-upload-area">
                  <img src="" alt="Preview" class="preview-image" data-testid="preview-image" style="display: none;">
                  <div class="upload-placeholder" data-testid="upload-placeholder">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                      <circle cx="8.5" cy="8.5" r="1.5"/>
                      <polyline points="21,15 16,10 5,21"/>
                    </svg>
                    <p>Upload NFT Image</p>
                  </div>
                  <input type="file" accept="image/*" data-testid="metadata-upload-input" style="display: none;">
                </div>
              </div>

              <div class="metadata-form">
                <div class="form-group">
                  <label for="nft-name">NFT Name *</label>
                  <input type="text" id="nft-name" data-testid="nft-name" placeholder="My Awesome NFT">
                </div>
                <div class="form-group">
                  <label for="nft-description">Description *</label>
                  <textarea id="nft-description" data-testid="nft-description" rows="4" placeholder="Describe your NFT..."></textarea>
                </div>
                <div class="form-group">
                  <label for="nft-external-url">External URL</label>
                  <input type="url" id="nft-external-url" data-testid="nft-external-url" placeholder="https://example.com">
                </div>
                <div class="form-group">
                  <label for="nft-attributes">Attributes</label>
                  <div class="attributes-container" data-testid="attributes-container">
                    <!-- Attributes will be populated here -->
                  </div>
                  <button class="btn btn-outline add-attribute" data-testid="add-attribute">Add Attribute</button>
                </div>
              </div>
            </div>

            <div class="batch-metadata" data-testid="batch-metadata" style="display: none;">
              <div class="batch-upload">
                <div class="upload-area" data-testid="batch-upload-area">
                  <div class="upload-icon">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                      <polyline points="7,10 12,15 17,10"/>
                      <line x1="12" y1="15" x2="12" y2="3"/>
                    </svg>
                  </div>
                  <h3>Upload Multiple Images</h3>
                  <p>Upload images for batch metadata generation</p>
                  <input type="file" multiple accept="image/*" data-testid="batch-upload-input" style="display: none;">
                  <button class="btn btn-primary upload-btn" data-testid="batch-upload-btn">Choose Files</button>
                </div>
              </div>
            </div>
          </div>

          <div class="generator-actions">
            <button class="btn btn-secondary analyze-btn" data-testid="analyze-image">Analyze Image</button>
            <button class="btn btn-primary generate-btn" data-testid="generate-metadata">
              <span class="btn-text">Generate Metadata</span>
              <div class="btn-loading" data-testid="generate-loading" style="display: none;">
                <div class="spinner"></div>
              </div>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Batch Operations Tool -->
    <div class="tool-content" data-testid="batch-operations-content" data-tool="batch-operations">
      <div class="tool-header">
        <h2>Batch Operations</h2>
        <p>Perform bulk operations on your NFT collection with advanced filtering and automation</p>
      </div>

      <div class="tool-body">
        <div class="batch-operations">
          <div class="operation-selector">
            <h3>Select Operation</h3>
            <div class="operation-options">
              <label class="operation-option">
                <input type="radio" name="operation" value="transfer" data-testid="op-transfer">
                <span class="operation-icon">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
                    <polyline points="16,6 12,2 8,6"/>
                    <line x1="12" y1="2" x2="12" y2="15"/>
                  </svg>
                </span>
                <span class="operation-text">Transfer NFTs</span>
              </label>
              <label class="operation-option">
                <input type="radio" name="operation" value="update-price" data-testid="op-update-price">
                <span class="operation-icon">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="12" y1="1" x2="12" y2="23"/>
                    <path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/>
                  </svg>
                </span>
                <span class="operation-text">Update Prices</span>
              </label>
              <label class="operation-option">
                <input type="radio" name="operation" value="update-metadata" data-testid="op-update-metadata">
                <span class="operation-icon">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                    <polyline points="14,2 14,8 20,8"/>
                    <line x1="16" y1="13" x2="8" y2="13"/>
                    <line x1="16" y1="17" x2="8" y2="17"/>
                    <polyline points="10,9 9,9 8,9"/>
                  </svg>
                </span>
                <span class="operation-text">Update Metadata</span>
              </label>
              <label class="operation-option">
                <input type="radio" name="operation" value="burn" data-testid="op-burn">
                <span class="operation-icon">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/>
                    <polyline points="16,17 21,12 16,7"/>
                    <line x1="21" y1="12" x2="9" y2="12"/>
                  </svg>
                </span>
                <span class="operation-text">Burn NFTs</span>
              </label>
            </div>
          </div>

          <div class="nft-selector">
            <h3>Select NFTs</h3>
            <div class="selection-methods">
              <div class="method-tabs">
                <button class="method-tab active" data-testid="tab-collection" data-method="collection">By Collection</button>
                <button class="method-tab" data-testid="tab-individual" data-method="individual">Individual Selection</button>
                <button class="method-tab" data-testid="tab-filter" data-method="filter">By Filter</button>
              </div>

              <div class="method-content">
                <div class="collection-selector" data-testid="collection-selector">
                  <select data-testid="collection-select">
                    <option value="">Select Collection</option>
                    <option value="collection1">My Collection 1</option>
                    <option value="collection2">My Collection 2</option>
                  </select>
                </div>

                <div class="individual-selector" data-testid="individual-selector" style="display: none;">
                  <div class="nft-grid">
                    <!-- NFT selection grid will be populated here -->
                  </div>
                </div>

                <div class="filter-selector" data-testid="filter-selector" style="display: none;">
                  <div class="filter-options">
                    <div class="filter-group">
                      <label>Price Range</label>
                      <input type="range" min="0" max="100" value="50" data-testid="price-range">
                    </div>
                    <div class="filter-group">
                      <label>Attributes</label>
                      <select data-testid="attribute-filter">
                        <option value="">Select Attribute</option>
                        <option value="background">Background</option>
                        <option value="eyes">Eyes</option>
                      </select>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="operation-settings">
            <h3>Operation Settings</h3>
            <div class="settings-form" data-testid="operation-settings">
              <!-- Operation-specific settings will be populated here -->
            </div>
          </div>

          <div class="batch-actions">
            <button class="btn btn-secondary preview-btn" data-testid="preview-operation">Preview</button>
            <button class="btn btn-primary execute-btn" data-testid="execute-operation">
              <span class="btn-text">Execute Operation</span>
              <div class="btn-loading" data-testid="operation-loading" style="display: none;">
                <div class="spinner"></div>
              </div>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Analytics Tool -->
    <div class="tool-content" data-testid="analytics-content" data-tool="analytics">
      <div class="tool-header">
        <h2>NFT Analytics</h2>
        <p>Comprehensive analytics and insights for your NFT collections and marketplace performance</p>
      </div>

      <div class="tool-body">
        <div class="analytics-dashboard">
          <div class="analytics-filters">
            <div class="filter-group">
              <label>Time Range</label>
              <select data-testid="time-range">
                <option value="24h">Last 24 Hours</option>
                <option value="7d">Last 7 Days</option>
                <option value="30d">Last 30 Days</option>
                <option value="90d">Last 90 Days</option>
              </select>
            </div>
            <div class="filter-group">
              <label>Collection</label>
              <select data-testid="collection-filter">
                <option value="all">All Collections</option>
                <option value="collection1">Collection 1</option>
                <option value="collection2">Collection 2</option>
              </select>
            </div>
          </div>

          <div class="analytics-metrics">
            <div class="metric-card" data-testid="metric-total-sales">
              <h4>Total Sales</h4>
              <div class="metric-value">1,234</div>
              <div class="metric-change positive">+12.5%</div>
            </div>
            <div class="metric-card" data-testid="metric-total-volume">
              <h4>Total Volume</h4>
              <div class="metric-value">2,456.78 SOL</div>
              <div class="metric-change positive">+8.3%</div>
            </div>
            <div class="metric-card" data-testid="metric-avg-price">
              <h4>Average Price</h4>
              <div class="metric-value">1.99 SOL</div>
              <div class="metric-change negative">-2.1%</div>
            </div>
            <div class="metric-card" data-testid="metric-floor-price">
              <h4>Floor Price</h4>
              <div class="metric-value">0.89 SOL</div>
              <div class="metric-change positive">+5.7%</div>
            </div>
          </div>

          <div class="analytics-charts">
            <div class="chart-container" data-testid="sales-chart">
              <h4>Sales Over Time</h4>
              <canvas id="sales-chart-canvas" width="400" height="200"></canvas>
            </div>
            <div class="chart-container" data-testid="volume-chart">
              <h4>Volume Over Time</h4>
              <canvas id="volume-chart-canvas" width="400" height="200"></canvas>
            </div>
          </div>

          <div class="analytics-tables">
            <div class="table-container" data-testid="top-sellers">
              <h4>Top Selling NFTs</h4>
              <table>
                <thead>
                  <tr>
                    <th>NFT</th>
                    <th>Sales</th>
                    <th>Volume</th>
                    <th>Avg Price</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>NFT #001</td>
                    <td>45</td>
                    <td>89.5 SOL</td>
                    <td>1.99 SOL</td>
                  </tr>
                  <tr>
                    <td>NFT #002</td>
                    <td>32</td>
                    <td>64.0 SOL</td>
                    <td>2.00 SOL</td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .enhanced-advanced-nft-tools {
    padding: var(--soladia-space-6);
    max-width: 1400px;
    margin: 0 auto;
    background: var(--soladia-bg-primary);
  }

  .tools-header {
    text-align: center;
    margin-bottom: var(--soladia-space-8);
  }

  .tools-header h1 {
    font-size: var(--soladia-text-4xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .header-subtitle {
    font-size: var(--soladia-text-xl);
    color: var(--soladia-text-secondary);
    margin: 0;
  }

  .tools-nav {
    margin-bottom: var(--soladia-space-8);
  }

  .nav-tabs {
    display: flex;
    background: var(--soladia-bg-secondary);
    border-radius: var(--soladia-radius-xl);
    padding: var(--soladia-space-1);
    overflow-x: auto;
  }

  .nav-tab {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--soladia-space-2);
    padding: var(--soladia-space-3) var(--soladia-space-4);
    background: none;
    border: none;
    border-radius: var(--soladia-radius-lg);
    color: var(--soladia-text-secondary);
    cursor: pointer;
    transition: var(--soladia-transition);
    font-weight: var(--soladia-font-semibold);
    white-space: nowrap;
  }

  .nav-tab.active {
    background: var(--soladia-primary);
    color: white;
  }

  .nav-tab:hover:not(.active) {
    color: var(--soladia-text-primary);
    background: var(--soladia-bg-primary);
  }

  .tools-content {
    position: relative;
  }

  .tool-content {
    display: none;
  }

  .tool-content.active {
    display: block;
  }

  .tool-header {
    margin-bottom: var(--soladia-space-8);
  }

  .tool-header h2 {
    font-size: var(--soladia-text-2xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-2) 0;
  }

  .tool-header p {
    color: var(--soladia-text-secondary);
    margin: 0;
  }

  .tool-body {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-xl);
    padding: var(--soladia-space-8);
    box-shadow: var(--soladia-shadow-lg);
  }

  .upload-area {
    border: 2px dashed var(--soladia-border);
    border-radius: var(--soladia-radius-xl);
    padding: var(--soladia-space-12);
    text-align: center;
    transition: var(--soladia-transition);
    cursor: pointer;
  }

  .upload-area:hover {
    border-color: var(--soladia-primary);
    background: var(--soladia-primary-50);
  }

  .upload-area.dragover {
    border-color: var(--soladia-primary);
    background: var(--soladia-primary-50);
  }

  .upload-icon {
    color: var(--soladia-text-tertiary);
    margin-bottom: var(--soladia-space-4);
  }

  .upload-area h3 {
    font-size: var(--soladia-text-xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-2) 0;
  }

  .upload-area p {
    color: var(--soladia-text-secondary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .upload-btn {
    padding: var(--soladia-space-3) var(--soladia-space-6);
  }

  .mint-settings,
  .ipfs-settings,
  .metadata-settings {
    margin: var(--soladia-space-8) 0;
  }

  .mint-settings h3,
  .ipfs-settings h3,
  .metadata-settings h3 {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .settings-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: var(--soladia-space-4);
  }

  .setting-group {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-2);
  }

  .setting-group label {
    font-size: var(--soladia-text-sm);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
  }

  .setting-group input,
  .setting-group select {
    padding: var(--soladia-space-3) var(--soladia-space-4);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    background: var(--soladia-bg-primary);
    color: var(--soladia-text-primary);
    font-family: var(--soladia-font-primary);
  }

  .setting-group input:focus,
  .setting-group select:focus {
    outline: none;
    border-color: var(--soladia-primary);
    box-shadow: 0 0 0 3px rgba(230, 0, 18, 0.1);
  }

  .metadata-options {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-3);
  }

  .option-checkbox {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-3);
    cursor: pointer;
  }

  .option-checkbox input[type="checkbox"] {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .checkmark {
    width: 20px;
    height: 20px;
    border: 2px solid var(--soladia-border);
    border-radius: var(--soladia-radius);
    background: var(--soladia-bg-primary);
    position: relative;
    transition: var(--soladia-transition);
  }

  .option-checkbox input[type="checkbox"]:checked + .checkmark {
    background: var(--soladia-primary);
    border-color: var(--soladia-primary);
  }

  .option-checkbox input[type="checkbox"]:checked + .checkmark::after {
    content: '';
    position: absolute;
    left: 6px;
    top: 2px;
    width: 6px;
    height: 10px;
    border: solid white;
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
  }

  .mint-actions,
  .generator-actions,
  .batch-actions {
    display: flex;
    gap: var(--soladia-space-4);
    justify-content: flex-end;
    margin-top: var(--soladia-space-8);
  }

  .generator-tabs {
    display: flex;
    background: var(--soladia-bg-secondary);
    border-radius: var(--soladia-radius-lg);
    padding: var(--soladia-space-1);
    margin-bottom: var(--soladia-space-6);
  }

  .generator-tab {
    flex: 1;
    padding: var(--soladia-space-3) var(--soladia-space-4);
    background: none;
    border: none;
    border-radius: var(--soladia-radius);
    color: var(--soladia-text-secondary);
    cursor: pointer;
    transition: var(--soladia-transition);
    font-weight: var(--soladia-font-semibold);
  }

  .generator-tab.active {
    background: var(--soladia-primary);
    color: white;
  }

  .generator-tab:hover:not(.active) {
    color: var(--soladia-text-primary);
    background: var(--soladia-bg-primary);
  }

  .generator-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--soladia-space-8);
  }

  .single-metadata,
  .batch-metadata {
    display: contents;
  }

  .image-upload {
    margin-bottom: var(--soladia-space-6);
  }

  .preview-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: var(--soladia-radius-lg);
  }

  .upload-placeholder {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 200px;
    border: 2px dashed var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    color: var(--soladia-text-tertiary);
  }

  .metadata-form {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-4);
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-2);
  }

  .form-group label {
    font-size: var(--soladia-text-sm);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
  }

  .form-group input,
  .form-group textarea {
    padding: var(--soladia-space-3) var(--soladia-space-4);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    background: var(--soladia-bg-primary);
    color: var(--soladia-text-primary);
    font-family: var(--soladia-font-primary);
  }

  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--soladia-primary);
    box-shadow: 0 0 0 3px rgba(230, 0, 18, 0.1);
  }

  .attributes-container {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-3);
  }

  .attribute-item {
    display: flex;
    gap: var(--soladia-space-3);
    align-items: center;
  }

  .attribute-item input {
    flex: 1;
  }

  .remove-attribute {
    background: var(--soladia-error);
    color: white;
    border: none;
    border-radius: 50%;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }

  .operation-selector {
    margin-bottom: var(--soladia-space-8);
  }

  .operation-selector h3 {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .operation-options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--soladia-space-4);
  }

  .operation-option {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-3);
    padding: var(--soladia-space-4);
    border: 2px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    cursor: pointer;
    transition: var(--soladia-transition);
  }

  .operation-option:hover {
    border-color: var(--soladia-primary);
  }

  .operation-option input[type="radio"] {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .operation-option input[type="radio"]:checked + .operation-icon {
    color: var(--soladia-primary);
  }

  .operation-option input[type="radio"]:checked ~ .operation-text {
    color: var(--soladia-primary);
    font-weight: var(--soladia-font-semibold);
  }

  .operation-icon {
    color: var(--soladia-text-secondary);
    transition: var(--soladia-transition);
  }

  .operation-text {
    color: var(--soladia-text-primary);
    transition: var(--soladia-transition);
  }

  .nft-selector {
    margin-bottom: var(--soladia-space-8);
  }

  .nft-selector h3 {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .method-tabs {
    display: flex;
    background: var(--soladia-bg-secondary);
    border-radius: var(--soladia-radius-lg);
    padding: var(--soladia-space-1);
    margin-bottom: var(--soladia-space-4);
  }

  .method-tab {
    flex: 1;
    padding: var(--soladia-space-2) var(--soladia-space-4);
    background: none;
    border: none;
    border-radius: var(--soladia-radius);
    color: var(--soladia-text-secondary);
    cursor: pointer;
    transition: var(--soladia-transition);
    font-weight: var(--soladia-font-semibold);
  }

  .method-tab.active {
    background: var(--soladia-primary);
    color: white;
  }

  .method-tab:hover:not(.active) {
    color: var(--soladia-text-primary);
    background: var(--soladia-bg-primary);
  }

  .method-content {
    min-height: 200px;
  }

  .collection-selector select,
  .filter-selector select {
    width: 100%;
    padding: var(--soladia-space-3) var(--soladia-space-4);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    background: var(--soladia-bg-primary);
    color: var(--soladia-text-primary);
  }

  .nft-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: var(--soladia-space-4);
  }

  .nft-item {
    border: 2px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    padding: var(--soladia-space-2);
    cursor: pointer;
    transition: var(--soladia-transition);
  }

  .nft-item:hover {
    border-color: var(--soladia-primary);
  }

  .nft-item.selected {
    border-color: var(--soladia-primary);
    background: var(--soladia-primary-50);
  }

  .nft-item img {
    width: 100%;
    height: 100px;
    object-fit: cover;
    border-radius: var(--soladia-radius);
  }

  .analytics-dashboard {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-8);
  }

  .analytics-filters {
    display: flex;
    gap: var(--soladia-space-4);
    flex-wrap: wrap;
  }

  .analytics-metrics {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--soladia-space-4);
  }

  .metric-card {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    padding: var(--soladia-space-4);
    text-align: center;
  }

  .metric-card h4 {
    font-size: var(--soladia-text-sm);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-secondary);
    margin: 0 0 var(--soladia-space-2) 0;
  }

  .metric-value {
    font-size: var(--soladia-text-2xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-1) 0;
  }

  .metric-change {
    font-size: var(--soladia-text-sm);
    font-weight: var(--soladia-font-semibold);
  }

  .metric-change.positive {
    color: var(--soladia-success);
  }

  .metric-change.negative {
    color: var(--soladia-error);
  }

  .analytics-charts {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: var(--soladia-space-6);
  }

  .chart-container {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    padding: var(--soladia-space-4);
  }

  .chart-container h4 {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .chart-container canvas {
    width: 100%;
    height: 200px;
  }

  .analytics-tables {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: var(--soladia-space-6);
  }

  .table-container {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    padding: var(--soladia-space-4);
  }

  .table-container h4 {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .table-container table {
    width: 100%;
    border-collapse: collapse;
  }

  .table-container th,
  .table-container td {
    padding: var(--soladia-space-2);
    text-align: left;
    border-bottom: 1px solid var(--soladia-border);
  }

  .table-container th {
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
  }

  .table-container td {
    color: var(--soladia-text-secondary);
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--soladia-space-2);
    padding: var(--soladia-space-3) var(--soladia-space-6);
    border-radius: var(--soladia-radius-lg);
    font-weight: var(--soladia-font-semibold);
    text-decoration: none;
    transition: var(--soladia-transition);
    cursor: pointer;
    border: none;
    font-size: var(--soladia-text-base);
    line-height: 1;
  }

  .btn:focus {
    outline: 2px solid var(--soladia-primary);
    outline-offset: 2px;
  }

  .btn-primary {
    background: var(--soladia-gradient-primary);
    color: white;
    box-shadow: var(--soladia-shadow-primary);
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: var(--soladia-shadow-primary-hover);
  }

  .btn-secondary {
    background: var(--soladia-bg-primary);
    color: var(--soladia-primary);
    border: 2px solid var(--soladia-primary);
  }

  .btn-secondary:hover {
    background: var(--soladia-primary);
    color: white;
    transform: translateY(-2px);
  }

  .btn-outline {
    background: transparent;
    color: var(--soladia-text-primary);
    border: 2px solid var(--soladia-border);
  }

  .btn-outline:hover {
    background: var(--soladia-bg-secondary);
    border-color: var(--soladia-text-primary);
  }

  .btn-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .spinner {
    width: 20px;
    height: 20px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Dark mode styles */
  [data-theme="dark"] .enhanced-advanced-nft-tools {
    background: var(--soladia-bg-primary);
  }

  [data-theme="dark"] .tool-body,
  [data-theme="dark"] .metric-card,
  [data-theme="dark"] .chart-container,
  [data-theme="dark"] .table-container {
    background: var(--soladia-bg-primary);
    border-color: var(--soladia-border);
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .enhanced-advanced-nft-tools {
      padding: var(--soladia-space-4);
    }

    .nav-tabs {
      flex-direction: column;
    }

    .generator-content {
      grid-template-columns: 1fr;
    }

    .analytics-charts {
      grid-template-columns: 1fr;
    }

    .analytics-tables {
      grid-template-columns: 1fr;
    }

    .operation-options {
      grid-template-columns: 1fr;
    }

    .mint-actions,
    .generator-actions,
    .batch-actions {
      flex-direction: column;
    }
  }
</style>

<script>
  import { enhancedNFTToolsService } from '../../services/enhanced-nft-tools-service';

  class EnhancedAdvancedNFTTools {
    private nftToolsService: any;
    private currentTool: string;
    private uploadedFiles: File[];
    private selectedNFTs: string[];

    constructor() {
      this.nftToolsService = enhancedNFTToolsService;
      this.currentTool = 'bulk-mint';
      this.uploadedFiles = [];
      this.selectedNFTs = [];
      
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.initializeCharts();
    }

    setupEventListeners() {
      // Tool navigation
      document.querySelectorAll('[data-tool]').forEach(tab => {
        tab.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          if (target) {
            this.switchTool(target.dataset.tool || '');
          }
        });
      });

      // Bulk mint tool
      document.querySelector('[data-testid="bulk-upload-btn"]')?.addEventListener('click', () => {
        const input = document.querySelector('[data-testid="bulk-upload-input"]') as HTMLInputElement;
        input?.click();
      });

      document.querySelector('[data-testid="bulk-upload-input"]')?.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        if (target.files) {
          this.handleBulkUpload(target.files);
        }
      });

      document.querySelector('[data-testid="start-mint"]')?.addEventListener('click', () => {
        this.startBulkMinting();
      });

      // IPFS upload tool
      document.querySelector('[data-testid="ipfs-upload-btn"]')?.addEventListener('click', () => {
        const input = document.querySelector('[data-testid="ipfs-upload-input"]') as HTMLInputElement;
        input?.click();
      });

      document.querySelector('[data-testid="ipfs-upload-input"]')?.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        if (target.files) {
          this.handleIPFSUpload(target.files);
        }
      });

      // Metadata generator tool
      document.querySelectorAll('[data-testid^="tab-"]').forEach(tab => {
        tab.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          this.switchGeneratorTab(target.dataset.type || '');
        });
      });

      document.querySelector('[data-testid="metadata-upload-input"]')?.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        if (target.files && target.files[0]) {
          this.handleMetadataUpload(target.files[0]);
        }
      });

      document.querySelector('[data-testid="add-attribute"]')?.addEventListener('click', () => {
        this.addAttribute();
      });

      document.querySelector('[data-testid="generate-metadata"]')?.addEventListener('click', () => {
        this.generateMetadata();
      });

      // Batch operations tool
      document.querySelectorAll('[data-testid^="op-"]').forEach(option => {
        option.addEventListener('change', () => {
          const element = option as HTMLInputElement;
          this.updateOperationSettings(element.value);
        });
      });

      document.querySelectorAll('[data-testid^="tab-"]').forEach(tab => {
        tab.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          this.switchMethodTab(target.dataset.method || '');
        });
      });

      document.querySelector('[data-testid="execute-operation"]')?.addEventListener('click', () => {
        this.executeOperation();
      });

      // Analytics tool
      document.querySelector('[data-testid="time-range"]')?.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        this.updateAnalytics(target.value);
      });

      document.querySelector('[data-testid="collection-filter"]')?.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        this.updateAnalytics(target.value);
      });
    }

    switchTool(toolName: string) {
      this.currentTool = toolName;

      // Update tab states
      document.querySelectorAll('[data-tool]').forEach(tab => {
        const element = tab as HTMLElement;
        element.classList.toggle('active', element.dataset.tool === toolName);
      });

      // Update content
      document.querySelectorAll('[data-tool]').forEach(content => {
        const element = content as HTMLElement;
        element.classList.toggle('active', element.dataset.tool === toolName);
      });
    }

    async handleBulkUpload(files: FileList) {
      this.uploadedFiles = Array.from(files);
      this.showUploadPreview();
    }

    showUploadPreview() {
      const container = document.querySelector('[data-testid="bulk-upload-area"]');
      if (!container) return;

      container.innerHTML = `
        <div class="upload-preview">
          <h3>${this.uploadedFiles.length} files selected</h3>
          <div class="file-list">
            ${this.uploadedFiles.map(file => `
              <div class="file-item">
                <span>${file.name}</span>
                <span>${(file.size / 1024 / 1024).toFixed(2)} MB</span>
              </div>
            `).join('')}
          </div>
          <button class="btn btn-secondary" onclick="this.resetUpload()">Change Files</button>
        </div>
      `;
    }

    async startBulkMinting() {
      try {
        this.showLoading('mint-loading');
        
        const settings = this.getMintSettings();
        const result = await this.nftToolsService.bulkMint(this.uploadedFiles, settings);
        
        this.showSuccess(`Successfully minted ${result.count} NFTs!`);
        this.resetBulkMint();

      } catch (error) {
        console.error('Error during bulk minting:', error);
        this.showError('Bulk minting failed. Please try again.');
      } finally {
        this.hideLoading('mint-loading');
      }
    }

    getMintSettings() {
      const collectionNameInput = document.querySelector('[data-testid="collection-name"]') as HTMLInputElement;
      const collectionSymbolInput = document.querySelector('[data-testid="collection-symbol"]') as HTMLInputElement;
      const mintPriceInput = document.querySelector('[data-testid="mint-price"]') as HTMLInputElement;
      const maxSupplyInput = document.querySelector('[data-testid="max-supply"]') as HTMLInputElement;
      const autoGenerateMetadataInput = document.querySelector('[data-testid="auto-generate-metadata"]') as HTMLInputElement;
      const includeAttributesInput = document.querySelector('[data-testid="include-attributes"]') as HTMLInputElement;
      const uploadToIPFSInput = document.querySelector('[data-testid="upload-to-ipfs"]') as HTMLInputElement;

      return {
        collectionName: collectionNameInput?.value || '',
        collectionSymbol: collectionSymbolInput?.value || '',
        mintPrice: parseFloat(mintPriceInput?.value || '0'),
        maxSupply: parseInt(maxSupplyInput?.value || '1000'),
        autoGenerateMetadata: autoGenerateMetadataInput?.checked || false,
        includeAttributes: includeAttributesInput?.checked || false,
        uploadToIPFS: uploadToIPFSInput?.checked || false
      };
    }

    async handleIPFSUpload(files: FileList) {
      try {
        this.showLoading('');
        
        const settings = this.getIPFSSettings();
        const result = await this.nftToolsService.uploadToIPFS(Array.from(files), settings);
        
        this.showIPFSUploadQueue(result);
        this.showSuccess(`Successfully uploaded ${result.length} files to IPFS!`);

      } catch (error) {
        console.error('Error uploading to IPFS:', error);
        this.showError('IPFS upload failed. Please try again.');
      } finally {
        this.hideLoading('');
      }
    }

    getIPFSSettings() {
      const pinService = document.querySelector('[data-testid="pin-service"]') as HTMLSelectElement;
      const redundancy = document.querySelector('[data-testid="redundancy"]') as HTMLSelectElement;
      const encryption = document.querySelector('[data-testid="encryption"]') as HTMLSelectElement;
      
      return {
        pinService: pinService?.value || 'pinata',
        redundancy: redundancy?.value || 'standard',
        encryption: encryption?.value || 'none'
      };
    }

    showIPFSUploadQueue(uploads: any[]) {
      const container = document.querySelector('[data-testid="upload-queue"] .queue-list');
      if (!container) return;

      container.innerHTML = uploads.map(upload => `
        <div class="queue-item">
          <span class="file-name">${upload.name}</span>
          <span class="file-hash">${upload.hash}</span>
          <span class="file-status">${upload.status}</span>
        </div>
      `).join('');
    }

    switchGeneratorTab(type: string) {
      // Update tab states
      document.querySelectorAll('[data-testid^="tab-"]').forEach(tab => {
        const element = tab as HTMLElement;
        element.classList.toggle('active', element.dataset.type === type);
      });

      // Update content
      document.querySelectorAll('[data-testid^="single-metadata"], [data-testid^="batch-metadata"]').forEach(content => {
        const element = content as HTMLElement;
        element.style.display = element.dataset.testid?.includes(type) ? 'contents' : 'none';
      });
    }

    async handleMetadataUpload(file: File) {
      if (!file) return;

      const preview = document.querySelector('[data-testid="preview-image"]') as HTMLImageElement;
      const placeholder = document.querySelector('[data-testid="upload-placeholder"]') as HTMLElement;
      
      if (preview && placeholder) {
        const reader = new FileReader();
        reader.onload = (e) => {
          const target = e.target as FileReader;
          if (target.result) {
            preview.src = target.result as string;
            preview.style.display = 'block';
            placeholder.style.display = 'none';
          }
        };
        reader.readAsDataURL(file);
      }
    }

    addAttribute() {
      const container = document.querySelector('[data-testid="attributes-container"]');
      if (!container) return;

      const attributeDiv = document.createElement('div');
      attributeDiv.className = 'attribute-item';
      attributeDiv.innerHTML = `
        <input type="text" placeholder="Trait" class="trait-input">
        <input type="text" placeholder="Value" class="value-input">
        <button type="button" class="remove-attribute">×</button>
      `;
      
      container.appendChild(attributeDiv);
      
      // Add remove functionality
      const removeButton = attributeDiv.querySelector('.remove-attribute') as HTMLButtonElement;
      if (removeButton) {
        removeButton.addEventListener('click', () => {
          attributeDiv.remove();
        });
      }
    }

    async generateMetadata() {
      try {
        this.showLoading('generate-loading');
        
        const metadata = this.getMetadataFormData();
        const result = await this.nftToolsService.generateMetadata(metadata);
        
        this.showSuccess('Metadata generated successfully!');
        this.downloadMetadata(result);

      } catch (error) {
        console.error('Error generating metadata:', error);
        this.showError('Metadata generation failed. Please try again.');
      } finally {
        this.hideLoading('generate-loading');
      }
    }

    getMetadataFormData() {
      const attributes: Array<{ trait: string; value: string }> = [];
      document.querySelectorAll('.attribute-item').forEach(item => {
        const traitInput = item.querySelector('.trait-input') as HTMLInputElement;
        const valueInput = item.querySelector('.value-input') as HTMLInputElement;
        const trait = traitInput?.value;
        const value = valueInput?.value;
        if (trait && value) {
          attributes.push({ trait, value });
        }
      });

      const nameInput = document.querySelector('[data-testid="nft-name"]') as HTMLInputElement;
      const descriptionInput = document.querySelector('[data-testid="nft-description"]') as HTMLTextAreaElement;
      const externalUrlInput = document.querySelector('[data-testid="nft-external-url"]') as HTMLInputElement;

      return {
        name: nameInput?.value || '',
        description: descriptionInput?.value || '',
        externalUrl: externalUrlInput?.value || '',
        attributes
      };
    }

    downloadMetadata(metadata: any) {
      const blob = new Blob([JSON.stringify(metadata, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'metadata.json';
      a.click();
      URL.revokeObjectURL(url);
    }

    updateOperationSettings(operation: string) {
      const container = document.querySelector('[data-testid="operation-settings"]');
      if (!container) return;

      let settingsHTML = '';
      
      switch (operation) {
        case 'transfer':
          settingsHTML = `
            <div class="setting-group">
              <label>Recipient Address</label>
              <input type="text" placeholder="Enter recipient address" data-testid="recipient-address">
            </div>
          `;
          break;
        case 'update-price':
          settingsHTML = `
            <div class="setting-group">
              <label>New Price (SOL)</label>
              <input type="number" placeholder="0.0" step="0.001" data-testid="new-price">
            </div>
          `;
          break;
        case 'update-metadata':
          settingsHTML = `
            <div class="setting-group">
              <label>Metadata URI</label>
              <input type="url" placeholder="https://example.com/metadata.json" data-testid="metadata-uri">
            </div>
          `;
          break;
        case 'burn':
          settingsHTML = `
            <div class="setting-group">
              <label>Confirmation</label>
              <input type="checkbox" data-testid="confirm-burn"> I understand this action cannot be undone
            </div>
          `;
          break;
      }

      container.innerHTML = settingsHTML;
    }

    switchMethodTab(method: string) {
      // Update tab states
      document.querySelectorAll('[data-testid^="tab-"]').forEach(tab => {
        const element = tab as HTMLElement;
        element.classList.toggle('active', element.dataset.method === method);
      });

      // Update content
      document.querySelectorAll('[data-testid$="-selector"]').forEach(content => {
        const element = content as HTMLElement;
        element.style.display = element.dataset.testid?.includes(method) ? 'block' : 'none';
      });
    }

    async executeOperation() {
      try {
        this.showLoading('operation-loading');
        
        const operationInput = document.querySelector('input[name="operation"]:checked') as HTMLInputElement;
        const operation = operationInput?.value || '';
        const settings = this.getOperationSettings(operation);
        
        const result = await this.nftToolsService.executeBatchOperation(operation, this.selectedNFTs, settings);
        
        this.showSuccess(`Operation completed successfully! ${result.affected} NFTs processed.`);

      } catch (error) {
        console.error('Error executing operation:', error);
        this.showError('Operation failed. Please try again.');
      } finally {
        this.hideLoading('operation-loading');
      }
    }

    getOperationSettings(operation: string) {
      const settings: any = {};
      
      switch (operation) {
        case 'transfer':
          const recipientInput = document.querySelector('[data-testid="recipient-address"]') as HTMLInputElement;
          settings.recipient = recipientInput?.value;
          break;
        case 'update-price':
          const priceInput = document.querySelector('[data-testid="new-price"]') as HTMLInputElement;
          settings.price = parseFloat(priceInput?.value || '0');
          break;
        case 'update-metadata':
          const metadataInput = document.querySelector('[data-testid="metadata-uri"]') as HTMLInputElement;
          settings.metadataUri = metadataInput?.value;
          break;
        case 'burn':
          const confirmInput = document.querySelector('[data-testid="confirm-burn"]') as HTMLInputElement;
          settings.confirmed = confirmInput?.checked;
          break;
      }
      
      return settings;
    }

    async updateAnalytics(timeRange: string) {
      try {
        const analytics = await this.nftToolsService.getAnalytics({ timeRange });
        this.updateAnalyticsDisplay(analytics);
      } catch (error) {
        console.error('Error updating analytics:', error);
      }
    }

    updateAnalyticsDisplay(analytics: any) {
      // Update metrics
      const totalSalesElement = document.querySelector('[data-testid="metric-total-sales"] .metric-value') as HTMLElement;
      const totalVolumeElement = document.querySelector('[data-testid="metric-total-volume"] .metric-value') as HTMLElement;
      const avgPriceElement = document.querySelector('[data-testid="metric-avg-price"] .metric-value') as HTMLElement;
      const floorPriceElement = document.querySelector('[data-testid="metric-floor-price"] .metric-value') as HTMLElement;

      if (totalSalesElement) totalSalesElement.textContent = analytics.totalSales.toString();
      if (totalVolumeElement) totalVolumeElement.textContent = `${analytics.totalVolume} SOL`;
      if (avgPriceElement) avgPriceElement.textContent = `${analytics.avgPrice} SOL`;
      if (floorPriceElement) floorPriceElement.textContent = `${analytics.floorPrice} SOL`;

      // Update charts
      this.updateChart('sales-chart-canvas', analytics.salesChart);
      this.updateChart('volume-chart-canvas', analytics.volumeChart);
    }

    updateChart(canvasId: string, data: number[]) {
      const canvas = document.getElementById(canvasId) as HTMLCanvasElement;
      if (!canvas) return;

      const ctx = canvas.getContext('2d');
      if (!ctx) return;
      
      // Clear previous chart
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Draw new chart (simplified example)
      ctx.beginPath();
      ctx.moveTo(0, canvas.height);
      
      data.forEach((point, index) => {
        const x = (index / (data.length - 1)) * canvas.width;
        const y = canvas.height - (point / Math.max(...data)) * canvas.height;
        ctx.lineTo(x, y);
      });
      
      ctx.strokeStyle = '#E60012';
      ctx.lineWidth = 2;
      ctx.stroke();
    }

    initializeCharts() {
      // Initialize empty charts
      this.updateChart('sales-chart-canvas', [0]);
      this.updateChart('volume-chart-canvas', [0]);
    }

    resetBulkMint() {
      this.uploadedFiles = [];
      const container = document.querySelector('[data-testid="bulk-upload-area"]');
      if (container) {
        container.innerHTML = `
          <div class="upload-icon">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
              <polyline points="7,10 12,15 17,10"/>
              <line x1="12" y1="15" x2="12" y2="3"/>
            </svg>
          </div>
          <h3>Upload Images</h3>
          <p>Drag and drop multiple images or click to browse</p>
          <input type="file" multiple accept="image/*" data-testid="bulk-upload-input" style="display: none;">
          <button class="btn btn-primary upload-btn" data-testid="bulk-upload-btn">Choose Files</button>
        `;
      }
    }

    showLoading(buttonId: string) {
      if (buttonId) {
        const button = document.querySelector(`[data-testid="${buttonId}"]`) as HTMLButtonElement;
        if (button) {
          const btnText = button.querySelector('.btn-text') as HTMLElement;
          const btnLoading = button.querySelector('.btn-loading') as HTMLElement;
          
          if (btnText) btnText.style.display = 'none';
          if (btnLoading) btnLoading.style.display = 'block';
          
          button.disabled = true;
        }
      }
    }

    hideLoading(buttonId: string) {
      if (buttonId) {
        const button = document.querySelector(`[data-testid="${buttonId}"]`) as HTMLButtonElement;
        if (button) {
          const btnText = button.querySelector('.btn-text') as HTMLElement;
          const btnLoading = button.querySelector('.btn-loading') as HTMLElement;
          
          if (btnText) btnText.style.display = 'block';
          if (btnLoading) btnLoading.style.display = 'none';
          
          button.disabled = false;
        }
      }
    }

    showSuccess(message: string) {
      // This would typically show a toast notification
      console.log('Success:', message);
    }

    showError(message: string) {
      // This would typically show a toast notification
      console.error('Error:', message);
    }
  }

  // Initialize the advanced NFT tools when the component loads
  document.addEventListener('DOMContentLoaded', () => {
    new EnhancedAdvancedNFTTools();
  });
</script>
