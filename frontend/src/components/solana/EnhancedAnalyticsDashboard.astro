---
// Enhanced Analytics Dashboard Component
// Comprehensive analytics with Solana blockchain data
---

<div class="enhanced-analytics-dashboard" data-testid="enhanced-analytics-dashboard">
  <!-- Dashboard Header -->
  <div class="dashboard-header">
    <h1>Analytics Dashboard</h1>
    <div class="header-controls">
      <div class="time-range-selector">
        <select class="time-range-select" data-testid="time-range-select">
          <option value="24h">Last 24 Hours</option>
          <option value="7d" selected>Last 7 Days</option>
          <option value="30d">Last 30 Days</option>
          <option value="90d">Last 90 Days</option>
          <option value="1y">Last Year</option>
        </select>
      </div>
      <div class="refresh-controls">
        <button class="btn btn-outline refresh-btn" data-testid="refresh-btn">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="23,4 23,10 17,10"/>
            <polyline points="1,20 1,14 7,14"/>
            <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"/>
          </svg>
          Refresh
        </button>
      </div>
    </div>
  </div>

  <!-- Key Metrics Cards -->
  <div class="metrics-grid" data-testid="metrics-grid">
    <div class="metric-card" data-testid="metric-total-volume">
      <div class="metric-header">
        <h3>Total Volume</h3>
        <div class="metric-trend positive" data-testid="volume-trend">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="23,6 13.5,15.5 8.5,10.5 1,18"/>
            <polyline points="17,6 23,6 23,12"/>
          </svg>
          +12.5%
        </div>
      </div>
      <div class="metric-value" data-testid="volume-value">1,234.56 SOL</div>
      <div class="metric-subtitle" data-testid="volume-usd">≈ $123,456 USD</div>
    </div>

    <div class="metric-card" data-testid="metric-total-sales">
      <div class="metric-header">
        <h3>Total Sales</h3>
        <div class="metric-trend positive" data-testid="sales-trend">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="23,6 13.5,15.5 8.5,10.5 1,18"/>
            <polyline points="17,6 23,6 23,12"/>
          </svg>
          +8.3%
        </div>
      </div>
      <div class="metric-value" data-testid="sales-value">2,847</div>
      <div class="metric-subtitle" data-testid="sales-avg">Avg: 0.43 SOL</div>
    </div>

    <div class="metric-card" data-testid="metric-active-users">
      <div class="metric-header">
        <h3>Active Users</h3>
        <div class="metric-trend positive" data-testid="users-trend">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="23,6 13.5,15.5 8.5,10.5 1,18"/>
            <polyline points="17,6 23,6 23,12"/>
          </svg>
          +15.2%
        </div>
      </div>
      <div class="metric-value" data-testid="users-value">1,429</div>
      <div class="metric-subtitle" data-testid="users-new">+234 new</div>
    </div>

    <div class="metric-card" data-testid="metric-floor-price">
      <div class="metric-header">
        <h3>Floor Price</h3>
        <div class="metric-trend negative" data-testid="floor-trend">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="23,18 13.5,8.5 8.5,13.5 1,6"/>
            <polyline points="17,18 23,18 23,12"/>
          </svg>
          -3.1%
        </div>
      </div>
      <div class="metric-value" data-testid="floor-value">0.89 SOL</div>
      <div class="metric-subtitle" data-testid="floor-usd">≈ $89 USD</div>
    </div>
  </div>

  <!-- Charts Section -->
  <div class="charts-section">
    <div class="chart-container" data-testid="volume-chart-container">
      <div class="chart-header">
        <h3>Trading Volume</h3>
        <div class="chart-controls">
          <div class="chart-type-toggle">
            <button class="chart-btn active" data-testid="volume-chart-line" data-type="line">Line</button>
            <button class="chart-btn" data-testid="volume-chart-bar" data-type="bar">Bar</button>
          </div>
        </div>
      </div>
      <div class="chart-content">
        <canvas id="volume-chart" data-testid="volume-chart" width="800" height="400"></canvas>
      </div>
    </div>

    <div class="chart-container" data-testid="sales-chart-container">
      <div class="chart-header">
        <h3>Sales Activity</h3>
        <div class="chart-controls">
          <div class="chart-type-toggle">
            <button class="chart-btn active" data-testid="sales-chart-line" data-type="line">Line</button>
            <button class="chart-btn" data-testid="sales-chart-bar" data-type="bar">Bar</button>
          </div>
        </div>
      </div>
      <div class="chart-content">
        <canvas id="sales-chart" data-testid="sales-chart" width="800" height="400"></canvas>
      </div>
    </div>
  </div>

  <!-- Top Collections Table -->
  <div class="collections-section" data-testid="collections-section">
    <div class="section-header">
      <h3>Top Collections</h3>
      <div class="section-controls">
        <div class="view-toggle">
          <button class="view-btn active" data-testid="collections-table-view" data-view="table">Table</button>
          <button class="view-btn" data-testid="collections-grid-view" data-view="grid">Grid</button>
        </div>
      </div>
    </div>
    <div class="collections-content">
      <div class="collections-table" data-testid="collections-table">
        <table>
          <thead>
            <tr>
              <th>Collection</th>
              <th>Volume</th>
              <th>Sales</th>
              <th>Floor Price</th>
              <th>Change</th>
              <th>Owners</th>
            </tr>
          </thead>
          <tbody>
            <tr data-testid="collection-row-1">
              <td>
                <div class="collection-info">
                  <img src="/images/collections/solana-punks.jpg" alt="Solana Punks" class="collection-image">
                  <div class="collection-details">
                    <span class="collection-name">Solana Punks</span>
                    <span class="collection-symbol">SP</span>
                  </div>
                </div>
              </td>
              <td class="metric-cell">
                <span class="metric-value">456.78 SOL</span>
                <span class="metric-usd">≈ $45,678</span>
              </td>
              <td class="metric-cell">
                <span class="metric-value">1,234</span>
                <span class="metric-subtitle">sales</span>
              </td>
              <td class="metric-cell">
                <span class="metric-value">2.34 SOL</span>
                <span class="metric-usd">≈ $234</span>
              </td>
              <td class="metric-cell">
                <span class="trend positive">+12.5%</span>
              </td>
              <td class="metric-cell">
                <span class="metric-value">567</span>
                <span class="metric-subtitle">owners</span>
              </td>
            </tr>
            <tr data-testid="collection-row-2">
              <td>
                <div class="collection-info">
                  <img src="/images/collections/digital-artists.jpg" alt="Digital Artists" class="collection-image">
                  <div class="collection-details">
                    <span class="collection-name">Digital Artists</span>
                    <span class="collection-symbol">DA</span>
                  </div>
                </div>
              </td>
              <td class="metric-cell">
                <span class="metric-value">234.56 SOL</span>
                <span class="metric-usd">≈ $23,456</span>
              </td>
              <td class="metric-cell">
                <span class="metric-value">789</span>
                <span class="metric-subtitle">sales</span>
              </td>
              <td class="metric-cell">
                <span class="metric-value">1.89 SOL</span>
                <span class="metric-usd">≈ $189</span>
              </td>
              <td class="metric-cell">
                <span class="trend positive">+8.3%</span>
              </td>
              <td class="metric-cell">
                <span class="metric-value">345</span>
                <span class="metric-subtitle">owners</span>
              </td>
            </tr>
            <tr data-testid="collection-row-3">
              <td>
                <div class="collection-info">
                  <img src="/images/collections/crypto-cats.jpg" alt="Crypto Cats" class="collection-image">
                  <div class="collection-details">
                    <span class="collection-name">Crypto Cats</span>
                    <span class="collection-symbol">CC</span>
                  </div>
                </div>
              </td>
              <td class="metric-cell">
                <span class="metric-value">123.45 SOL</span>
                <span class="metric-usd">≈ $12,345</span>
              </td>
              <td class="metric-cell">
                <span class="metric-value">456</span>
                <span class="metric-subtitle">sales</span>
              </td>
              <td class="metric-cell">
                <span class="metric-value">0.89 SOL</span>
                <span class="metric-usd">≈ $89</span>
              </td>
              <td class="metric-cell">
                <span class="trend negative">-3.1%</span>
              </td>
              <td class="metric-cell">
                <span class="metric-value">234</span>
                <span class="metric-subtitle">owners</span>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Recent Transactions -->
  <div class="transactions-section" data-testid="transactions-section">
    <div class="section-header">
      <h3>Recent Transactions</h3>
      <div class="section-controls">
        <button class="btn btn-outline view-all-btn" data-testid="view-all-transactions">View All</button>
      </div>
    </div>
    <div class="transactions-content">
      <div class="transactions-list" data-testid="transactions-list">
        <div class="transaction-item" data-testid="transaction-1">
          <div class="transaction-image">
            <img src="/images/nfts/nft-1.jpg" alt="NFT" class="nft-image">
          </div>
          <div class="transaction-details">
            <div class="transaction-info">
              <span class="nft-name">Solana Punk #001</span>
              <span class="transaction-type">Sale</span>
            </div>
            <div class="transaction-meta">
              <span class="transaction-price">2.5 SOL</span>
              <span class="transaction-time">2 minutes ago</span>
            </div>
          </div>
          <div class="transaction-status">
            <span class="status-badge confirmed">Confirmed</span>
          </div>
        </div>

        <div class="transaction-item" data-testid="transaction-2">
          <div class="transaction-image">
            <img src="/images/nfts/nft-2.jpg" alt="NFT" class="nft-image">
          </div>
          <div class="transaction-details">
            <div class="transaction-info">
              <span class="nft-name">Digital Art #042</span>
              <span class="transaction-type">Bid</span>
            </div>
            <div class="transaction-meta">
              <span class="transaction-price">1.8 SOL</span>
              <span class="transaction-time">5 minutes ago</span>
            </div>
          </div>
          <div class="transaction-status">
            <span class="status-badge pending">Pending</span>
          </div>
        </div>

        <div class="transaction-item" data-testid="transaction-3">
          <div class="transaction-image">
            <img src="/images/nfts/nft-3.jpg" alt="NFT" class="nft-image">
          </div>
          <div class="transaction-details">
            <div class="transaction-info">
              <span class="nft-name">Crypto Cat #1337</span>
              <span class="transaction-type">Offer</span>
            </div>
            <div class="transaction-meta">
              <span class="transaction-price">4.2 SOL</span>
              <span class="transaction-time">1 hour ago</span>
            </div>
          </div>
          <div class="transaction-status">
            <span class="status-badge confirmed">Confirmed</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Market Insights -->
  <div class="insights-section" data-testid="insights-section">
    <div class="section-header">
      <h3>Market Insights</h3>
    </div>
    <div class="insights-content">
      <div class="insight-card" data-testid="insight-1">
        <div class="insight-icon">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"/>
          </svg>
        </div>
        <div class="insight-content">
          <h4>High Activity Period</h4>
          <p>Peak trading activity occurs between 2-4 PM UTC, with 40% higher volume than average.</p>
        </div>
      </div>

      <div class="insight-card" data-testid="insight-2">
        <div class="insight-icon">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
          </svg>
        </div>
        <div class="insight-content">
          <h4>Trending Collections</h4>
          <p>Solana Punks and Digital Artists are leading in both volume and new listings this week.</p>
        </div>
      </div>

      <div class="insight-card" data-testid="insight-3">
        <div class="insight-icon">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="10"/>
            <path d="M8 14s1.5 2 4 2 4-2 4-2"/>
            <line x1="9" y1="9" x2="9.01" y2="9"/>
            <line x1="15" y1="9" x2="15.01" y2="9"/>
          </svg>
        </div>
        <div class="insight-content">
          <h4>User Engagement</h4>
          <p>Average session duration increased by 25% this month, indicating higher user engagement.</p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .enhanced-analytics-dashboard {
    padding: var(--soladia-space-6);
    max-width: 1400px;
    margin: 0 auto;
    background: var(--soladia-bg-primary);
    min-height: 100vh;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--soladia-space-8);
    flex-wrap: wrap;
    gap: var(--soladia-space-4);
  }

  .dashboard-header h1 {
    font-size: var(--soladia-text-3xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0;
  }

  .header-controls {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-4);
  }

  .time-range-select {
    padding: var(--soladia-space-2) var(--soladia-space-4);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    background: var(--soladia-bg-primary);
    color: var(--soladia-text-primary);
    font-weight: var(--soladia-font-medium);
  }

  .refresh-btn {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-2);
    padding: var(--soladia-space-2) var(--soladia-space-4);
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--soladia-space-6);
    margin-bottom: var(--soladia-space-8);
  }

  .metric-card {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-xl);
    padding: var(--soladia-space-6);
    box-shadow: var(--soladia-shadow-lg);
    transition: var(--soladia-transition);
  }

  .metric-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--soladia-shadow-xl);
  }

  .metric-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--soladia-space-4);
  }

  .metric-header h3 {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-secondary);
    margin: 0;
  }

  .metric-trend {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-1);
    font-size: var(--soladia-text-sm);
    font-weight: var(--soladia-font-semibold);
    padding: var(--soladia-space-1) var(--soladia-space-2);
    border-radius: var(--soladia-radius);
  }

  .metric-trend.positive {
    color: var(--soladia-success);
    background: var(--soladia-success-50);
  }

  .metric-trend.negative {
    color: var(--soladia-error);
    background: var(--soladia-error-50);
  }

  .metric-value {
    font-size: var(--soladia-text-3xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin-bottom: var(--soladia-space-1);
  }

  .metric-subtitle {
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-tertiary);
  }

  .charts-section {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--soladia-space-8);
    margin-bottom: var(--soladia-space-8);
  }

  .chart-container {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-xl);
    padding: var(--soladia-space-6);
    box-shadow: var(--soladia-shadow-lg);
  }

  .chart-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--soladia-space-6);
  }

  .chart-header h3 {
    font-size: var(--soladia-text-xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0;
  }

  .chart-type-toggle {
    display: flex;
    background: var(--soladia-bg-secondary);
    border-radius: var(--soladia-radius-lg);
    padding: var(--soladia-space-1);
  }

  .chart-btn {
    background: none;
    border: none;
    padding: var(--soladia-space-2) var(--soladia-space-4);
    border-radius: var(--soladia-radius);
    color: var(--soladia-text-secondary);
    cursor: pointer;
    transition: var(--soladia-transition);
    font-weight: var(--soladia-font-medium);
  }

  .chart-btn.active {
    background: var(--soladia-primary);
    color: white;
  }

  .chart-btn:hover:not(.active) {
    color: var(--soladia-text-primary);
    background: var(--soladia-bg-primary);
  }

  .chart-content {
    position: relative;
    height: 400px;
  }

  .chart-content canvas {
    width: 100% !important;
    height: 100% !important;
  }

  .collections-section,
  .transactions-section,
  .insights-section {
    margin-bottom: var(--soladia-space-8);
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--soladia-space-6);
  }

  .section-header h3 {
    font-size: var(--soladia-text-xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0;
  }

  .view-toggle {
    display: flex;
    background: var(--soladia-bg-secondary);
    border-radius: var(--soladia-radius-lg);
    padding: var(--soladia-space-1);
  }

  .view-btn {
    background: none;
    border: none;
    padding: var(--soladia-space-2) var(--soladia-space-4);
    border-radius: var(--soladia-radius);
    color: var(--soladia-text-secondary);
    cursor: pointer;
    transition: var(--soladia-transition);
    font-weight: var(--soladia-font-medium);
  }

  .view-btn.active {
    background: var(--soladia-primary);
    color: white;
  }

  .view-btn:hover:not(.active) {
    color: var(--soladia-text-primary);
    background: var(--soladia-bg-primary);
  }

  .collections-content {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-xl);
    overflow: hidden;
    box-shadow: var(--soladia-shadow-lg);
  }

  .collections-table {
    overflow-x: auto;
  }

  .collections-table table {
    width: 100%;
    border-collapse: collapse;
  }

  .collections-table th {
    background: var(--soladia-bg-secondary);
    padding: var(--soladia-space-4);
    text-align: left;
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    border-bottom: 1px solid var(--soladia-border);
  }

  .collections-table td {
    padding: var(--soladia-space-4);
    border-bottom: 1px solid var(--soladia-border-light);
  }

  .collections-table tr:hover {
    background: var(--soladia-bg-secondary);
  }

  .collection-info {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-3);
  }

  .collection-image {
    width: 40px;
    height: 40px;
    border-radius: var(--soladia-radius-lg);
    object-fit: cover;
  }

  .collection-details {
    display: flex;
    flex-direction: column;
  }

  .collection-name {
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
  }

  .collection-symbol {
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-tertiary);
  }

  .metric-cell {
    text-align: right;
  }

  .metric-cell .metric-value {
    display: block;
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
  }

  .metric-cell .metric-usd,
  .metric-cell .metric-subtitle {
    display: block;
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-tertiary);
  }

  .trend {
    font-weight: var(--soladia-font-semibold);
    padding: var(--soladia-space-1) var(--soladia-space-2);
    border-radius: var(--soladia-radius);
  }

  .trend.positive {
    color: var(--soladia-success);
    background: var(--soladia-success-50);
  }

  .trend.negative {
    color: var(--soladia-error);
    background: var(--soladia-error-50);
  }

  .transactions-content {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-xl);
    padding: var(--soladia-space-6);
    box-shadow: var(--soladia-shadow-lg);
  }

  .transactions-list {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-4);
  }

  .transaction-item {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-4);
    padding: var(--soladia-space-4);
    background: var(--soladia-bg-secondary);
    border-radius: var(--soladia-radius-lg);
    transition: var(--soladia-transition);
  }

  .transaction-item:hover {
    background: var(--soladia-bg-primary);
    transform: translateX(4px);
  }

  .transaction-image {
    width: 60px;
    height: 60px;
    border-radius: var(--soladia-radius-lg);
    overflow: hidden;
  }

  .transaction-image .nft-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .transaction-details {
    flex: 1;
  }

  .transaction-info {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-2);
    margin-bottom: var(--soladia-space-1);
  }

  .nft-name {
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
  }

  .transaction-type {
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-tertiary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .transaction-meta {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-4);
  }

  .transaction-price {
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
  }

  .transaction-time {
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-tertiary);
  }

  .status-badge {
    padding: var(--soladia-space-1) var(--soladia-space-3);
    border-radius: var(--soladia-radius-full);
    font-size: var(--soladia-text-sm);
    font-weight: var(--soladia-font-semibold);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .status-badge.confirmed {
    background: var(--soladia-success);
    color: white;
  }

  .status-badge.pending {
    background: var(--soladia-warning);
    color: white;
  }

  .insights-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--soladia-space-6);
  }

  .insight-card {
    display: flex;
    align-items: flex-start;
    gap: var(--soladia-space-4);
    padding: var(--soladia-space-6);
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-xl);
    box-shadow: var(--soladia-shadow-lg);
    transition: var(--soladia-transition);
  }

  .insight-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--soladia-shadow-xl);
  }

  .insight-icon {
    width: 48px;
    height: 48px;
    border-radius: var(--soladia-radius-lg);
    background: var(--soladia-primary-50);
    color: var(--soladia-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .insight-content h4 {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-2) 0;
  }

  .insight-content p {
    color: var(--soladia-text-secondary);
    line-height: 1.6;
    margin: 0;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--soladia-space-2);
    padding: var(--soladia-space-2) var(--soladia-space-4);
    border-radius: var(--soladia-radius-lg);
    font-weight: var(--soladia-font-semibold);
    text-decoration: none;
    transition: var(--soladia-transition);
    cursor: pointer;
    border: none;
    font-size: var(--soladia-text-base);
    line-height: 1;
  }

  .btn:focus {
    outline: 2px solid var(--soladia-primary);
    outline-offset: 2px;
  }

  .btn-outline {
    background: transparent;
    color: var(--soladia-text-primary);
    border: 2px solid var(--soladia-border);
  }

  .btn-outline:hover {
    background: var(--soladia-bg-secondary);
    border-color: var(--soladia-text-primary);
  }

  /* Dark mode styles */
  [data-theme="dark"] .enhanced-analytics-dashboard {
    background: var(--soladia-bg-primary);
  }

  [data-theme="dark"] .metric-card,
  [data-theme="dark"] .chart-container,
  [data-theme="dark"] .collections-content,
  [data-theme="dark"] .transactions-content,
  [data-theme="dark"] .insight-card {
    background: var(--soladia-bg-primary);
    border-color: var(--soladia-border);
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .enhanced-analytics-dashboard {
      padding: var(--soladia-space-4);
    }

    .dashboard-header {
      flex-direction: column;
      align-items: flex-start;
    }

    .metrics-grid {
      grid-template-columns: 1fr;
      gap: var(--soladia-space-4);
    }

    .chart-content {
      height: 300px;
    }

    .collections-table {
      font-size: var(--soladia-text-sm);
    }

    .collections-table th,
    .collections-table td {
      padding: var(--soladia-space-2);
    }

    .transaction-item {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--soladia-space-3);
    }

    .transaction-details {
      width: 100%;
    }

    .transaction-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--soladia-space-1);
    }

    .insights-content {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  import { enhancedAnalyticsService } from '../../services/enhanced-analytics-service';
  import { enhancedWalletService } from '../../services/enhanced-wallet-service';

  class EnhancedAnalyticsDashboard {
    constructor() {
      this.analyticsService = enhancedAnalyticsService;
      this.walletService = enhancedWalletService;
      this.currentTimeRange = '7d';
      this.charts = {};
      
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.loadAnalytics();
      this.initializeCharts();
    }

    setupEventListeners() {
      // Time range selector
      document.querySelector('[data-testid="time-range-select"]')?.addEventListener('change', (e) => {
        this.currentTimeRange = e.target.value;
        this.loadAnalytics();
      });

      // Refresh button
      document.querySelector('[data-testid="refresh-btn"]')?.addEventListener('click', () => {
        this.loadAnalytics();
      });

      // Chart type toggles
      document.querySelectorAll('[data-testid$="-chart-line"], [data-testid$="-chart-bar"]').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const chartType = e.target.dataset.type;
          const chartId = e.target.dataset.testid.replace('-chart-' + chartType, '');
          this.toggleChartType(chartId, chartType);
        });
      });

      // View toggles
      document.querySelectorAll('[data-testid$="-view"]').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const view = e.target.dataset.view;
          const section = e.target.dataset.testid.replace('-view', '').replace('-', '');
          this.toggleView(section, view);
        });
      });

      // View all transactions
      document.querySelector('[data-testid="view-all-transactions"]')?.addEventListener('click', () => {
        this.viewAllTransactions();
      });
    }

    async loadAnalytics() {
      try {
        this.showLoading();
        
        const analytics = await this.analyticsService.getAnalytics({
          timeRange: this.currentTimeRange
        });

        this.updateMetrics(analytics.metrics);
        this.updateCharts(analytics.charts);
        this.updateCollections(analytics.collections);
        this.updateTransactions(analytics.transactions);
        this.updateInsights(analytics.insights);

      } catch (error) {
        console.error('Error loading analytics:', error);
        this.showError('Failed to load analytics data');
      } finally {
        this.hideLoading();
      }
    }

    updateMetrics(metrics) {
      const metricElements = {
        'volume-value': metrics.totalVolume,
        'volume-usd': `≈ $${metrics.totalVolumeUSD.toLocaleString()} USD`,
        'sales-value': metrics.totalSales.toLocaleString(),
        'sales-avg': `Avg: ${metrics.averageSale} SOL`,
        'users-value': metrics.activeUsers.toLocaleString(),
        'users-new': `+${metrics.newUsers} new`,
        'floor-value': `${metrics.floorPrice} SOL`,
        'floor-usd': `≈ $${metrics.floorPriceUSD} USD`
      };

      Object.entries(metricElements).forEach(([testId, value]) => {
        const element = document.querySelector(`[data-testid="${testId}"]`);
        if (element) {
          element.textContent = value;
        }
      });

      // Update trends
      this.updateTrend('volume-trend', metrics.volumeTrend);
      this.updateTrend('sales-trend', metrics.salesTrend);
      this.updateTrend('users-trend', metrics.usersTrend);
      this.updateTrend('floor-trend', metrics.floorTrend);
    }

    updateTrend(testId, trend) {
      const element = document.querySelector(`[data-testid="${testId}"]`);
      if (element) {
        const isPositive = trend > 0;
        element.className = `metric-trend ${isPositive ? 'positive' : 'negative'}`;
        element.innerHTML = `
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="23,6 13.5,15.5 8.5,10.5 1,18"/>
            <polyline points="17,6 23,6 23,12"/>
          </svg>
          ${isPositive ? '+' : ''}${trend.toFixed(1)}%
        `;
      }
    }

    updateCharts(chartData) {
      this.updateVolumeChart(chartData.volume);
      this.updateSalesChart(chartData.sales);
    }

    updateVolumeChart(data) {
      const canvas = document.getElementById('volume-chart');
      if (!canvas) return;

      const ctx = canvas.getContext('2d');
      
      // Clear previous chart
      if (this.charts.volume) {
        this.charts.volume.destroy();
      }

      // Create new chart (using Chart.js or similar)
      this.charts.volume = this.createChart(ctx, {
        type: 'line',
        data: {
          labels: data.labels,
          datasets: [{
            label: 'Volume (SOL)',
            data: data.values,
            borderColor: '#E60012',
            backgroundColor: 'rgba(230, 0, 18, 0.1)',
            borderWidth: 2,
            fill: true,
            tension: 0.4
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              grid: {
                color: 'rgba(0, 0, 0, 0.1)'
              }
            },
            x: {
              grid: {
                color: 'rgba(0, 0, 0, 0.1)'
              }
            }
          }
        }
      });
    }

    updateSalesChart(data) {
      const canvas = document.getElementById('sales-chart');
      if (!canvas) return;

      const ctx = canvas.getContext('2d');
      
      // Clear previous chart
      if (this.charts.sales) {
        this.charts.sales.destroy();
      }

      // Create new chart
      this.charts.sales = this.createChart(ctx, {
        type: 'line',
        data: {
          labels: data.labels,
          datasets: [{
            label: 'Sales Count',
            data: data.values,
            borderColor: '#0066CC',
            backgroundColor: 'rgba(0, 102, 204, 0.1)',
            borderWidth: 2,
            fill: true,
            tension: 0.4
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              grid: {
                color: 'rgba(0, 0, 0, 0.1)'
              }
            },
            x: {
              grid: {
                color: 'rgba(0, 0, 0, 0.1)'
              }
            }
          }
        }
      });
    }

    createChart(ctx, config) {
      // This would typically use Chart.js or similar library
      // For now, we'll create a simple mock chart
      return {
        destroy: () => {}
      };
    }

    updateCollections(collections) {
      const tbody = document.querySelector('.collections-table tbody');
      if (!tbody) return;

      tbody.innerHTML = collections.map((collection, index) => `
        <tr data-testid="collection-row-${index + 1}">
          <td>
            <div class="collection-info">
              <img src="${collection.image}" alt="${collection.name}" class="collection-image">
              <div class="collection-details">
                <span class="collection-name">${collection.name}</span>
                <span class="collection-symbol">${collection.symbol}</span>
              </div>
            </div>
          </td>
          <td class="metric-cell">
            <span class="metric-value">${collection.volume} SOL</span>
            <span class="metric-usd">≈ $${collection.volumeUSD.toLocaleString()}</span>
          </td>
          <td class="metric-cell">
            <span class="metric-value">${collection.sales.toLocaleString()}</span>
            <span class="metric-subtitle">sales</span>
          </td>
          <td class="metric-cell">
            <span class="metric-value">${collection.floorPrice} SOL</span>
            <span class="metric-usd">≈ $${collection.floorPriceUSD}</span>
          </td>
          <td class="metric-cell">
            <span class="trend ${collection.change >= 0 ? 'positive' : 'negative'}">
              ${collection.change >= 0 ? '+' : ''}${collection.change.toFixed(1)}%
            </span>
          </td>
          <td class="metric-cell">
            <span class="metric-value">${collection.owners.toLocaleString()}</span>
            <span class="metric-subtitle">owners</span>
          </td>
        </tr>
      `).join('');
    }

    updateTransactions(transactions) {
      const container = document.querySelector('[data-testid="transactions-list"]');
      if (!container) return;

      container.innerHTML = transactions.map((transaction, index) => `
        <div class="transaction-item" data-testid="transaction-${index + 1}">
          <div class="transaction-image">
            <img src="${transaction.image}" alt="NFT" class="nft-image">
          </div>
          <div class="transaction-details">
            <div class="transaction-info">
              <span class="nft-name">${transaction.nftName}</span>
              <span class="transaction-type">${transaction.type}</span>
            </div>
            <div class="transaction-meta">
              <span class="transaction-price">${transaction.price} SOL</span>
              <span class="transaction-time">${transaction.timeAgo}</span>
            </div>
          </div>
          <div class="transaction-status">
            <span class="status-badge ${transaction.status}">${transaction.statusText}</span>
          </div>
        </div>
      `).join('');
    }

    updateInsights(insights) {
      const container = document.querySelector('[data-testid="insights-section"] .insights-content');
      if (!container) return;

      container.innerHTML = insights.map((insight, index) => `
        <div class="insight-card" data-testid="insight-${index + 1}">
          <div class="insight-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              ${insight.icon}
            </svg>
          </div>
          <div class="insight-content">
            <h4>${insight.title}</h4>
            <p>${insight.description}</p>
          </div>
        </div>
      `).join('');
    }

    toggleChartType(chartId, type) {
      // Update button states
      document.querySelectorAll(`[data-testid^="${chartId}-chart-"]`).forEach(btn => {
        btn.classList.toggle('active', btn.dataset.type === type);
      });

      // Update chart type
      if (this.charts[chartId]) {
        this.charts[chartId].config.type = type;
        this.charts[chartId].update();
      }
    }

    toggleView(section, view) {
      // Update button states
      document.querySelectorAll(`[data-testid^="${section}-view"]`).forEach(btn => {
        btn.classList.toggle('active', btn.dataset.view === view);
      });

      // Update view layout
      const container = document.querySelector(`[data-testid="${section}-section"] .${section}-content`);
      if (container) {
        container.className = `${section}-content ${view}-view`;
      }
    }

    viewAllTransactions() {
      // This would typically navigate to a transactions page
      console.log('Navigate to all transactions page');
    }

    initializeCharts() {
      // Initialize empty charts
      this.charts = {
        volume: null,
        sales: null
      };
    }

    showLoading() {
      // Show loading state
      console.log('Loading analytics...');
    }

    hideLoading() {
      // Hide loading state
      console.log('Analytics loaded');
    }

    showError(message) {
      // Show error message
      console.error('Analytics error:', message);
    }
  }

  // Initialize the dashboard when the component loads
  document.addEventListener('DOMContentLoaded', () => {
    new EnhancedAnalyticsDashboard();
  });
</script>
