---
// SolanaWallet.astro - Multi-wallet connection component
---

<div id="solana-wallet" class="solana-wallet-container">
  <div class="wallet-status" id="wallet-status">
    <!-- Wallet connection status will be populated here -->
  </div>
  
  <div class="wallet-actions" id="wallet-actions">
    <!-- Wallet action buttons will be populated here -->
  </div>
  
  <div class="wallet-info" id="wallet-info" style="display: none;">
    <!-- Connected wallet information will be populated here -->
  </div>
</div>

<script>
  import { enhancedSolanaWalletService } from '../../services/solana/solana-wallet';

  class SolanaWalletComponent {
    private walletService = enhancedSolanaWalletService;
    private statusElement: HTMLElement | null = null;
    private actionsElement: HTMLElement | null = null;
    private infoElement: HTMLElement | null = null;

    constructor() {
      this.initializeElements();
      this.setupEventListeners();
      this.render();
    }

    private initializeElements() {
      this.statusElement = document.getElementById('wallet-status');
      this.actionsElement = document.getElementById('wallet-actions');
      this.infoElement = document.getElementById('wallet-info');
    }

    private setupEventListeners() {
      this.walletService.on('wallet:connected', (detail) => {
        this.render();
      });

      this.walletService.on('wallet:disconnected', () => {
        this.render();
      });

      this.walletService.on('wallet:accountChanged', (detail) => {
        this.render();
      });
    }

    private render() {
      this.renderStatus();
      this.renderActions();
      this.renderInfo();
    }

    private renderStatus() {
      if (!this.statusElement) return;

      const isConnected = this.walletService.isConnected();
      const wallet = this.walletService.getWallet();

      if (isConnected && wallet) {
        this.statusElement.innerHTML = `
          <div class="wallet-connected">
            <div class="wallet-provider">
              <span class="provider-icon">${this.getProviderIcon(wallet.provider)}</span>
              <span class="provider-name">${wallet.provider}</span>
            </div>
            <div class="wallet-address">
              ${this.walletService.formatAddress(wallet.publicKey)}
            </div>
            <div class="wallet-balance">
              ${wallet.balance.toFixed(4)} SOL
            </div>
          </div>
        `;
      } else {
        this.statusElement.innerHTML = `
          <div class="wallet-disconnected">
            <div class="disconnected-icon">üîå</div>
            <div class="disconnected-text">No wallet connected</div>
          </div>
        `;
      }
    }

    private renderActions() {
      if (!this.actionsElement) return;

      const isConnected = this.walletService.isConnected();
      const availableProviders = this.walletService.getAvailableProviders();

      if (isConnected) {
        this.actionsElement.innerHTML = `
          <div class="connected-actions">
            <button id="disconnect-wallet" class="btn btn-outline">
              Disconnect
            </button>
            <button id="refresh-balance" class="btn btn-primary">
              Refresh Balance
            </button>
          </div>
        `;
      } else {
        if (availableProviders.length > 0) {
          this.actionsElement.innerHTML = `
            <div class="disconnected-actions">
              <div class="provider-buttons">
                ${availableProviders.map(provider => `
                  <button 
                    class="btn btn-primary provider-btn" 
                    data-provider="${provider.name.toLowerCase()}"
                  >
                    <span class="provider-icon">${provider.icon}</span>
                    Connect ${provider.name}
                  </button>
                `).join('')}
              </div>
            </div>
          `;
        } else {
          this.actionsElement.innerHTML = `
            <div class="no-wallets">
              <p>No Solana wallets detected.</p>
              <p>Please install a supported wallet:</p>
              <div class="wallet-links">
                <a href="https://phantom.app/" target="_blank" class="wallet-link">
                  <span>üëª</span> Phantom
                </a>
                <a href="https://solflare.com/" target="_blank" class="wallet-link">
                  <span>‚òÄÔ∏è</span> Solflare
                </a>
                <a href="https://backpack.app/" target="_blank" class="wallet-link">
                  <span>üéí</span> Backpack
                </a>
              </div>
            </div>
          `;
        }
      }

      this.attachActionListeners();
    }

    private renderInfo() {
      if (!this.infoElement) return;

      const isConnected = this.walletService.isConnected();
      const wallet = this.walletService.getWallet();

      if (isConnected && wallet) {
        this.infoElement.style.display = 'block';
        this.infoElement.innerHTML = `
          <div class="wallet-details">
            <div class="detail-row">
              <span class="detail-label">Network:</span>
              <span class="detail-value">${wallet.network}</span>
            </div>
            <div class="detail-row">
              <span class="detail-label">Provider:</span>
              <span class="detail-value">${wallet.provider}</span>
            </div>
            <div class="detail-row">
              <span class="detail-label">Public Key:</span>
              <span class="detail-value copy-address" data-address="${wallet.publicKey}">
                ${this.walletService.formatAddress(wallet.publicKey, 12)}
                <span class="copy-icon">üìã</span>
              </span>
            </div>
          </div>
        `;
      } else {
        this.infoElement.style.display = 'none';
      }
    }

    private attachActionListeners() {
      // Disconnect button
      const disconnectBtn = document.getElementById('disconnect-wallet');
      if (disconnectBtn) {
        disconnectBtn.addEventListener('click', () => this.disconnectWallet());
      }

      // Refresh balance button
      const refreshBtn = document.getElementById('refresh-balance');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', () => this.refreshBalance());
      }

      // Provider buttons
      const providerBtns = document.querySelectorAll('.provider-btn');
      providerBtns.forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const provider = target.closest('.provider-btn')?.getAttribute('data-provider');
          if (provider) {
            this.connectWallet(provider);
          }
        });
      });

      // Copy address functionality
      const copyElements = document.querySelectorAll('.copy-address');
      copyElements.forEach(element => {
        element.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const address = target.getAttribute('data-address');
          if (address) {
            this.copyToClipboard(address);
          }
        });
      });
    }

    private async connectWallet(providerName: string) {
      try {
        await this.walletService.connect(providerName);
        this.showNotification('Wallet connected successfully!', 'success');
      } catch (error) {
        this.showNotification(`Failed to connect wallet: ${error}`, 'error');
      }
    }

    private async disconnectWallet() {
      try {
        await this.walletService.disconnect();
        this.showNotification('Wallet disconnected', 'info');
      } catch (error) {
        this.showNotification(`Failed to disconnect wallet: ${error}`, 'error');
      }
    }

    private async refreshBalance() {
      try {
        await this.walletService.updateBalance();
        this.showNotification('Balance refreshed', 'success');
      } catch (error) {
        this.showNotification(`Failed to refresh balance: ${error}`, 'error');
      }
    }

    private copyToClipboard(text: string) {
      navigator.clipboard.writeText(text).then(() => {
        this.showNotification('Address copied to clipboard!', 'success');
      }).catch(() => {
        this.showNotification('Failed to copy address', 'error');
      });
    }

    private getProviderIcon(provider: string): string {
      const icons: { [key: string]: string } = {
        'phantom': 'üëª',
        'solflare': '‚òÄÔ∏è',
        'backpack': 'üéí',
        'sollet': 'üîó',
        'ledger': 'üîí'
      };
      return icons[provider.toLowerCase()] || 'üîó';
    }

    private showNotification(message: string, type: 'success' | 'error' | 'info') {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.textContent = message;
      
      // Add to page
      document.body.appendChild(notification);
      
      // Remove after 3 seconds
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
  }

  // Initialize component when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new SolanaWalletComponent();
  });
</script>

<style>
  .solana-wallet-container {
    @apply bg-white rounded-lg shadow-md p-6;
  }

  .wallet-connected {
    @apply flex items-center justify-between p-4 bg-green-50 border border-green-200 rounded-lg;
  }

  .wallet-disconnected {
    @apply flex items-center justify-center p-4 bg-gray-50 border border-gray-200 rounded-lg;
  }

  .wallet-provider {
    @apply flex items-center space-x-2;
  }

  .provider-icon {
    @apply text-xl;
  }

  .provider-name {
    @apply font-medium text-gray-900;
  }

  .wallet-address {
    @apply font-mono text-sm text-gray-600;
  }

  .wallet-balance {
    @apply font-semibold text-green-600;
  }

  .disconnected-icon {
    @apply text-2xl mb-2;
  }

  .disconnected-text {
    @apply text-gray-600;
  }

  .connected-actions,
  .disconnected-actions {
    @apply mt-4 space-y-2;
  }

  .provider-buttons {
    @apply grid grid-cols-1 sm:grid-cols-2 gap-2;
  }

  .provider-btn {
    @apply flex items-center justify-center space-x-2 p-3 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors;
  }

  .no-wallets {
    @apply text-center p-4;
  }

  .wallet-links {
    @apply flex flex-wrap justify-center gap-4 mt-4;
  }

  .wallet-link {
    @apply flex items-center space-x-2 px-4 py-2 bg-blue-50 text-blue-600 rounded-lg hover:bg-blue-100 transition-colors;
  }

  .wallet-details {
    @apply mt-4 p-4 bg-gray-50 rounded-lg;
  }

  .detail-row {
    @apply flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0;
  }

  .detail-label {
    @apply font-medium text-gray-700;
  }

  .detail-value {
    @apply text-gray-900;
  }

  .copy-address {
    @apply cursor-pointer hover:text-blue-600 transition-colors;
  }

  .copy-icon {
    @apply ml-2 text-xs;
  }

  .btn {
    @apply px-4 py-2 rounded-lg font-medium transition-colors;
  }

  .btn-primary {
    @apply bg-blue-600 text-white hover:bg-blue-700;
  }

  .btn-outline {
    @apply border border-gray-300 text-gray-700 hover:bg-gray-50;
  }

  .notification {
    @apply fixed top-4 right-4 px-4 py-2 rounded-lg text-white font-medium z-50;
  }

  .notification-success {
    @apply bg-green-600;
  }

  .notification-error {
    @apply bg-red-600;
  }

  .notification-info {
    @apply bg-blue-600;
  }
</style>
