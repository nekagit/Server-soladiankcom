---
// Enhanced NFT Marketplace Component
// Complete NFT creation, metadata management, collection features, and trading
---

<div class="enhanced-nft-marketplace" data-testid="enhanced-nft-marketplace">
  <!-- Marketplace Header -->
  <div class="marketplace-header">
    <h1>NFT Marketplace</h1>
    <p class="header-subtitle">Discover, create, and trade unique digital assets on Solana</p>
  </div>

  <!-- Marketplace Navigation -->
  <div class="marketplace-nav">
    <div class="nav-tabs">
      <button class="nav-tab active" data-testid="nav-explore" data-section="explore">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="11" cy="11" r="8"/>
          <path d="M21 21l-4.35-4.35"/>
        </svg>
        Explore
      </button>
      <button class="nav-tab" data-testid="nav-create" data-section="create">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
        Create
      </button>
      <button class="nav-tab" data-testid="nav-collections" data-section="collections">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
          <circle cx="8.5" cy="8.5" r="1.5"/>
          <polyline points="21,15 16,10 5,21"/>
        </svg>
        Collections
      </button>
      <button class="nav-tab" data-testid="nav-profile" data-section="profile">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
          <circle cx="12" cy="7" r="4"/>
        </svg>
        Profile
      </button>
    </div>
  </div>

  <!-- Marketplace Content -->
  <div class="marketplace-content">
    <!-- Explore Section -->
    <div class="marketplace-section active" data-testid="explore-content" data-section="explore">
      <div class="section-header">
        <h2>Explore NFTs</h2>
        <div class="header-actions">
          <div class="search-bar">
            <input type="text" placeholder="Search NFTs, collections, creators..." data-testid="search-input">
            <button class="search-btn" data-testid="search-btn">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="11" cy="11" r="8"/>
                <path d="M21 21l-4.35-4.35"/>
              </svg>
            </button>
          </div>
          <div class="filter-toggle">
            <button class="btn btn-outline" data-testid="filter-toggle">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polygon points="22,3 2,3 10,12.46 10,19 14,21 14,12.46 22,3"/>
              </svg>
              Filters
            </button>
          </div>
        </div>
      </div>

      <div class="filters-panel" data-testid="filters-panel" style="display: none;">
        <div class="filter-group">
          <h3>Price Range</h3>
          <div class="price-range">
            <input type="range" min="0" max="100" value="50" data-testid="price-min">
            <input type="range" min="0" max="100" value="100" data-testid="price-max">
            <div class="price-labels">
              <span data-testid="price-min-label">0 SOL</span>
              <span data-testid="price-max-label">100+ SOL</span>
            </div>
          </div>
        </div>

        <div class="filter-group">
          <h3>Categories</h3>
          <div class="category-filters">
            <label class="filter-option">
              <input type="checkbox" value="art" data-testid="filter-art">
              <span class="checkmark"></span>
              Art
            </label>
            <label class="filter-option">
              <input type="checkbox" value="gaming" data-testid="filter-gaming">
              <span class="checkmark"></span>
              Gaming
            </label>
            <label class="filter-option">
              <input type="checkbox" value="music" data-testid="filter-music">
              <span class="checkmark"></span>
              Music
            </label>
            <label class="filter-option">
              <input type="checkbox" value="sports" data-testid="filter-sports">
              <span class="checkmark"></span>
              Sports
            </label>
          </div>
        </div>

        <div class="filter-group">
          <h3>Status</h3>
          <div class="status-filters">
            <label class="filter-option">
              <input type="radio" name="status" value="buy-now" data-testid="filter-buy-now" checked>
              <span class="checkmark"></span>
              Buy Now
            </label>
            <label class="filter-option">
              <input type="radio" name="status" value="auction" data-testid="filter-auction">
              <span class="checkmark"></span>
              On Auction
            </label>
            <label class="filter-option">
              <input type="radio" name="status" value="offers" data-testid="filter-offers">
              <span class="checkmark"></span>
              Accepting Offers
            </label>
          </div>
        </div>

        <div class="filter-actions">
          <button class="btn btn-secondary" data-testid="clear-filters">Clear All</button>
          <button class="btn btn-primary" data-testid="apply-filters">Apply Filters</button>
        </div>
      </div>

      <div class="nft-grid" data-testid="nft-grid">
        <!-- NFT items will be populated here -->
        <div class="nft-item" data-testid="nft-item-1">
          <div class="nft-image">
            <img src="/placeholder-nft-1.jpg" alt="NFT 1">
            <div class="nft-overlay">
              <button class="btn btn-primary quick-buy" data-testid="quick-buy-1">Buy Now</button>
              <button class="btn btn-outline quick-offer" data-testid="quick-offer-1">Make Offer</button>
            </div>
          </div>
          <div class="nft-info">
            <h3 class="nft-name">Amazing Art #1234</h3>
            <p class="nft-collection">Cool Collection</p>
            <div class="nft-price">
              <span class="price-amount">2.5 SOL</span>
              <span class="price-usd">≈ $125.00</span>
            </div>
            <div class="nft-stats">
              <span class="stat-item">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
                4.8
              </span>
              <span class="stat-item">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
                  <polyline points="16,6 12,2 8,6"/>
                  <line x1="12" y1="2" x2="12" y2="15"/>
                </svg>
                12
              </span>
            </div>
          </div>
        </div>

        <div class="nft-item" data-testid="nft-item-2">
          <div class="nft-image">
            <img src="/placeholder-nft-2.jpg" alt="NFT 2">
            <div class="nft-overlay">
              <button class="btn btn-primary quick-buy" data-testid="quick-buy-2">Buy Now</button>
              <button class="btn btn-outline quick-offer" data-testid="quick-offer-2">Make Offer</button>
            </div>
          </div>
          <div class="nft-info">
            <h3 class="nft-name">Gaming Character #5678</h3>
            <p class="nft-collection">Game Collection</p>
            <div class="nft-price">
              <span class="price-amount">1.8 SOL</span>
              <span class="price-usd">≈ $90.00</span>
            </div>
            <div class="nft-stats">
              <span class="stat-item">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
                4.6
              </span>
              <span class="stat-item">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
                  <polyline points="16,6 12,2 8,6"/>
                  <line x1="12" y1="2" x2="12" y2="15"/>
                </svg>
                8
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Section -->
    <div class="marketplace-section" data-testid="create-content" data-section="create">
      <div class="section-header">
        <h2>Create NFT</h2>
        <p>Upload your digital artwork and create a unique NFT on Solana</p>
      </div>

      <div class="create-form">
        <div class="form-step active" data-testid="step-upload" data-step="1">
          <h3>Upload Artwork</h3>
          <div class="upload-area" data-testid="upload-area">
            <div class="upload-icon">
              <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                <polyline points="7,10 12,15 17,10"/>
                <line x1="12" y1="15" x2="12" y2="3"/>
              </svg>
            </div>
            <h4>Upload your artwork</h4>
            <p>Drag and drop your image here, or click to browse</p>
            <input type="file" accept="image/*" data-testid="file-input" style="display: none;">
            <button class="btn btn-primary" data-testid="upload-btn">Choose File</button>
          </div>
        </div>

        <div class="form-step" data-testid="step-details" data-step="2">
          <h3>NFT Details</h3>
          <div class="form-grid">
            <div class="form-group">
              <label for="nft-name">Name *</label>
              <input type="text" id="nft-name" data-testid="nft-name" placeholder="My Awesome NFT">
            </div>
            <div class="form-group">
              <label for="nft-symbol">Symbol</label>
              <input type="text" id="nft-symbol" data-testid="nft-symbol" placeholder="MAN" maxlength="10">
            </div>
            <div class="form-group full-width">
              <label for="nft-description">Description *</label>
              <textarea id="nft-description" data-testid="nft-description" rows="4" placeholder="Describe your NFT..."></textarea>
            </div>
            <div class="form-group">
              <label for="nft-category">Category</label>
              <select id="nft-category" data-testid="nft-category">
                <option value="art">Art</option>
                <option value="gaming">Gaming</option>
                <option value="music">Music</option>
                <option value="sports">Sports</option>
                <option value="other">Other</option>
              </select>
            </div>
            <div class="form-group">
              <label for="nft-external-url">External URL</label>
              <input type="url" id="nft-external-url" data-testid="nft-external-url" placeholder="https://example.com">
            </div>
          </div>
        </div>

        <div class="form-step" data-testid="step-pricing" data-step="3">
          <h3>Pricing & Royalties</h3>
          <div class="form-grid">
            <div class="form-group">
              <label for="nft-price">Price (SOL)</label>
              <input type="number" id="nft-price" data-testid="nft-price" placeholder="0.0" step="0.001" min="0">
            </div>
            <div class="form-group">
              <label for="nft-royalties">Creator Royalties (%)</label>
              <input type="number" id="nft-royalties" data-testid="nft-royalties" placeholder="5" min="0" max="10">
            </div>
            <div class="form-group">
              <label for="nft-supply">Supply</label>
              <select id="nft-supply" data-testid="nft-supply">
                <option value="1">1 (Unique)</option>
                <option value="10">10</option>
                <option value="100">100</option>
                <option value="1000">1000</option>
              </select>
            </div>
            <div class="form-group">
              <label for="nft-listing-type">Listing Type</label>
              <select id="nft-listing-type" data-testid="nft-listing-type">
                <option value="fixed">Fixed Price</option>
                <option value="auction">Auction</option>
                <option value="offers">Accept Offers Only</option>
              </select>
            </div>
          </div>
        </div>

        <div class="form-step" data-testid="step-attributes" data-step="4">
          <h3>Attributes</h3>
          <div class="attributes-container" data-testid="attributes-container">
            <div class="attribute-item" data-testid="attribute-1">
              <input type="text" placeholder="Trait Type" class="trait-type" data-testid="trait-type-1">
              <input type="text" placeholder="Value" class="trait-value" data-testid="trait-value-1">
              <button class="remove-attribute" data-testid="remove-attribute-1">×</button>
            </div>
          </div>
          <button class="btn btn-outline add-attribute" data-testid="add-attribute">Add Attribute</button>
        </div>

        <div class="form-actions">
          <button class="btn btn-secondary prev-step" data-testid="prev-step" style="display: none;">Previous</button>
          <button class="btn btn-primary next-step" data-testid="next-step">Next</button>
          <button class="btn btn-primary create-nft" data-testid="create-nft" style="display: none;">
            <span class="btn-text">Create NFT</span>
            <div class="btn-loading" data-testid="create-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </button>
        </div>
      </div>
    </div>

    <!-- Collections Section -->
    <div class="marketplace-section" data-testid="collections-content" data-section="collections">
      <div class="section-header">
        <h2>My Collections</h2>
        <button class="btn btn-primary" data-testid="create-collection">Create Collection</button>
      </div>

      <div class="collections-grid" data-testid="collections-grid">
        <div class="collection-item" data-testid="collection-1">
          <div class="collection-image">
            <img src="/placeholder-collection-1.jpg" alt="Collection 1">
          </div>
          <div class="collection-info">
            <h3 class="collection-name">My Art Collection</h3>
            <p class="collection-description">A collection of my digital artwork</p>
            <div class="collection-stats">
              <span class="stat">12 items</span>
              <span class="stat">2.5 SOL floor</span>
              <span class="stat">15.2 SOL volume</span>
            </div>
            <div class="collection-actions">
              <button class="btn btn-outline" data-testid="view-collection">View</button>
              <button class="btn btn-primary" data-testid="edit-collection">Edit</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Profile Section -->
    <div class="marketplace-section" data-testid="profile-content" data-section="profile">
      <div class="section-header">
        <h2>My Profile</h2>
        <button class="btn btn-outline" data-testid="edit-profile">Edit Profile</button>
      </div>

      <div class="profile-content">
        <div class="profile-info">
          <div class="profile-avatar">
            <img src="/placeholder-avatar.jpg" alt="Profile Avatar" data-testid="profile-avatar">
            <button class="change-avatar" data-testid="change-avatar">Change</button>
          </div>
          <div class="profile-details">
            <h3 class="profile-name" data-testid="profile-name">John Doe</h3>
            <p class="profile-username" data-testid="profile-username">@johndoe</p>
            <p class="profile-bio" data-testid="profile-bio">Digital artist and NFT creator</p>
            <div class="profile-stats">
              <div class="stat-item">
                <span class="stat-value" data-testid="stat-nfts">24</span>
                <span class="stat-label">NFTs</span>
              </div>
              <div class="stat-item">
                <span class="stat-value" data-testid="stat-collections">3</span>
                <span class="stat-label">Collections</span>
              </div>
              <div class="stat-item">
                <span class="stat-value" data-testid="stat-sales">156.8</span>
                <span class="stat-label">SOL Earned</span>
              </div>
            </div>
          </div>
        </div>

        <div class="profile-tabs">
          <button class="profile-tab active" data-testid="tab-owned" data-tab="owned">Owned</button>
          <button class="profile-tab" data-testid="tab-created" data-tab="created">Created</button>
          <button class="profile-tab" data-testid="tab-favorites" data-tab="favorites">Favorites</button>
          <button class="profile-tab" data-testid="tab-activity" data-tab="activity">Activity</button>
        </div>

        <div class="profile-content-area">
          <div class="profile-tab-content active" data-testid="owned-content" data-tab="owned">
            <div class="nft-grid">
              <!-- Owned NFTs will be populated here -->
            </div>
          </div>
          <div class="profile-tab-content" data-testid="created-content" data-tab="created">
            <div class="nft-grid">
              <!-- Created NFTs will be populated here -->
            </div>
          </div>
          <div class="profile-tab-content" data-testid="favorites-content" data-tab="favorites">
            <div class="nft-grid">
              <!-- Favorited NFTs will be populated here -->
            </div>
          </div>
          <div class="profile-tab-content" data-testid="activity-content" data-tab="activity">
            <div class="activity-list">
              <!-- Activity items will be populated here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .enhanced-nft-marketplace {
    padding: var(--soladia-space-6);
    max-width: 1400px;
    margin: 0 auto;
    background: var(--soladia-bg-primary);
  }

  .marketplace-header {
    text-align: center;
    margin-bottom: var(--soladia-space-8);
  }

  .marketplace-header h1 {
    font-size: var(--soladia-text-4xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .header-subtitle {
    font-size: var(--soladia-text-xl);
    color: var(--soladia-text-secondary);
    margin: 0;
  }

  .marketplace-nav {
    margin-bottom: var(--soladia-space-8);
  }

  .nav-tabs {
    display: flex;
    background: var(--soladia-bg-secondary);
    border-radius: var(--soladia-radius-xl);
    padding: var(--soladia-space-1);
    overflow-x: auto;
  }

  .nav-tab {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--soladia-space-2);
    padding: var(--soladia-space-3) var(--soladia-space-4);
    background: none;
    border: none;
    border-radius: var(--soladia-radius-lg);
    color: var(--soladia-text-secondary);
    cursor: pointer;
    transition: var(--soladia-transition);
    font-weight: var(--soladia-font-semibold);
    white-space: nowrap;
  }

  .nav-tab.active {
    background: var(--soladia-primary);
    color: white;
  }

  .nav-tab:hover:not(.active) {
    color: var(--soladia-text-primary);
    background: var(--soladia-bg-primary);
  }

  .marketplace-content {
    position: relative;
  }

  .marketplace-section {
    display: none;
  }

  .marketplace-section.active {
    display: block;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--soladia-space-8);
  }

  .section-header h2 {
    font-size: var(--soladia-text-2xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0;
  }

  .section-header p {
    color: var(--soladia-text-secondary);
    margin: var(--soladia-space-2) 0 0 0;
  }

  .header-actions {
    display: flex;
    gap: var(--soladia-space-4);
    align-items: center;
  }

  .search-bar {
    position: relative;
    display: flex;
    align-items: center;
  }

  .search-bar input {
    padding: var(--soladia-space-3) var(--soladia-space-4);
    padding-right: 50px;
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    background: var(--soladia-bg-primary);
    color: var(--soladia-text-primary);
    font-family: var(--soladia-font-primary);
    width: 300px;
  }

  .search-bar input:focus {
    outline: none;
    border-color: var(--soladia-primary);
    box-shadow: 0 0 0 3px rgba(230, 0, 18, 0.1);
  }

  .search-btn {
    position: absolute;
    right: var(--soladia-space-2);
    background: none;
    border: none;
    color: var(--soladia-text-secondary);
    cursor: pointer;
    padding: var(--soladia-space-2);
  }

  .filters-panel {
    background: var(--soladia-bg-secondary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    padding: var(--soladia-space-6);
    margin-bottom: var(--soladia-space-8);
  }

  .filter-group {
    margin-bottom: var(--soladia-space-6);
  }

  .filter-group h3 {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .price-range {
    position: relative;
  }

  .price-range input[type="range"] {
    width: 100%;
    margin-bottom: var(--soladia-space-2);
  }

  .price-labels {
    display: flex;
    justify-content: space-between;
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-secondary);
  }

  .category-filters,
  .status-filters {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-3);
  }

  .filter-option {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-3);
    cursor: pointer;
  }

  .filter-option input[type="checkbox"],
  .filter-option input[type="radio"] {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .checkmark {
    width: 20px;
    height: 20px;
    border: 2px solid var(--soladia-border);
    border-radius: var(--soladia-radius);
    background: var(--soladia-bg-primary);
    position: relative;
    transition: var(--soladia-transition);
  }

  .filter-option input[type="checkbox"]:checked + .checkmark,
  .filter-option input[type="radio"]:checked + .checkmark {
    background: var(--soladia-primary);
    border-color: var(--soladia-primary);
  }

  .filter-option input[type="checkbox"]:checked + .checkmark::after,
  .filter-option input[type="radio"]:checked + .checkmark::after {
    content: '';
    position: absolute;
    left: 6px;
    top: 2px;
    width: 6px;
    height: 10px;
    border: solid white;
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
  }

  .filter-actions {
    display: flex;
    gap: var(--soladia-space-4);
    justify-content: flex-end;
  }

  .nft-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: var(--soladia-space-6);
  }

  .nft-item {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    overflow: hidden;
    transition: var(--soladia-transition);
    cursor: pointer;
  }

  .nft-item:hover {
    transform: translateY(-4px);
    box-shadow: var(--soladia-shadow-lg);
  }

  .nft-image {
    position: relative;
    width: 100%;
    height: 200px;
    overflow: hidden;
  }

  .nft-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .nft-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--soladia-space-3);
    opacity: 0;
    transition: var(--soladia-transition);
  }

  .nft-item:hover .nft-overlay {
    opacity: 1;
  }

  .nft-info {
    padding: var(--soladia-space-4);
  }

  .nft-name {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-1) 0;
  }

  .nft-collection {
    color: var(--soladia-text-secondary);
    margin: 0 0 var(--soladia-space-3) 0;
  }

  .nft-price {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--soladia-space-3);
  }

  .price-amount {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
  }

  .price-usd {
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-secondary);
  }

  .nft-stats {
    display: flex;
    gap: var(--soladia-space-4);
  }

  .stat-item {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-1);
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-secondary);
  }

  .create-form {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-xl);
    padding: var(--soladia-space-8);
  }

  .form-step {
    display: none;
  }

  .form-step.active {
    display: block;
  }

  .form-step h3 {
    font-size: var(--soladia-text-xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-6) 0;
  }

  .upload-area {
    border: 2px dashed var(--soladia-border);
    border-radius: var(--soladia-radius-xl);
    padding: var(--soladia-space-12);
    text-align: center;
    transition: var(--soladia-transition);
    cursor: pointer;
  }

  .upload-area:hover {
    border-color: var(--soladia-primary);
    background: var(--soladia-primary-50);
  }

  .upload-icon {
    color: var(--soladia-text-tertiary);
    margin-bottom: var(--soladia-space-4);
  }

  .upload-area h4 {
    font-size: var(--soladia-text-xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-2) 0;
  }

  .upload-area p {
    color: var(--soladia-text-secondary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--soladia-space-6);
  }

  .form-group.full-width {
    grid-column: 1 / -1;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-2);
  }

  .form-group label {
    font-size: var(--soladia-text-sm);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
  }

  .form-group input,
  .form-group textarea,
  .form-group select {
    padding: var(--soladia-space-3) var(--soladia-space-4);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    background: var(--soladia-bg-primary);
    color: var(--soladia-text-primary);
    font-family: var(--soladia-font-primary);
  }

  .form-group input:focus,
  .form-group textarea:focus,
  .form-group select:focus {
    outline: none;
    border-color: var(--soladia-primary);
    box-shadow: 0 0 0 3px rgba(230, 0, 18, 0.1);
  }

  .attributes-container {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-3);
    margin-bottom: var(--soladia-space-4);
  }

  .attribute-item {
    display: flex;
    gap: var(--soladia-space-3);
    align-items: center;
  }

  .attribute-item input {
    flex: 1;
  }

  .remove-attribute {
    background: var(--soladia-error);
    color: white;
    border: none;
    border-radius: 50%;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }

  .form-actions {
    display: flex;
    gap: var(--soladia-space-4);
    justify-content: flex-end;
    margin-top: var(--soladia-space-8);
  }

  .collections-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: var(--soladia-space-6);
  }

  .collection-item {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    overflow: hidden;
    transition: var(--soladia-transition);
  }

  .collection-item:hover {
    transform: translateY(-2px);
    box-shadow: var(--soladia-shadow-lg);
  }

  .collection-image {
    width: 100%;
    height: 200px;
    overflow: hidden;
  }

  .collection-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .collection-info {
    padding: var(--soladia-space-4);
  }

  .collection-name {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-2) 0;
  }

  .collection-description {
    color: var(--soladia-text-secondary);
    margin: 0 0 var(--soladia-space-3) 0;
  }

  .collection-stats {
    display: flex;
    gap: var(--soladia-space-4);
    margin-bottom: var(--soladia-space-4);
  }

  .collection-stats .stat {
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-secondary);
  }

  .collection-actions {
    display: flex;
    gap: var(--soladia-space-3);
  }

  .profile-content {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-xl);
    padding: var(--soladia-space-8);
  }

  .profile-info {
    display: flex;
    gap: var(--soladia-space-6);
    margin-bottom: var(--soladia-space-8);
  }

  .profile-avatar {
    position: relative;
    width: 120px;
    height: 120px;
  }

  .profile-avatar img {
    width: 100%;
    height: 100%;
    border-radius: 50%;
    object-fit: cover;
  }

  .change-avatar {
    position: absolute;
    bottom: 0;
    right: 0;
    background: var(--soladia-primary);
    color: white;
    border: none;
    border-radius: 50%;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }

  .profile-details {
    flex: 1;
  }

  .profile-name {
    font-size: var(--soladia-text-2xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-1) 0;
  }

  .profile-username {
    color: var(--soladia-text-secondary);
    margin: 0 0 var(--soladia-space-2) 0;
  }

  .profile-bio {
    color: var(--soladia-text-secondary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .profile-stats {
    display: flex;
    gap: var(--soladia-space-6);
  }

  .profile-stats .stat-item {
    text-align: center;
  }

  .profile-stats .stat-value {
    display: block;
    font-size: var(--soladia-text-xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
  }

  .profile-stats .stat-label {
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-secondary);
  }

  .profile-tabs {
    display: flex;
    border-bottom: 1px solid var(--soladia-border);
    margin-bottom: var(--soladia-space-6);
  }

  .profile-tab {
    padding: var(--soladia-space-3) var(--soladia-space-6);
    background: none;
    border: none;
    color: var(--soladia-text-secondary);
    cursor: pointer;
    transition: var(--soladia-transition);
    font-weight: var(--soladia-font-semibold);
  }

  .profile-tab.active {
    color: var(--soladia-primary);
    border-bottom: 2px solid var(--soladia-primary);
  }

  .profile-tab:hover:not(.active) {
    color: var(--soladia-text-primary);
  }

  .profile-tab-content {
    display: none;
  }

  .profile-tab-content.active {
    display: block;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--soladia-space-2);
    padding: var(--soladia-space-3) var(--soladia-space-6);
    border-radius: var(--soladia-radius-lg);
    font-weight: var(--soladia-font-semibold);
    text-decoration: none;
    transition: var(--soladia-transition);
    cursor: pointer;
    border: none;
    font-size: var(--soladia-text-base);
    line-height: 1;
  }

  .btn:focus {
    outline: 2px solid var(--soladia-primary);
    outline-offset: 2px;
  }

  .btn-primary {
    background: var(--soladia-gradient-primary);
    color: white;
    box-shadow: var(--soladia-shadow-primary);
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: var(--soladia-shadow-primary-hover);
  }

  .btn-secondary {
    background: var(--soladia-bg-primary);
    color: var(--soladia-primary);
    border: 2px solid var(--soladia-primary);
  }

  .btn-secondary:hover {
    background: var(--soladia-primary);
    color: white;
    transform: translateY(-2px);
  }

  .btn-outline {
    background: transparent;
    color: var(--soladia-text-primary);
    border: 2px solid var(--soladia-border);
  }

  .btn-outline:hover {
    background: var(--soladia-bg-secondary);
    border-color: var(--soladia-text-primary);
  }

  .btn-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .spinner {
    width: 20px;
    height: 20px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .enhanced-nft-marketplace {
      padding: var(--soladia-space-4);
    }

    .nav-tabs {
      flex-direction: column;
    }

    .section-header {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--soladia-space-4);
    }

    .header-actions {
      width: 100%;
      flex-direction: column;
    }

    .search-bar input {
      width: 100%;
    }

    .form-grid {
      grid-template-columns: 1fr;
    }

    .profile-info {
      flex-direction: column;
      text-align: center;
    }

    .profile-stats {
      justify-content: center;
    }

    .form-actions {
      flex-direction: column;
    }
  }
</style>

<script>
  import { enhancedNFTMarketplaceService } from '../../services/enhanced-nft-marketplace-service';

  class EnhancedNFTMarketplace {
    private marketplaceService: any;
    private currentSection: string;
    private currentStep: number = 1;
    private totalSteps: number = 4;

    constructor() {
      this.marketplaceService = enhancedNFTMarketplaceService;
      this.currentSection = 'explore';
      
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.loadExploreData();
    }

    setupEventListeners() {
      // Section navigation
      document.querySelectorAll('[data-section]').forEach(tab => {
        tab.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          if (target) {
            this.switchSection(target.dataset.section || '');
          }
        });
      });

      // Search functionality
      document.querySelector('[data-testid="search-input"]')?.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        this.handleSearch(target.value);
      });

      document.querySelector('[data-testid="search-btn"]')?.addEventListener('click', () => {
        this.performSearch();
      });

      // Filter functionality
      document.querySelector('[data-testid="filter-toggle"]')?.addEventListener('click', () => {
        this.toggleFilters();
      });

      document.querySelector('[data-testid="apply-filters"]')?.addEventListener('click', () => {
        this.applyFilters();
      });

      document.querySelector('[data-testid="clear-filters"]')?.addEventListener('click', () => {
        this.clearFilters();
      });

      // Create NFT functionality
      document.querySelector('[data-testid="upload-btn"]')?.addEventListener('click', () => {
        const fileInput = document.querySelector('[data-testid="file-input"]') as HTMLInputElement;
        fileInput?.click();
      });

      document.querySelector('[data-testid="file-input"]')?.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        if (target.files) {
          this.handleFileUpload(target.files);
        }
      });

      document.querySelector('[data-testid="next-step"]')?.addEventListener('click', () => {
        this.nextStep();
      });

      document.querySelector('[data-testid="prev-step"]')?.addEventListener('click', () => {
        this.prevStep();
      });

      document.querySelector('[data-testid="add-attribute"]')?.addEventListener('click', () => {
        this.addAttribute();
      });

      document.querySelector('[data-testid="create-nft"]')?.addEventListener('click', () => {
        this.createNFT();
      });

      // Profile functionality
      document.querySelectorAll('[data-tab]').forEach(tab => {
        tab.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          if (target) {
            this.switchProfileTab(target.dataset.tab || '');
          }
        });
      });

      // Quick actions
      document.querySelectorAll('.quick-buy').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const nftId = target.dataset.testid?.replace('quick-buy-', '');
          this.quickBuy(nftId || '');
        });
      });

      document.querySelectorAll('.quick-offer').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const nftId = target.dataset.testid?.replace('quick-offer-', '');
          this.quickOffer(nftId || '');
        });
      });
    }

    switchSection(section: string) {
      this.currentSection = section;

      // Update tab states
      document.querySelectorAll('[data-section]').forEach(tab => {
        const element = tab as HTMLElement;
        element.classList.toggle('active', element.dataset.section === section);
      });

      // Update content
      document.querySelectorAll('[data-section]').forEach(content => {
        const element = content as HTMLElement;
        element.classList.toggle('active', element.dataset.section === section);
      });

      // Load section data
      switch (section) {
        case 'explore':
          this.loadExploreData();
          break;
        case 'create':
          this.resetCreateForm();
          break;
        case 'collections':
          this.loadCollectionsData();
          break;
        case 'profile':
          this.loadProfileData();
          break;
      }
    }

    async loadExploreData() {
      try {
        const nfts = await this.marketplaceService.getNFTs();
        this.renderNFTs(nfts);
      } catch (error) {
        console.error('Error loading NFTs:', error);
      }
    }

    renderNFTs(nfts: any[]) {
      const grid = document.querySelector('[data-testid="nft-grid"]');
      if (!grid) return;

      grid.innerHTML = nfts.map(nft => `
        <div class="nft-item" data-testid="nft-item-${nft.id}">
          <div class="nft-image">
            <img src="${nft.image}" alt="${nft.name}">
            <div class="nft-overlay">
              <button class="btn btn-primary quick-buy" data-testid="quick-buy-${nft.id}">Buy Now</button>
              <button class="btn btn-outline quick-offer" data-testid="quick-offer-${nft.id}">Make Offer</button>
            </div>
          </div>
          <div class="nft-info">
            <h3 class="nft-name">${nft.name}</h3>
            <p class="nft-collection">${nft.collection}</p>
            <div class="nft-price">
              <span class="price-amount">${nft.price} SOL</span>
              <span class="price-usd">≈ $${(nft.price * 50).toFixed(2)}</span>
            </div>
            <div class="nft-stats">
              <span class="stat-item">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
                ${nft.rating}
              </span>
              <span class="stat-item">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"/>
                  <polyline points="16,6 12,2 8,6"/>
                  <line x1="12" y1="2" x2="12" y2="15"/>
                </svg>
                ${nft.sales}
              </span>
            </div>
          </div>
        </div>
      `).join('');
    }

    handleSearch(query: string) {
      // Implement search functionality
      console.log('Searching for:', query);
    }

    performSearch() {
      const input = document.querySelector('[data-testid="search-input"]') as HTMLInputElement;
      const query = input?.value || '';
      this.handleSearch(query);
    }

    toggleFilters() {
      const panel = document.querySelector('[data-testid="filters-panel"]') as HTMLElement;
      if (panel) {
        panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
      }
    }

    applyFilters() {
      // Implement filter application
      console.log('Applying filters');
    }

    clearFilters() {
      // Clear all filter inputs
      document.querySelectorAll('input[type="checkbox"], input[type="radio"]').forEach(input => {
        (input as HTMLInputElement).checked = false;
      });
      
      document.querySelectorAll('input[type="range"]').forEach(input => {
        (input as HTMLInputElement).value = '0';
      });
    }

    handleFileUpload(files: FileList | null) {
      if (!files || files.length === 0) return;

      const file = files[0];
      if (!file) return;
      
      const reader = new FileReader();
      
      reader.onload = (e) => {
        const result = e.target?.result as string;
        this.previewImage(result);
      };
      
      reader.readAsDataURL(file);
    }

    previewImage(imageUrl: string) {
      const uploadArea = document.querySelector('[data-testid="upload-area"]');
      if (uploadArea) {
        uploadArea.innerHTML = `
          <img src="${imageUrl}" alt="Preview" style="max-width: 100%; max-height: 300px; border-radius: 8px;">
          <button class="btn btn-primary" data-testid="change-image">Change Image</button>
        `;
      }
    }

    nextStep() {
      if (this.currentStep < this.totalSteps) {
        this.currentStep++;
        this.updateStep();
      }
    }

    prevStep() {
      if (this.currentStep > 1) {
        this.currentStep--;
        this.updateStep();
      }
    }

    updateStep() {
      // Hide all steps
      document.querySelectorAll('[data-step]').forEach(step => {
        const element = step as HTMLElement;
        element.classList.remove('active');
      });

      // Show current step
      const currentStepElement = document.querySelector(`[data-step="${this.currentStep}"]`);
      if (currentStepElement) {
        currentStepElement.classList.add('active');
      }

      // Update navigation buttons
      const prevBtn = document.querySelector('[data-testid="prev-step"]') as HTMLElement;
      const nextBtn = document.querySelector('[data-testid="next-step"]') as HTMLElement;
      const createBtn = document.querySelector('[data-testid="create-nft"]') as HTMLElement;

      if (prevBtn) {
        prevBtn.style.display = this.currentStep > 1 ? 'block' : 'none';
      }

      if (nextBtn) {
        nextBtn.style.display = this.currentStep < this.totalSteps ? 'block' : 'none';
      }

      if (createBtn) {
        createBtn.style.display = this.currentStep === this.totalSteps ? 'block' : 'none';
      }
    }

    addAttribute() {
      const container = document.querySelector('[data-testid="attributes-container"]');
      if (!container) return;

      const attributeCount = container.children.length + 1;
      const attributeDiv = document.createElement('div');
      attributeDiv.className = 'attribute-item';
      attributeDiv.dataset.testid = `attribute-${attributeCount}`;
      attributeDiv.innerHTML = `
        <input type="text" placeholder="Trait Type" class="trait-type" data-testid="trait-type-${attributeCount}">
        <input type="text" placeholder="Value" class="trait-value" data-testid="trait-value-${attributeCount}">
        <button class="remove-attribute" data-testid="remove-attribute-${attributeCount}">×</button>
      `;
      
      container.appendChild(attributeDiv);
      
      // Add remove functionality
      const removeBtn = attributeDiv.querySelector('.remove-attribute');
      if (removeBtn) {
        removeBtn.addEventListener('click', () => {
          attributeDiv.remove();
        });
      }
    }

    async createNFT() {
      try {
        this.showLoading('create-loading');
        
        const nftData = this.getCreateFormData();
        const result = await this.marketplaceService.createNFT(nftData);
        
        this.showSuccess('NFT created successfully!');
        this.switchSection('profile');

      } catch (error) {
        console.error('Error creating NFT:', error);
        this.showError('Failed to create NFT. Please try again.');
      } finally {
        this.hideLoading('create-loading');
      }
    }

    getCreateFormData() {
      const attributes: Array<{ trait: string; value: string }> = [];
      document.querySelectorAll('.attribute-item').forEach(item => {
        const traitInput = item.querySelector('.trait-type') as HTMLInputElement;
        const valueInput = item.querySelector('.trait-value') as HTMLInputElement;
        const trait = traitInput?.value;
        const value = valueInput?.value;
        if (trait && value) {
          attributes.push({ trait, value });
        }
      });

      return {
        name: (document.querySelector('[data-testid="nft-name"]') as HTMLInputElement)?.value || '',
        symbol: (document.querySelector('[data-testid="nft-symbol"]') as HTMLInputElement)?.value || '',
        description: (document.querySelector('[data-testid="nft-description"]') as HTMLTextAreaElement)?.value || '',
        category: (document.querySelector('[data-testid="nft-category"]') as HTMLSelectElement)?.value || 'art',
        externalUrl: (document.querySelector('[data-testid="nft-external-url"]') as HTMLInputElement)?.value || '',
        price: parseFloat((document.querySelector('[data-testid="nft-price"]') as HTMLInputElement)?.value || '0'),
        royalties: parseFloat((document.querySelector('[data-testid="nft-royalties"]') as HTMLInputElement)?.value || '5'),
        supply: parseInt((document.querySelector('[data-testid="nft-supply"]') as HTMLSelectElement)?.value || '1'),
        listingType: (document.querySelector('[data-testid="nft-listing-type"]') as HTMLSelectElement)?.value || 'fixed',
        attributes
      };
    }

    switchProfileTab(tab: string) {
      // Update tab states
      document.querySelectorAll('[data-tab]').forEach(t => {
        const element = t as HTMLElement;
        element.classList.toggle('active', element.dataset.tab === tab);
      });

      // Update content
      document.querySelectorAll('[data-tab]').forEach(content => {
        const element = content as HTMLElement;
        element.classList.toggle('active', element.dataset.tab === tab);
      });
    }

    async loadCollectionsData() {
      try {
        const collections = await this.marketplaceService.getCollections();
        this.renderCollections(collections);
      } catch (error) {
        console.error('Error loading collections:', error);
      }
    }

    renderCollections(collections: any[]) {
      const grid = document.querySelector('[data-testid="collections-grid"]');
      if (!grid) return;

      grid.innerHTML = collections.map(collection => `
        <div class="collection-item" data-testid="collection-${collection.id}">
          <div class="collection-image">
            <img src="${collection.image}" alt="${collection.name}">
          </div>
          <div class="collection-info">
            <h3 class="collection-name">${collection.name}</h3>
            <p class="collection-description">${collection.description}</p>
            <div class="collection-stats">
              <span class="stat">${collection.itemCount} items</span>
              <span class="stat">${collection.floorPrice} SOL floor</span>
              <span class="stat">${collection.volume} SOL volume</span>
            </div>
            <div class="collection-actions">
              <button class="btn btn-outline" data-testid="view-collection">View</button>
              <button class="btn btn-primary" data-testid="edit-collection">Edit</button>
            </div>
          </div>
        </div>
      `).join('');
    }

    async loadProfileData() {
      try {
        const profile = await this.marketplaceService.getProfile();
        this.renderProfile(profile);
      } catch (error) {
        console.error('Error loading profile:', error);
      }
    }

    renderProfile(profile: any) {
      const nameElement = document.querySelector('[data-testid="profile-name"]');
      const usernameElement = document.querySelector('[data-testid="profile-username"]');
      const bioElement = document.querySelector('[data-testid="profile-bio"]');
      const nftsElement = document.querySelector('[data-testid="stat-nfts"]');
      const collectionsElement = document.querySelector('[data-testid="stat-collections"]');
      const salesElement = document.querySelector('[data-testid="stat-sales"]');

      if (nameElement) nameElement.textContent = profile.name;
      if (usernameElement) usernameElement.textContent = `@${profile.username}`;
      if (bioElement) bioElement.textContent = profile.bio;
      if (nftsElement) nftsElement.textContent = profile.nftCount.toString();
      if (collectionsElement) collectionsElement.textContent = profile.collectionCount.toString();
      if (salesElement) salesElement.textContent = profile.totalSales.toString();
    }

    quickBuy(nftId: string) {
      // Redirect to payment flow
      window.location.href = `/payment?nft=${nftId}&type=buy-now`;
    }

    quickOffer(nftId: string) {
      // Redirect to payment flow
      window.location.href = `/payment?nft=${nftId}&type=make-offer`;
    }

    resetCreateForm() {
      this.currentStep = 1;
      this.updateStep();
      
      // Clear form inputs
      document.querySelectorAll('input, textarea, select').forEach(input => {
        if (input instanceof HTMLInputElement) {
          input.value = '';
        } else if (input instanceof HTMLTextAreaElement) {
          input.value = '';
        } else if (input instanceof HTMLSelectElement) {
          input.selectedIndex = 0;
        }
      });
    }

    showLoading(buttonId: string) {
      const button = document.querySelector(`[data-testid="${buttonId}"]`) as HTMLButtonElement;
      if (button) {
        const btnText = button.querySelector('.btn-text') as HTMLElement;
        const btnLoading = button.querySelector('.btn-loading') as HTMLElement;
        
        if (btnText) btnText.style.display = 'none';
        if (btnLoading) btnLoading.style.display = 'block';
        
        button.disabled = true;
      }
    }

    hideLoading(buttonId: string) {
      const button = document.querySelector(`[data-testid="${buttonId}"]`) as HTMLButtonElement;
      if (button) {
        const btnText = button.querySelector('.btn-text') as HTMLElement;
        const btnLoading = button.querySelector('.btn-loading') as HTMLElement;
        
        if (btnText) btnText.style.display = 'block';
        if (btnLoading) btnLoading.style.display = 'none';
        
        button.disabled = false;
      }
    }

    showSuccess(message: string) {
      console.log('Success:', message);
      // This would typically show a toast notification
    }

    showError(message: string) {
      console.error('Error:', message);
      // This would typically show a toast notification
    }
  }

  // Initialize marketplace when the component loads
  document.addEventListener('DOMContentLoaded', () => {
    new EnhancedNFTMarketplace();
  });
</script>