---
// Enhanced Payment Flows Component
// Complete payment processing with buy now, make offer, and auction functionality
---

<div class="enhanced-payment-flows" data-testid="enhanced-payment-flows">
  <!-- Payment Header -->
  <div class="payment-header">
    <h1>Payment Options</h1>
    <p class="header-subtitle">Choose your preferred payment method for secure transactions</p>
  </div>

  <!-- Payment Methods Tabs -->
  <div class="payment-methods">
    <div class="method-tabs">
      <button class="method-tab active" data-testid="tab-buy-now" data-method="buy-now">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6"/>
        </svg>
        Buy Now
      </button>
      <button class="method-tab" data-testid="tab-make-offer" data-method="make-offer">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
        Make Offer
      </button>
      <button class="method-tab" data-testid="tab-auction" data-method="auction">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
        Auction
      </button>
      <button class="method-tab" data-testid="tab-escrow" data-method="escrow">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
          <circle cx="8.5" cy="8.5" r="1.5"/>
          <polyline points="21,15 16,10 5,21"/>
        </svg>
        Escrow
      </button>
    </div>
  </div>

  <!-- Payment Content -->
  <div class="payment-content">
    <!-- Buy Now Payment -->
    <div class="payment-method active" data-testid="buy-now-content" data-method="buy-now">
      <div class="method-header">
        <h2>Buy Now</h2>
        <p>Complete your purchase instantly with SOL or SPL tokens</p>
      </div>

      <div class="method-body">
        <div class="item-details">
          <div class="item-image">
            <img src="/placeholder-nft.jpg" alt="NFT Item" data-testid="item-image">
          </div>
          <div class="item-info">
            <h3 class="item-name" data-testid="item-name">Amazing NFT #1234</h3>
            <p class="item-collection" data-testid="item-collection">Cool Collection</p>
            <div class="item-price">
              <span class="price-label">Price:</span>
              <span class="price-amount" data-testid="item-price">2.5 SOL</span>
            </div>
            <div class="item-royalties">
              <span class="royalties-label">Creator Royalties:</span>
              <span class="royalties-amount" data-testid="item-royalties">5%</span>
            </div>
          </div>
        </div>

        <div class="payment-options">
          <h3>Payment Method</h3>
          <div class="payment-method-options">
            <label class="payment-option">
              <input type="radio" name="payment-method" value="sol" data-testid="payment-sol" checked>
              <span class="option-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"/>
                  <path d="M8 12l2 2 4-4"/>
                </svg>
              </span>
              <span class="option-text">
                <span class="option-name">SOL</span>
                <span class="option-balance" data-testid="sol-balance">Balance: 5.2 SOL</span>
              </span>
            </label>
            <label class="payment-option">
              <input type="radio" name="payment-method" value="spl" data-testid="payment-spl">
              <span class="option-icon">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                  <circle cx="8.5" cy="8.5" r="1.5"/>
                  <polyline points="21,15 16,10 5,21"/>
                </svg>
              </span>
              <span class="option-text">
                <span class="option-name">SPL Token</span>
                <span class="option-balance" data-testid="spl-balance">Balance: 1,000 USDC</span>
              </span>
            </label>
          </div>
        </div>

        <div class="payment-summary">
          <h3>Payment Summary</h3>
          <div class="summary-item">
            <span>Item Price</span>
            <span data-testid="summary-item-price">2.5 SOL</span>
          </div>
          <div class="summary-item">
            <span>Platform Fee (2.5%)</span>
            <span data-testid="summary-platform-fee">0.0625 SOL</span>
          </div>
          <div class="summary-item">
            <span>Creator Royalty (5%)</span>
            <span data-testid="summary-creator-royalty">0.125 SOL</span>
          </div>
          <div class="summary-item">
            <span>Network Fee</span>
            <span data-testid="summary-network-fee">0.005 SOL</span>
          </div>
          <div class="summary-total">
            <span>Total</span>
            <span data-testid="summary-total">2.6925 SOL</span>
          </div>
        </div>

        <div class="payment-actions">
          <button class="btn btn-secondary cancel-btn" data-testid="cancel-buy-now">Cancel</button>
          <button class="btn btn-primary buy-now-btn" data-testid="confirm-buy-now">
            <span class="btn-text">Buy Now</span>
            <div class="btn-loading" data-testid="buy-now-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </button>
        </div>
      </div>
    </div>

    <!-- Make Offer Payment -->
    <div class="payment-method" data-testid="make-offer-content" data-method="make-offer">
      <div class="method-header">
        <h2>Make Offer</h2>
        <p>Submit an offer for this item. The seller can accept, decline, or counter your offer.</p>
      </div>

      <div class="method-body">
        <div class="offer-form">
          <div class="form-group">
            <label for="offer-amount">Offer Amount (SOL)</label>
            <div class="input-group">
              <input type="number" id="offer-amount" data-testid="offer-amount" placeholder="0.0" step="0.001" min="0">
              <span class="input-suffix">SOL</span>
            </div>
            <div class="input-help">
              <span class="current-price">Current price: 2.5 SOL</span>
              <span class="min-offer">Minimum offer: 0.1 SOL</span>
            </div>
          </div>

          <div class="form-group">
            <label for="offer-expiry">Offer Expiry</label>
            <select id="offer-expiry" data-testid="offer-expiry">
              <option value="24h">24 hours</option>
              <option value="3d">3 days</option>
              <option value="7d">7 days</option>
              <option value="30d">30 days</option>
            </select>
          </div>

          <div class="form-group">
            <label for="offer-message">Message (Optional)</label>
            <textarea id="offer-message" data-testid="offer-message" rows="3" placeholder="Add a message to the seller..."></textarea>
          </div>
        </div>

        <div class="offer-summary">
          <h3>Offer Summary</h3>
          <div class="summary-item">
            <span>Offer Amount</span>
            <span data-testid="offer-summary-amount">0.0 SOL</span>
          </div>
          <div class="summary-item">
            <span>Platform Fee (2.5%)</span>
            <span data-testid="offer-summary-fee">0.0 SOL</span>
          </div>
          <div class="summary-item">
            <span>Network Fee</span>
            <span data-testid="offer-summary-network">0.005 SOL</span>
          </div>
          <div class="summary-total">
            <span>Total Required</span>
            <span data-testid="offer-summary-total">0.005 SOL</span>
          </div>
        </div>

        <div class="payment-actions">
          <button class="btn btn-secondary cancel-btn" data-testid="cancel-offer">Cancel</button>
          <button class="btn btn-primary submit-offer-btn" data-testid="submit-offer">
            <span class="btn-text">Submit Offer</span>
            <div class="btn-loading" data-testid="offer-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </button>
        </div>
      </div>
    </div>

    <!-- Auction Payment -->
    <div class="payment-method" data-testid="auction-content" data-method="auction">
      <div class="method-header">
        <h2>Place Bid</h2>
        <p>Participate in the auction for this item. The highest bidder wins when the auction ends.</p>
      </div>

      <div class="method-body">
        <div class="auction-info">
          <div class="auction-timer" data-testid="auction-timer">
            <div class="timer-label">Time Remaining</div>
            <div class="timer-display">2d 14h 32m 15s</div>
          </div>
          <div class="auction-stats">
            <div class="stat-item">
              <span class="stat-label">Current Bid</span>
              <span class="stat-value" data-testid="current-bid">3.2 SOL</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">Minimum Bid</span>
              <span class="stat-value" data-testid="minimum-bid">3.3 SOL</span>
            </div>
            <div class="stat-item">
              <span class="stat-label">Bid Count</span>
              <span class="stat-value" data-testid="bid-count">12 bids</span>
            </div>
          </div>
        </div>

        <div class="bid-form">
          <div class="form-group">
            <label for="bid-amount">Your Bid (SOL)</label>
            <div class="input-group">
              <input type="number" id="bid-amount" data-testid="bid-amount" placeholder="0.0" step="0.001" min="3.3">
              <span class="input-suffix">SOL</span>
            </div>
            <div class="input-help">
              <span class="min-bid">Minimum bid: 3.3 SOL</span>
            </div>
          </div>

          <div class="form-group">
            <label class="checkbox-label">
              <input type="checkbox" id="auto-bid" data-testid="auto-bid">
              <span class="checkmark"></span>
              Enable auto-bidding (bid up to your maximum)
            </label>
          </div>

          <div class="form-group auto-bid-group" data-testid="auto-bid-group" style="display: none;">
            <label for="max-bid">Maximum Bid (SOL)</label>
            <div class="input-group">
              <input type="number" id="max-bid" data-testid="max-bid" placeholder="0.0" step="0.001" min="3.3">
              <span class="input-suffix">SOL</span>
            </div>
          </div>
        </div>

        <div class="bid-summary">
          <h3>Bid Summary</h3>
          <div class="summary-item">
            <span>Your Bid</span>
            <span data-testid="bid-summary-amount">0.0 SOL</span>
          </div>
          <div class="summary-item">
            <span>Platform Fee (2.5%)</span>
            <span data-testid="bid-summary-fee">0.0 SOL</span>
          </div>
          <div class="summary-item">
            <span>Network Fee</span>
            <span data-testid="bid-summary-network">0.005 SOL</span>
          </div>
          <div class="summary-total">
            <span>Total Required</span>
            <span data-testid="bid-summary-total">0.005 SOL</span>
          </div>
        </div>

        <div class="payment-actions">
          <button class="btn btn-secondary cancel-btn" data-testid="cancel-bid">Cancel</button>
          <button class="btn btn-primary place-bid-btn" data-testid="place-bid">
            <span class="btn-text">Place Bid</span>
            <div class="btn-loading" data-testid="bid-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </button>
        </div>
      </div>
    </div>

    <!-- Escrow Payment -->
    <div class="payment-method" data-testid="escrow-content" data-method="escrow">
      <div class="method-header">
        <h2>Escrow Transaction</h2>
        <p>Secure transaction with escrow protection. Funds are held until both parties confirm.</p>
      </div>

      <div class="method-body">
        <div class="escrow-info">
          <div class="escrow-step active" data-testid="escrow-step-1">
            <div class="step-number">1</div>
            <div class="step-content">
              <h4>Create Escrow</h4>
              <p>Funds are locked in a secure escrow account</p>
            </div>
          </div>
          <div class="escrow-step" data-testid="escrow-step-2">
            <div class="step-number">2</div>
            <div class="step-content">
              <h4>Seller Confirms</h4>
              <p>Seller confirms receipt of the item</p>
            </div>
          </div>
          <div class="escrow-step" data-testid="escrow-step-3">
            <div class="step-number">3</div>
            <div class="step-content">
              <h4>Release Funds</h4>
              <p>Funds are released to the seller</p>
            </div>
          </div>
        </div>

        <div class="escrow-form">
          <div class="form-group">
            <label for="escrow-amount">Transaction Amount (SOL)</label>
            <div class="input-group">
              <input type="number" id="escrow-amount" data-testid="escrow-amount" placeholder="0.0" step="0.001" min="0">
              <span class="input-suffix">SOL</span>
            </div>
          </div>

          <div class="form-group">
            <label for="escrow-duration">Escrow Duration</label>
            <select id="escrow-duration" data-testid="escrow-duration">
              <option value="24h">24 hours</option>
              <option value="3d">3 days</option>
              <option value="7d">7 days</option>
              <option value="14d">14 days</option>
            </select>
          </div>

          <div class="form-group">
            <label for="escrow-description">Transaction Description</label>
            <textarea id="escrow-description" data-testid="escrow-description" rows="3" placeholder="Describe the transaction..."></textarea>
          </div>
        </div>

        <div class="escrow-summary">
          <h3>Escrow Summary</h3>
          <div class="summary-item">
            <span>Transaction Amount</span>
            <span data-testid="escrow-summary-amount">0.0 SOL</span>
          </div>
          <div class="summary-item">
            <span>Escrow Fee (1%)</span>
            <span data-testid="escrow-summary-fee">0.0 SOL</span>
          </div>
          <div class="summary-item">
            <span>Network Fee</span>
            <span data-testid="escrow-summary-network">0.005 SOL</span>
          </div>
          <div class="summary-total">
            <span>Total Required</span>
            <span data-testid="escrow-summary-total">0.005 SOL</span>
          </div>
        </div>

        <div class="payment-actions">
          <button class="btn btn-secondary cancel-btn" data-testid="cancel-escrow">Cancel</button>
          <button class="btn btn-primary create-escrow-btn" data-testid="create-escrow">
            <span class="btn-text">Create Escrow</span>
            <div class="btn-loading" data-testid="escrow-loading" style="display: none;">
              <div class="spinner"></div>
            </div>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .enhanced-payment-flows {
    padding: var(--soladia-space-6);
    max-width: 1200px;
    margin: 0 auto;
    background: var(--soladia-bg-primary);
  }

  .payment-header {
    text-align: center;
    margin-bottom: var(--soladia-space-8);
  }

  .payment-header h1 {
    font-size: var(--soladia-text-4xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .header-subtitle {
    font-size: var(--soladia-text-xl);
    color: var(--soladia-text-secondary);
    margin: 0;
  }

  .payment-methods {
    margin-bottom: var(--soladia-space-8);
  }

  .method-tabs {
    display: flex;
    background: var(--soladia-bg-secondary);
    border-radius: var(--soladia-radius-xl);
    padding: var(--soladia-space-1);
    overflow-x: auto;
  }

  .method-tab {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--soladia-space-2);
    padding: var(--soladia-space-3) var(--soladia-space-4);
    background: none;
    border: none;
    border-radius: var(--soladia-radius-lg);
    color: var(--soladia-text-secondary);
    cursor: pointer;
    transition: var(--soladia-transition);
    font-weight: var(--soladia-font-semibold);
    white-space: nowrap;
  }

  .method-tab.active {
    background: var(--soladia-primary);
    color: white;
  }

  .method-tab:hover:not(.active) {
    color: var(--soladia-text-primary);
    background: var(--soladia-bg-primary);
  }

  .payment-content {
    position: relative;
  }

  .payment-method {
    display: none;
  }

  .payment-method.active {
    display: block;
  }

  .method-header {
    margin-bottom: var(--soladia-space-8);
  }

  .method-header h2 {
    font-size: var(--soladia-text-2xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-2) 0;
  }

  .method-header p {
    color: var(--soladia-text-secondary);
    margin: 0;
  }

  .method-body {
    background: var(--soladia-bg-primary);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-xl);
    padding: var(--soladia-space-8);
    box-shadow: var(--soladia-shadow-lg);
  }

  .item-details {
    display: flex;
    gap: var(--soladia-space-6);
    margin-bottom: var(--soladia-space-8);
    padding-bottom: var(--soladia-space-6);
    border-bottom: 1px solid var(--soladia-border);
  }

  .item-image {
    width: 120px;
    height: 120px;
    border-radius: var(--soladia-radius-lg);
    overflow: hidden;
    background: var(--soladia-bg-secondary);
  }

  .item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .item-info {
    flex: 1;
  }

  .item-name {
    font-size: var(--soladia-text-xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-2) 0;
  }

  .item-collection {
    color: var(--soladia-text-secondary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .item-price,
  .item-royalties {
    display: flex;
    justify-content: space-between;
    margin-bottom: var(--soladia-space-2);
  }

  .price-label,
  .royalties-label {
    color: var(--soladia-text-secondary);
  }

  .price-amount,
  .royalties-amount {
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
  }

  .payment-options {
    margin-bottom: var(--soladia-space-8);
  }

  .payment-options h3 {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .payment-method-options {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-3);
  }

  .payment-option {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-3);
    padding: var(--soladia-space-4);
    border: 2px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    cursor: pointer;
    transition: var(--soladia-transition);
  }

  .payment-option:hover {
    border-color: var(--soladia-primary);
  }

  .payment-option input[type="radio"] {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .payment-option input[type="radio"]:checked + .option-icon {
    color: var(--soladia-primary);
  }

  .payment-option input[type="radio"]:checked ~ .option-text {
    color: var(--soladia-primary);
  }

  .option-icon {
    color: var(--soladia-text-secondary);
    transition: var(--soladia-transition);
  }

  .option-text {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-1);
  }

  .option-name {
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
  }

  .option-balance {
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-secondary);
  }

  .payment-summary,
  .offer-summary,
  .bid-summary,
  .escrow-summary {
    background: var(--soladia-bg-secondary);
    border-radius: var(--soladia-radius-lg);
    padding: var(--soladia-space-6);
    margin-bottom: var(--soladia-space-8);
  }

  .payment-summary h3,
  .offer-summary h3,
  .bid-summary h3,
  .escrow-summary h3 {
    font-size: var(--soladia-text-lg);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    margin: 0 0 var(--soladia-space-4) 0;
  }

  .summary-item {
    display: flex;
    justify-content: space-between;
    margin-bottom: var(--soladia-space-2);
    color: var(--soladia-text-secondary);
  }

  .summary-total {
    display: flex;
    justify-content: space-between;
    margin-top: var(--soladia-space-4);
    padding-top: var(--soladia-space-4);
    border-top: 1px solid var(--soladia-border);
    font-weight: var(--soladia-font-bold);
    font-size: var(--soladia-text-lg);
    color: var(--soladia-text-primary);
  }

  .payment-actions {
    display: flex;
    gap: var(--soladia-space-4);
    justify-content: flex-end;
  }

  .form-group {
    margin-bottom: var(--soladia-space-6);
  }

  .form-group label {
    display: block;
    font-size: var(--soladia-text-sm);
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
    margin-bottom: var(--soladia-space-2);
  }

  .input-group {
    position: relative;
    display: flex;
    align-items: center;
  }

  .input-group input {
    flex: 1;
    padding: var(--soladia-space-3) var(--soladia-space-4);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    background: var(--soladia-bg-primary);
    color: var(--soladia-text-primary);
    font-family: var(--soladia-font-primary);
  }

  .input-group input:focus {
    outline: none;
    border-color: var(--soladia-primary);
    box-shadow: 0 0 0 3px rgba(230, 0, 18, 0.1);
  }

  .input-suffix {
    position: absolute;
    right: var(--soladia-space-4);
    color: var(--soladia-text-secondary);
    font-weight: var(--soladia-font-semibold);
  }

  .input-help {
    display: flex;
    justify-content: space-between;
    margin-top: var(--soladia-space-2);
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-tertiary);
  }

  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: var(--soladia-space-3) var(--soladia-space-4);
    border: 1px solid var(--soladia-border);
    border-radius: var(--soladia-radius-lg);
    background: var(--soladia-bg-primary);
    color: var(--soladia-text-primary);
    font-family: var(--soladia-font-primary);
  }

  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--soladia-primary);
    box-shadow: 0 0 0 3px rgba(230, 0, 18, 0.1);
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: var(--soladia-space-3);
    cursor: pointer;
  }

  .checkbox-label input[type="checkbox"] {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .checkmark {
    width: 20px;
    height: 20px;
    border: 2px solid var(--soladia-border);
    border-radius: var(--soladia-radius);
    background: var(--soladia-bg-primary);
    position: relative;
    transition: var(--soladia-transition);
  }

  .checkbox-label input[type="checkbox"]:checked + .checkmark {
    background: var(--soladia-primary);
    border-color: var(--soladia-primary);
  }

  .checkbox-label input[type="checkbox"]:checked + .checkmark::after {
    content: '';
    position: absolute;
    left: 6px;
    top: 2px;
    width: 6px;
    height: 10px;
    border: solid white;
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
  }

  .auction-info {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: var(--soladia-space-6);
    margin-bottom: var(--soladia-space-8);
    padding: var(--soladia-space-6);
    background: var(--soladia-bg-secondary);
    border-radius: var(--soladia-radius-lg);
  }

  .auction-timer {
    text-align: center;
  }

  .timer-label {
    font-size: var(--soladia-text-sm);
    color: var(--soladia-text-secondary);
    margin-bottom: var(--soladia-space-2);
  }

  .timer-display {
    font-size: var(--soladia-text-2xl);
    font-weight: var(--soladia-font-bold);
    color: var(--soladia-primary);
  }

  .auction-stats {
    display: flex;
    flex-direction: column;
    gap: var(--soladia-space-4);
  }

  .stat-item {
    display: flex;
    justify-content: space-between;
  }

  .stat-label {
    color: var(--soladia-text-secondary);
  }

  .stat-value {
    font-weight: var(--soladia-font-semibold);
    color: var(--soladia-text-primary);
  }

  .escrow-info {
    display: flex;
    gap: var(--soladia-space-4);
    margin-bottom: var(--soladia-space-8);
    padding: var(--soladia-space-6);
    background: var(--soladia-bg-secondary);
    border-radius: var(--soladia-radius-lg);
  }

  .escrow-step {
    flex: 1;
    display: flex;
    align-items: center;
    gap: var(--soladia-space-3);
    padding: var(--soladia-space-4);
    border-radius: var(--soladia-radius-lg);
    transition: var(--soladia-transition);
  }

  .escrow-step.active {
    background: var(--soladia-primary);
    color: white;
  }

  .step-number {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: var(--soladia-bg-tertiary);
    color: var(--soladia-text-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: var(--soladia-font-bold);
  }

  .escrow-step.active .step-number {
    background: white;
    color: var(--soladia-primary);
  }

  .step-content h4 {
    font-size: var(--soladia-text-base);
    font-weight: var(--soladia-font-semibold);
    margin: 0 0 var(--soladia-space-1) 0;
  }

  .step-content p {
    font-size: var(--soladia-text-sm);
    margin: 0;
    opacity: 0.8;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--soladia-space-2);
    padding: var(--soladia-space-3) var(--soladia-space-6);
    border-radius: var(--soladia-radius-lg);
    font-weight: var(--soladia-font-semibold);
    text-decoration: none;
    transition: var(--soladia-transition);
    cursor: pointer;
    border: none;
    font-size: var(--soladia-text-base);
    line-height: 1;
  }

  .btn:focus {
    outline: 2px solid var(--soladia-primary);
    outline-offset: 2px;
  }

  .btn-primary {
    background: var(--soladia-gradient-primary);
    color: white;
    box-shadow: var(--soladia-shadow-primary);
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: var(--soladia-shadow-primary-hover);
  }

  .btn-secondary {
    background: var(--soladia-bg-primary);
    color: var(--soladia-primary);
    border: 2px solid var(--soladia-primary);
  }

  .btn-secondary:hover {
    background: var(--soladia-primary);
    color: white;
    transform: translateY(-2px);
  }

  .btn-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .spinner {
    width: 20px;
    height: 20px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .enhanced-payment-flows {
      padding: var(--soladia-space-4);
    }

    .method-tabs {
      flex-direction: column;
    }

    .item-details {
      flex-direction: column;
      text-align: center;
    }

    .auction-info {
      grid-template-columns: 1fr;
    }

    .escrow-info {
      flex-direction: column;
    }

    .payment-actions {
      flex-direction: column;
    }
  }
</style>

<script>
  import { enhancedPaymentProcessor } from '../../services/enhanced-payment-processor';

  class EnhancedPaymentFlows {
    private paymentProcessor: any;
    private currentMethod: string;
    private currentItem: any;

    constructor() {
      this.paymentProcessor = enhancedPaymentProcessor;
      this.currentMethod = 'buy-now';
      this.currentItem = this.getCurrentItem();
      
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.updatePaymentSummary();
    }

    setupEventListeners() {
      // Method tab switching
      document.querySelectorAll('[data-method]').forEach(tab => {
        tab.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          if (target) {
            this.switchMethod(target.dataset.method || '');
          }
        });
      });

      // Payment method selection
      document.querySelectorAll('input[name="payment-method"]').forEach(radio => {
        radio.addEventListener('change', () => {
          this.updatePaymentSummary();
        });
      });

      // Buy now functionality
      document.querySelector('[data-testid="confirm-buy-now"]')?.addEventListener('click', () => {
        this.processBuyNow();
      });

      // Offer functionality
      document.querySelector('[data-testid="offer-amount"]')?.addEventListener('input', () => {
        this.updateOfferSummary();
      });

      document.querySelector('[data-testid="submit-offer"]')?.addEventListener('click', () => {
        this.submitOffer();
      });

      // Bid functionality
      document.querySelector('[data-testid="bid-amount"]')?.addEventListener('input', () => {
        this.updateBidSummary();
      });

      document.querySelector('[data-testid="auto-bid"]')?.addEventListener('change', (e) => {
        const target = e.target as HTMLInputElement;
        this.toggleAutoBid(target.checked);
      });

      document.querySelector('[data-testid="place-bid"]')?.addEventListener('click', () => {
        this.placeBid();
      });

      // Escrow functionality
      document.querySelector('[data-testid="escrow-amount"]')?.addEventListener('input', () => {
        this.updateEscrowSummary();
      });

      document.querySelector('[data-testid="create-escrow"]')?.addEventListener('click', () => {
        this.createEscrow();
      });

      // Cancel buttons
      document.querySelectorAll('.cancel-btn').forEach(btn => {
        btn.addEventListener('click', () => {
          this.cancelPayment();
        });
      });
    }

    switchMethod(method: string) {
      this.currentMethod = method;

      // Update tab states
      document.querySelectorAll('[data-method]').forEach(tab => {
        const element = tab as HTMLElement;
        element.classList.toggle('active', element.dataset.method === method);
      });

      // Update content
      document.querySelectorAll('[data-method]').forEach(content => {
        const element = content as HTMLElement;
        element.classList.toggle('active', element.dataset.method === method);
      });
    }

    async processBuyNow() {
      try {
        this.showLoading('buy-now-loading');
        
        const paymentMethod = this.getSelectedPaymentMethod();
        const amount = this.getItemPrice();
        
        const result = await this.paymentProcessor.processDirectPayment({
          recipient: this.currentItem.seller,
          amount: amount,
          tokenMint: paymentMethod === 'spl' ? this.getSPLTokenMint() : null
        });

        this.showSuccess('Payment completed successfully!');
        this.redirectToSuccess();

      } catch (error) {
        console.error('Error processing payment:', error);
        this.showError('Payment failed. Please try again.');
      } finally {
        this.hideLoading('buy-now-loading');
      }
    }

    async submitOffer() {
      try {
        this.showLoading('offer-loading');
        
        const amount = parseFloat((document.querySelector('[data-testid="offer-amount"]') as HTMLInputElement)?.value || '0');
        const expiry = (document.querySelector('[data-testid="offer-expiry"]') as HTMLSelectElement)?.value || '24h';
        const message = (document.querySelector('[data-testid="offer-message"]') as HTMLTextAreaElement)?.value || '';

        if (amount <= 0) {
          throw new Error('Please enter a valid offer amount');
        }

        const result = await this.paymentProcessor.createOffer({
          itemId: this.currentItem.id,
          amount: amount,
          expiry: expiry,
          message: message
        });

        this.showSuccess('Offer submitted successfully!');
        this.redirectToOffers();

      } catch (error) {
        console.error('Error submitting offer:', error);
        this.showError('Failed to submit offer. Please try again.');
      } finally {
        this.hideLoading('offer-loading');
      }
    }

    async placeBid() {
      try {
        this.showLoading('bid-loading');
        
        const amount = parseFloat((document.querySelector('[data-testid="bid-amount"]') as HTMLInputElement)?.value || '0');
        const maxBid = parseFloat((document.querySelector('[data-testid="max-bid"]') as HTMLInputElement)?.value || '0');
        const autoBid = (document.querySelector('[data-testid="auto-bid"]') as HTMLInputElement)?.checked || false;

        if (amount <= 0) {
          throw new Error('Please enter a valid bid amount');
        }

        const result = await this.paymentProcessor.placeBid({
          auctionId: this.currentItem.auctionId,
          amount: amount,
          maxBid: autoBid ? maxBid : null
        });

        this.showSuccess('Bid placed successfully!');
        this.updateAuctionInfo();

      } catch (error) {
        console.error('Error placing bid:', error);
        this.showError('Failed to place bid. Please try again.');
      } finally {
        this.hideLoading('bid-loading');
      }
    }

    async createEscrow() {
      try {
        this.showLoading('escrow-loading');
        
        const amount = parseFloat((document.querySelector('[data-testid="escrow-amount"]') as HTMLInputElement)?.value || '0');
        const duration = (document.querySelector('[data-testid="escrow-duration"]') as HTMLSelectElement)?.value || '24h';
        const description = (document.querySelector('[data-testid="escrow-description"]') as HTMLTextAreaElement)?.value || '';

        if (amount <= 0) {
          throw new Error('Please enter a valid amount');
        }

        const result = await this.paymentProcessor.createEscrow({
          recipient: this.currentItem.seller,
          amount: amount,
          duration: duration,
          description: description
        });

        this.showSuccess('Escrow created successfully!');
        this.redirectToEscrow(result.escrowId);

      } catch (error) {
        console.error('Error creating escrow:', error);
        this.showError('Failed to create escrow. Please try again.');
      } finally {
        this.hideLoading('escrow-loading');
      }
    }

    updatePaymentSummary() {
      const itemPrice = this.getItemPrice();
      const platformFee = itemPrice * 0.025;
      const creatorRoyalty = itemPrice * 0.05;
      const networkFee = 0.005;
      const total = itemPrice + platformFee + creatorRoyalty + networkFee;

      document.querySelector('[data-testid="summary-item-price"]')!.textContent = `${itemPrice} SOL`;
      document.querySelector('[data-testid="summary-platform-fee"]')!.textContent = `${platformFee.toFixed(4)} SOL`;
      document.querySelector('[data-testid="summary-creator-royalty"]')!.textContent = `${creatorRoyalty.toFixed(4)} SOL`;
      document.querySelector('[data-testid="summary-network-fee"]')!.textContent = `${networkFee} SOL`;
      document.querySelector('[data-testid="summary-total"]')!.textContent = `${total.toFixed(4)} SOL`;
    }

    updateOfferSummary() {
      const amount = parseFloat((document.querySelector('[data-testid="offer-amount"]') as HTMLInputElement)?.value || '0');
      const platformFee = amount * 0.025;
      const networkFee = 0.005;
      const total = platformFee + networkFee;

      document.querySelector('[data-testid="offer-summary-amount"]')!.textContent = `${amount} SOL`;
      document.querySelector('[data-testid="offer-summary-fee"]')!.textContent = `${platformFee.toFixed(4)} SOL`;
      document.querySelector('[data-testid="offer-summary-total"]')!.textContent = `${total.toFixed(4)} SOL`;
    }

    updateBidSummary() {
      const amount = parseFloat((document.querySelector('[data-testid="bid-amount"]') as HTMLInputElement)?.value || '0');
      const platformFee = amount * 0.025;
      const networkFee = 0.005;
      const total = platformFee + networkFee;

      document.querySelector('[data-testid="bid-summary-amount"]')!.textContent = `${amount} SOL`;
      document.querySelector('[data-testid="bid-summary-fee"]')!.textContent = `${platformFee.toFixed(4)} SOL`;
      document.querySelector('[data-testid="bid-summary-total"]')!.textContent = `${total.toFixed(4)} SOL`;
    }

    updateEscrowSummary() {
      const amount = parseFloat((document.querySelector('[data-testid="escrow-amount"]') as HTMLInputElement)?.value || '0');
      const escrowFee = amount * 0.01;
      const networkFee = 0.005;
      const total = escrowFee + networkFee;

      document.querySelector('[data-testid="escrow-summary-amount"]')!.textContent = `${amount} SOL`;
      document.querySelector('[data-testid="escrow-summary-fee"]')!.textContent = `${escrowFee.toFixed(4)} SOL`;
      document.querySelector('[data-testid="escrow-summary-total"]')!.textContent = `${total.toFixed(4)} SOL`;
    }

    toggleAutoBid(enabled: boolean) {
      const autoBidGroup = document.querySelector('[data-testid="auto-bid-group"]') as HTMLElement;
      if (autoBidGroup) {
        autoBidGroup.style.display = enabled ? 'block' : 'none';
      }
    }

    getSelectedPaymentMethod(): string {
      const selected = document.querySelector('input[name="payment-method"]:checked') as HTMLInputElement;
      return selected?.value || 'sol';
    }

    getItemPrice(): number {
      return 2.5; // This would come from the current item data
    }

    getSPLTokenMint(): string {
      return 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'; // USDC mint
    }

    getCurrentItem(): any {
      return {
        id: 'item-123',
        name: 'Amazing NFT #1234',
        collection: 'Cool Collection',
        price: 2.5,
        seller: 'seller-address',
        auctionId: 'auction-123'
      };
    }

    showLoading(buttonId: string) {
      const button = document.querySelector(`[data-testid="${buttonId}"]`) as HTMLButtonElement;
      if (button) {
        const btnText = button.querySelector('.btn-text') as HTMLElement;
        const btnLoading = button.querySelector('.btn-loading') as HTMLElement;
        
        if (btnText) btnText.style.display = 'none';
        if (btnLoading) btnLoading.style.display = 'block';
        
        button.disabled = true;
      }
    }

    hideLoading(buttonId: string) {
      const button = document.querySelector(`[data-testid="${buttonId}"]`) as HTMLButtonElement;
      if (button) {
        const btnText = button.querySelector('.btn-text') as HTMLElement;
        const btnLoading = button.querySelector('.btn-loading') as HTMLElement;
        
        if (btnText) btnText.style.display = 'block';
        if (btnLoading) btnLoading.style.display = 'none';
        
        button.disabled = false;
      }
    }

    showSuccess(message: string) {
      console.log('Success:', message);
      // This would typically show a toast notification
    }

    showError(message: string) {
      console.error('Error:', message);
      // This would typically show a toast notification
    }

    cancelPayment() {
      // Handle payment cancellation
      window.history.back();
    }

    redirectToSuccess() {
      window.location.href = '/payment/success';
    }

    redirectToOffers() {
      window.location.href = '/offers';
    }

    redirectToEscrow(escrowId: string) {
      window.location.href = `/escrow/${escrowId}`;
    }

    updateAuctionInfo() {
      // Update auction information after placing a bid
      // This would fetch fresh data from the server
    }
  }

  // Initialize payment flows when the component loads
  document.addEventListener('DOMContentLoaded', () => {
    new EnhancedPaymentFlows();
  });
</script>
