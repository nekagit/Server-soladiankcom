---
// SolanaPaymentForm.astro - Payment form with Solana integration
---

<div id="solana-payment-form" class="payment-form">
  <div class="form-header">
    <h3 class="form-title">Solana Payment</h3>
    <div class="wallet-status" id="wallet-status">
      <!-- Wallet status will be populated here -->
    </div>
  </div>

  <form id="payment-form" class="payment-form-content">
    <!-- Payment Amount -->
    <div class="form-group">
      <label for="payment-amount" class="form-label">Amount</label>
      <div class="amount-input-group">
        <input 
          type="number" 
          id="payment-amount" 
          name="amount" 
          class="form-input amount-input"
          placeholder="0.00"
          step="0.000001"
          min="0"
          required
        />
        <select id="currency-select" name="currency" class="currency-select">
          <option value="SOL">SOL</option>
          <option value="USDC">USDC</option>
          <option value="USDT">USDT</option>
        </select>
      </div>
      <div class="amount-conversion" id="amount-conversion">
        <!-- Conversion rate will be shown here -->
      </div>
    </div>

    <!-- Recipient Address -->
    <div class="form-group">
      <label for="recipient-address" class="form-label">Recipient Address</label>
      <div class="address-input-group">
        <input 
          type="text" 
          id="recipient-address" 
          name="recipient" 
          class="form-input address-input"
          placeholder="Enter Solana address..."
          required
        />
        <button type="button" class="paste-btn" id="paste-address">
          <span>ðŸ“‹</span>
        </button>
      </div>
      <div class="address-validation" id="address-validation">
        <!-- Address validation will be shown here -->
      </div>
    </div>

    <!-- Memo (Optional) -->
    <div class="form-group">
      <label for="payment-memo" class="form-label">Memo (Optional)</label>
      <input 
        type="text" 
        id="payment-memo" 
        name="memo" 
        class="form-input"
        placeholder="Add a note for this payment..."
        maxlength="100"
      />
    </div>

    <!-- Payment Method -->
    <div class="form-group">
      <label class="form-label">Payment Method</label>
      <div class="payment-methods">
        <label class="payment-method-option">
          <input type="radio" name="payment-method" value="direct" checked>
          <div class="option-content">
            <span class="option-icon">âš¡</span>
            <div class="option-text">
              <span class="option-title">Direct Payment</span>
              <span class="option-description">Send directly to recipient</span>
            </div>
          </div>
        </label>
        <label class="payment-method-option">
          <input type="radio" name="payment-method" value="escrow">
          <div class="option-content">
            <span class="option-icon">ðŸ”’</span>
            <div class="option-text">
              <span class="option-title">Escrow Payment</span>
              <span class="option-description">Secure payment with escrow protection</span>
            </div>
          </div>
        </label>
      </div>
    </div>

    <!-- Transaction Fee -->
    <div class="form-group">
      <div class="fee-info">
        <span class="fee-label">Transaction Fee:</span>
        <span class="fee-amount" id="transaction-fee">0.000005 SOL</span>
      </div>
      <div class="total-info">
        <span class="total-label">Total Amount:</span>
        <span class="total-amount" id="total-amount">0.00 SOL</span>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="form-actions">
      <button type="button" class="btn-secondary" id="cancel-btn">
        Cancel
      </button>
      <button type="submit" class="btn-primary" id="submit-btn" disabled>
        <span class="btn-icon">ðŸ’³</span>
        Send Payment
      </button>
    </div>
  </form>

  <!-- Transaction Progress -->
  <div class="transaction-progress" id="transaction-progress" style="display: none;">
    <div class="progress-header">
      <h4 class="progress-title">Processing Payment</h4>
      <div class="progress-status" id="progress-status">Creating transaction...</div>
    </div>
    <div class="progress-bar">
      <div class="progress-fill" id="progress-fill"></div>
    </div>
    <div class="transaction-details" id="transaction-details">
      <!-- Transaction details will be shown here -->
    </div>
  </div>
</div>

<script>
  import { enhancedSolanaWalletService } from '../../services/solana/solana-wallet';
  import { solanaTransactionService } from '../../services/solana/solana-transaction';
  import { solanaTokenService } from '../../services/solana/solana-token';
  import { solanaEscrowService } from '../../services/solana/solana-escrow';

  class SolanaPaymentForm {
    private form: HTMLFormElement | null = null;
    private amountInput: HTMLInputElement | null = null;
    private recipientInput: HTMLInputElement | null = null;
    private currencySelect: HTMLSelectElement | null = null;
    private submitBtn: HTMLButtonElement | null = null;
    private cancelBtn: HTMLButtonElement | null = null;
    private walletStatus: HTMLElement | null = null;
    private addressValidation: HTMLElement | null = null;
    private amountConversion: HTMLElement | null = null;
    private transactionFee: HTMLElement | null = null;
    private totalAmount: HTMLElement | null = null;
    private transactionProgress: HTMLElement | null = null;
    private progressStatus: HTMLElement | null = null;
    private progressFill: HTMLElement | null = null;
    private transactionDetails: HTMLElement | null = null;

    constructor() {
      this.initializeElements();
      this.setupEventListeners();
      this.updateWalletStatus();
      this.updateFormValidation();
    }

    private initializeElements() {
      this.form = document.getElementById('payment-form') as HTMLFormElement;
      this.amountInput = document.getElementById('payment-amount') as HTMLInputElement;
      this.recipientInput = document.getElementById('recipient-address') as HTMLInputElement;
      this.currencySelect = document.getElementById('currency-select') as HTMLSelectElement;
      this.submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
      this.cancelBtn = document.getElementById('cancel-btn') as HTMLButtonElement;
      this.walletStatus = document.getElementById('wallet-status');
      this.addressValidation = document.getElementById('address-validation');
      this.amountConversion = document.getElementById('amount-conversion');
      this.transactionFee = document.getElementById('transaction-fee');
      this.totalAmount = document.getElementById('total-amount');
      this.transactionProgress = document.getElementById('transaction-progress');
      this.progressStatus = document.getElementById('progress-status');
      this.progressFill = document.getElementById('progress-fill');
      this.transactionDetails = document.getElementById('transaction-details');
    }

    private setupEventListeners() {
      // Form submission
      this.form?.addEventListener('submit', (e) => this.handleSubmit(e));

      // Amount input changes
      this.amountInput?.addEventListener('input', () => this.updateAmountCalculation());
      this.currencySelect?.addEventListener('change', () => this.updateAmountCalculation());

      // Recipient address validation
      this.recipientInput?.addEventListener('input', () => this.validateAddress());

      // Paste address button
      const pasteBtn = document.getElementById('paste-address');
      pasteBtn?.addEventListener('click', () => this.pasteAddress());

      // Cancel button
      this.cancelBtn?.addEventListener('click', () => this.cancelPayment());

      // Wallet status updates
      enhancedSolanaWalletService.on('wallet:connected', () => this.updateWalletStatus());
      enhancedSolanaWalletService.on('wallet:disconnected', () => this.updateWalletStatus());
    }

    private updateWalletStatus() {
      if (!this.walletStatus) return;

      const isConnected = enhancedSolanaWalletService.isConnected();
      const wallet = enhancedSolanaWalletService.getWallet();

      if (isConnected && wallet) {
        this.walletStatus.innerHTML = `
          <div class="wallet-connected">
            <span class="wallet-provider">${wallet.provider}</span>
            <span class="wallet-address">${enhancedSolanaWalletService.formatAddress(wallet.publicKey)}</span>
            <span class="wallet-balance">${wallet.balance.toFixed(4)} SOL</span>
          </div>
        `;
        this.updateFormValidation();
      } else {
        this.walletStatus.innerHTML = `
          <div class="wallet-disconnected">
            <span class="disconnected-text">No wallet connected</span>
            <button class="connect-wallet-btn" id="connect-wallet-btn">Connect Wallet</button>
          </div>
        `;

        // Add connect wallet button event listener
        const connectBtn = document.getElementById('connect-wallet-btn');
        connectBtn?.addEventListener('click', () => {
          window.openWalletConnect?.();
        });
      }
    }

    private updateFormValidation() {
      const isConnected = enhancedSolanaWalletService.isConnected();
      const hasAmount = this.amountInput?.value && parseFloat(this.amountInput.value) > 0;
      const hasRecipient = this.recipientInput?.value && this.isValidAddress(this.recipientInput.value);

      if (this.submitBtn) {
        this.submitBtn.disabled = !(isConnected && hasAmount && hasRecipient);
      }
    }

    private async validateAddress() {
      if (!this.recipientInput || !this.addressValidation) return;

      const address = this.recipientInput.value.trim();
      
      if (!address) {
        this.addressValidation.innerHTML = '';
        this.updateFormValidation();
        return;
      }

      if (this.isValidAddress(address)) {
        this.addressValidation.innerHTML = `
          <span class="validation-success">âœ“ Valid Solana address</span>
        `;
      } else {
        this.addressValidation.innerHTML = `
          <span class="validation-error">âœ— Invalid Solana address</span>
        `;
      }

      this.updateFormValidation();
    }

    private isValidAddress(address: string): boolean {
      // Basic Solana address validation
      return /^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(address);
    }

    private async updateAmountCalculation() {
      if (!this.amountInput || !this.currencySelect || !this.transactionFee || !this.totalAmount) return;

      const amount = parseFloat(this.amountInput.value) || 0;
      const currency = this.currencySelect.value;

      // Calculate transaction fee (mock)
      const fee = await this.calculateTransactionFee(amount, currency);
      const total = amount + fee;

      this.transactionFee.textContent = `${fee.toFixed(6)} SOL`;
      this.totalAmount.textContent = `${total.toFixed(6)} ${currency}`;

      // Update conversion rate
      this.updateConversionRate(amount, currency);

      this.updateFormValidation();
    }

    private async calculateTransactionFee(amount: number, currency: string): Promise<number> {
      try {
        if (currency === 'SOL') {
          return await solanaTransactionService.estimateTransactionFee('', '', amount);
        } else {
          // For SPL tokens, fee is typically just the SOL fee
          return 0.000005;
        }
      } catch (error) {
        console.error('Failed to calculate transaction fee:', error);
        return 0.000005; // Default fee
      }
    }

    private updateConversionRate(amount: number, currency: string) {
      if (!this.amountConversion) return;

      if (currency === 'SOL') {
        this.amountConversion.innerHTML = '';
        return;
      }

      // Mock conversion rates
      const rates: { [key: string]: number } = {
        'USDC': 100,
        'USDT': 100
      };

      const rate = rates[currency] || 1;
      const solAmount = amount / rate;

      this.amountConversion.innerHTML = `
        <span class="conversion-text">â‰ˆ ${solAmount.toFixed(6)} SOL</span>
      `;
    }

    private async pasteAddress() {
      try {
        const text = await navigator.clipboard.readText();
        if (this.recipientInput) {
          this.recipientInput.value = text;
          this.validateAddress();
        }
        this.showNotification('Address pasted from clipboard', 'success');
      } catch (error) {
        this.showNotification('Failed to paste from clipboard', 'error');
      }
    }

    private async handleSubmit(e: Event) {
      e.preventDefault();
      
      if (!this.form || !this.amountInput || !this.recipientInput) return;

      const formData = new FormData(this.form);
      const amount = parseFloat(formData.get('amount') as string);
      const recipient = formData.get('recipient') as string;
      const memo = formData.get('memo') as string;
      const currency = formData.get('currency') as string;
      const paymentMethod = formData.get('payment-method') as string;

      try {
        this.showTransactionProgress();
        
        if (paymentMethod === 'escrow') {
          await this.processEscrowPayment(amount, recipient, currency, memo);
        } else {
          await this.processDirectPayment(amount, recipient, currency, memo);
        }
        
      } catch (error) {
        this.hideTransactionProgress();
        this.showNotification(`Payment failed: ${error}`, 'error');
      }
    }

    private async processDirectPayment(amount: number, recipient: string, currency: string, memo?: string) {
      const wallet = enhancedSolanaWalletService.getWallet();
      if (!wallet) throw new Error('Wallet not connected');

      this.updateProgressStatus('Creating transaction...', 25);

      // Create transaction
      const transaction = await solanaTransactionService.createTransaction(
        wallet.publicKey,
        recipient,
        amount,
        memo
      );

      this.updateProgressStatus('Signing transaction...', 50);

      // Send transaction
      const result = await solanaTransactionService.sendTransaction(transaction, wallet);

      this.updateProgressStatus('Confirming transaction...', 75);

      // Wait for confirmation
      await solanaTransactionService.waitForConfirmation(result.signature);

      this.updateProgressStatus('Payment completed!', 100);
      this.showTransactionDetails(result);

      this.showNotification('Payment sent successfully!', 'success');

      // Reset form after delay
      setTimeout(() => {
        this.resetForm();
        this.hideTransactionProgress();
      }, 3000);
    }

    private async processEscrowPayment(amount: number, recipient: string, currency: string, memo?: string) {
      const wallet = enhancedSolanaWalletService.getWallet();
      if (!wallet) throw new Error('Wallet not connected');

      this.updateProgressStatus('Creating escrow...', 25);

      // Create escrow
      const escrow = await solanaEscrowService.createEscrow(
        wallet.publicKey,
        recipient,
        amount
      );

      this.updateProgressStatus('Funding escrow...', 50);

      // Fund escrow
      const result = await solanaEscrowService.fundEscrow(escrow.address, wallet, amount);

      this.updateProgressStatus('Escrow created successfully!', 100);
      this.showTransactionDetails(result);

      this.showNotification('Escrow payment created!', 'success');

      // Reset form after delay
      setTimeout(() => {
        this.resetForm();
        this.hideTransactionProgress();
      }, 3000);
    }

    private showTransactionProgress() {
      if (this.transactionProgress) {
        this.transactionProgress.style.display = 'block';
      }
    }

    private hideTransactionProgress() {
      if (this.transactionProgress) {
        this.transactionProgress.style.display = 'none';
      }
    }

    private updateProgressStatus(status: string, percentage: number) {
      if (this.progressStatus) {
        this.progressStatus.textContent = status;
      }
      if (this.progressFill) {
        this.progressFill.style.width = `${percentage}%`;
      }
    }

    private showTransactionDetails(result: any) {
      if (this.transactionDetails) {
        this.transactionDetails.innerHTML = `
          <div class="transaction-info">
            <div class="info-row">
              <span class="info-label">Transaction ID:</span>
              <span class="info-value">${result.signature}</span>
            </div>
            <div class="info-row">
              <span class="info-label">Status:</span>
              <span class="info-value">${result.confirmationStatus}</span>
            </div>
            <div class="info-row">
              <span class="info-label">Slot:</span>
              <span class="info-value">${result.slot}</span>
            </div>
          </div>
        `;
      }
    }

    private resetForm() {
      if (this.form) {
        this.form.reset();
      }
      this.updateAmountCalculation();
      this.validateAddress();
    }

    private cancelPayment() {
      this.resetForm();
      this.hideTransactionProgress();
      this.showNotification('Payment cancelled', 'info');
    }

    private showNotification(message: string, type: 'success' | 'error' | 'info') {
      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
  }

  // Initialize form when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new SolanaPaymentForm();
  });
</script>

<style>
  .payment-form {
    @apply bg-white rounded-lg shadow-sm p-6;
  }

  .form-header {
    @apply flex justify-between items-center mb-6;
  }

  .form-title {
    @apply text-xl font-semibold text-gray-900;
  }

  .wallet-status {
    @apply text-sm;
  }

  .wallet-connected {
    @apply flex items-center space-x-2 text-green-600;
  }

  .wallet-provider {
    @apply font-medium;
  }

  .wallet-address {
    @apply font-mono text-xs;
  }

  .wallet-balance {
    @apply font-semibold;
  }

  .wallet-disconnected {
    @apply flex items-center space-x-2 text-gray-600;
  }

  .connect-wallet-btn {
    @apply px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 transition-colors;
  }

  .payment-form-content {
    @apply space-y-6;
  }

  .form-group {
    @apply space-y-2;
  }

  .form-label {
    @apply block text-sm font-medium text-gray-700;
  }

  .amount-input-group {
    @apply flex;
  }

  .amount-input {
    @apply flex-1 rounded-l-lg border-r-0;
  }

  .currency-select {
    @apply px-3 py-2 border border-gray-300 rounded-r-lg bg-gray-50 text-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
  }

  .address-input-group {
    @apply flex;
  }

  .address-input {
    @apply flex-1 rounded-l-lg border-r-0;
  }

  .paste-btn {
    @apply px-3 py-2 border border-l-0 border-gray-300 rounded-r-lg bg-gray-50 text-gray-600 hover:bg-gray-100 transition-colors;
  }

  .form-input {
    @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
  }

  .amount-conversion {
    @apply text-sm text-gray-600;
  }

  .address-validation {
    @apply text-sm;
  }

  .validation-success {
    @apply text-green-600;
  }

  .validation-error {
    @apply text-red-600;
  }

  .payment-methods {
    @apply space-y-3;
  }

  .payment-method-option {
    @apply block cursor-pointer;
  }

  .payment-method-option input {
    @apply sr-only;
  }

  .option-content {
    @apply flex items-center space-x-3 p-4 border border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all;
  }

  .payment-method-option input:checked + .option-content {
    @apply border-blue-500 bg-blue-50;
  }

  .option-icon {
    @apply text-2xl;
  }

  .option-title {
    @apply block font-medium text-gray-900;
  }

  .option-description {
    @apply block text-sm text-gray-600;
  }

  .fee-info, .total-info {
    @apply flex justify-between items-center py-2;
  }

  .fee-label, .total-label {
    @apply text-sm text-gray-600;
  }

  .fee-amount {
    @apply text-sm font-medium text-gray-900;
  }

  .total-amount {
    @apply text-lg font-bold text-gray-900;
  }

  .form-actions {
    @apply flex space-x-3 pt-4;
  }

  .btn-primary {
    @apply flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2;
  }

  .btn-secondary {
    @apply px-4 py-2 border border-gray-300 text-gray-700 rounded-lg font-medium hover:bg-gray-50 transition-colors;
  }

  .btn-icon {
    @apply text-lg;
  }

  .transaction-progress {
    @apply mt-6 p-4 bg-gray-50 rounded-lg;
  }

  .progress-header {
    @apply flex justify-between items-center mb-3;
  }

  .progress-title {
    @apply font-medium text-gray-900;
  }

  .progress-status {
    @apply text-sm text-gray-600;
  }

  .progress-bar {
    @apply w-full bg-gray-200 rounded-full h-2 mb-4;
  }

  .progress-fill {
    @apply bg-blue-600 h-2 rounded-full transition-all duration-300;
    width: 0%;
  }

  .transaction-info {
    @apply space-y-2;
  }

  .info-row {
    @apply flex justify-between items-center text-sm;
  }

  .info-label {
    @apply text-gray-600;
  }

  .info-value {
    @apply font-mono text-gray-900;
  }

  .notification {
    @apply fixed top-4 right-4 px-4 py-2 rounded-lg text-white font-medium z-50;
  }

  .notification-success {
    @apply bg-green-600;
  }

  .notification-error {
    @apply bg-red-600;
  }

  .notification-info {
    @apply bg-blue-600;
  }
</style>
