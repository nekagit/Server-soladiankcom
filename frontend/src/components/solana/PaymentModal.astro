---
// PaymentModal.astro - Solana payment processing modal
export interface Props {
  isOpen?: boolean;
  recipient?: string;
  amount?: number;
  memo?: string;
  onClose?: () => void;
  onSuccess?: (transaction: any) => void;
  onError?: (error: string) => void;
}

const { 
  isOpen = false, 
  recipient = '', 
  amount = 0, 
  memo = '',
  onClose,
  onSuccess,
  onError
} = Astro.props;
---

<div id="payment-modal" class={`modal ${isOpen ? 'modal-open' : ''}`}>
  <div class="modal-overlay" id="modal-overlay"></div>
  <div class="modal-content">
    <div class="modal-header">
      <h2 class="modal-title">Send Solana Payment</h2>
      <button class="modal-close" id="modal-close">Ã—</button>
    </div>
    
    <div class="modal-body">
      <form id="payment-form" class="payment-form">
        <div class="form-group">
          <label for="recipient-address" class="form-label">Recipient Address</label>
          <input 
            type="text" 
            id="recipient-address" 
            class="form-input" 
            placeholder="Enter Solana wallet address"
            value={recipient}
            required
          />
          <div class="form-error" id="recipient-error"></div>
        </div>
        
        <div class="form-group">
          <label for="amount" class="form-label">Amount (SOL)</label>
          <div class="amount-input-group">
            <input 
              type="number" 
              id="amount" 
              class="form-input" 
              step="0.000001"
              min="0"
              placeholder="0.00"
              value={amount}
              required
            />
            <span class="amount-currency">SOL</span>
          </div>
          <div class="form-error" id="amount-error"></div>
        </div>
        
        <div class="form-group">
          <label for="memo" class="form-label">Memo (Optional)</label>
          <textarea 
            id="memo" 
            class="form-textarea" 
            placeholder="Add a note for this payment"
            value={memo}
            rows="3"
          ></textarea>
        </div>
        
        <div class="payment-summary">
          <div class="summary-row">
            <span>Amount:</span>
            <span id="summary-amount">0.00 SOL</span>
          </div>
          <div class="summary-row">
            <span>Network Fee:</span>
            <span id="summary-fee">~0.000005 SOL</span>
          </div>
          <div class="summary-row total">
            <span>Total:</span>
            <span id="summary-total">0.00 SOL</span>
          </div>
        </div>
      </form>
    </div>
    
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" id="cancel-payment">Cancel</button>
      <button type="button" class="btn btn-primary" id="send-payment" disabled>
        <span class="btn-text">Send Payment</span>
        <span class="btn-loading" style="display: none;">Sending...</span>
      </button>
    </div>
  </div>
</div>

<script>
  import { enhancedSolanaWalletService } from '../../services/solana/solana-wallet';
  import { solanaTransactionService } from '../../services/solana/solana-transaction';

  class PaymentModalComponent {
    private walletService = enhancedSolanaWalletService;
    private transactionService = solanaTransactionService;
    private modal: HTMLElement | null = null;
    private form: HTMLFormElement | null = null;
    private isProcessing = false;

    constructor() {
      this.initializeElements();
      this.setupEventListeners();
      this.updateSummary();
    }

    private initializeElements() {
      this.modal = document.getElementById('payment-modal');
      this.form = document.getElementById('payment-form') as HTMLFormElement;
    }

    private setupEventListeners() {
      // Modal close events
      const closeBtn = document.getElementById('modal-close');
      const overlay = document.getElementById('modal-overlay');
      const cancelBtn = document.getElementById('cancel-payment');

      closeBtn?.addEventListener('click', () => this.closeModal());
      overlay?.addEventListener('click', () => this.closeModal());
      cancelBtn?.addEventListener('click', () => this.closeModal());

      // Form events
      const amountInput = document.getElementById('amount') as HTMLInputElement;
      const recipientInput = document.getElementById('recipient-address') as HTMLInputElement;

      amountInput?.addEventListener('input', () => this.updateSummary());
      recipientInput?.addEventListener('input', () => this.validateRecipient());

      // Send payment button
      const sendBtn = document.getElementById('send-payment');
      sendBtn?.addEventListener('click', () => this.sendPayment());

      // Form validation
      this.form?.addEventListener('input', () => this.validateForm());
    }

    private validateRecipient() {
      const input = document.getElementById('recipient-address') as HTMLInputElement;
      const errorElement = document.getElementById('recipient-error');
      const address = input.value.trim();

      if (!address) {
        this.showError(errorElement, '');
        return false;
      }

      // Basic Solana address validation
      if (address.length < 32 || address.length > 44) {
        this.showError(errorElement, 'Invalid address length');
        return false;
      }

      // Check for valid base58 characters
      const base58Regex = /^[1-9A-HJ-NP-Za-km-z]+$/;
      if (!base58Regex.test(address)) {
        this.showError(errorElement, 'Invalid address format');
        return false;
      }

      this.showError(errorElement, '');
      return true;
    }

    private validateForm() {
      const recipientValid = this.validateRecipient();
      const amountInput = document.getElementById('amount') as HTMLInputElement;
      const amount = parseFloat(amountInput.value);
      const amountValid = amount > 0;

      const sendBtn = document.getElementById('send-payment') as HTMLButtonElement;
      sendBtn.disabled = !recipientValid || !amountValid || this.isProcessing;
    }

    private updateSummary() {
      const amountInput = document.getElementById('amount') as HTMLInputElement;
      const amount = parseFloat(amountInput.value) || 0;
      const fee = 0.000005; // Estimated network fee
      const total = amount + fee;

      const summaryAmount = document.getElementById('summary-amount');
      const summaryFee = document.getElementById('summary-fee');
      const summaryTotal = document.getElementById('summary-total');

      if (summaryAmount) summaryAmount.textContent = `${amount.toFixed(6)} SOL`;
      if (summaryFee) summaryFee.textContent = `~${fee.toFixed(6)} SOL`;
      if (summaryTotal) summaryTotal.textContent = `${total.toFixed(6)} SOL`;
    }

    private async sendPayment() {
      if (this.isProcessing) return;

      const recipientInput = document.getElementById('recipient-address') as HTMLInputElement;
      const amountInput = document.getElementById('amount') as HTMLInputElement;
      const memoInput = document.getElementById('memo') as HTMLTextAreaElement;

      const recipient = recipientInput.value.trim();
      const amount = parseFloat(amountInput.value);
      const memo = memoInput.value.trim();

      if (!this.validateRecipient() || amount <= 0) {
        return;
      }

      this.setProcessing(true);

      try {
        // Check if wallet is connected
        if (!this.walletService.isConnected()) {
          throw new Error('Please connect your wallet first');
        }

        // Send payment
        const transaction = await this.walletService.sendPayment(recipient, amount, memo || undefined);
        
        // Wait for confirmation
        const status = await this.transactionService.waitForConfirmation(transaction.signature);
        
        if (status.status === 'confirmed' || status.status === 'finalized') {
          this.showSuccess('Payment sent successfully!');
          this.closeModal();
          
          // Call success callback
          if (window.paymentModalSuccess) {
            window.paymentModalSuccess(transaction);
          }
        } else {
          throw new Error('Transaction failed');
        }

      } catch (error) {
        this.showError(null, `Payment failed: ${error}`);
        
        // Call error callback
        if (window.paymentModalError) {
          window.paymentModalError(error);
        }
      } finally {
        this.setProcessing(false);
      }
    }

    private setProcessing(processing: boolean) {
      this.isProcessing = processing;
      const sendBtn = document.getElementById('send-payment') as HTMLButtonElement;
      const btnText = sendBtn.querySelector('.btn-text') as HTMLElement;
      const btnLoading = sendBtn.querySelector('.btn-loading') as HTMLElement;

      sendBtn.disabled = processing;
      
      if (processing) {
        btnText.style.display = 'none';
        btnLoading.style.display = 'inline';
      } else {
        btnText.style.display = 'inline';
        btnLoading.style.display = 'none';
      }
    }

    private closeModal() {
      if (this.modal) {
        this.modal.classList.remove('modal-open');
      }
      
      // Call close callback
      if (window.paymentModalClose) {
        window.paymentModalClose();
      }
    }

    private showError(element: HTMLElement | null, message: string) {
      if (element) {
        element.textContent = message;
        element.style.display = message ? 'block' : 'none';
      }
    }

    private showSuccess(message: string) {
      // Create success notification
      const notification = document.createElement('div');
      notification.className = 'notification notification-success';
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    public open(recipient?: string, amount?: number, memo?: string) {
      if (recipient) {
        const recipientInput = document.getElementById('recipient-address') as HTMLInputElement;
        recipientInput.value = recipient;
      }
      
      if (amount) {
        const amountInput = document.getElementById('amount') as HTMLInputElement;
        amountInput.value = amount.toString();
      }
      
      if (memo) {
        const memoInput = document.getElementById('memo') as HTMLTextAreaElement;
        memoInput.value = memo;
      }
      
      this.updateSummary();
      this.validateForm();
      
      if (this.modal) {
        this.modal.classList.add('modal-open');
      }
    }
  }

  // Initialize component when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    window.paymentModal = new PaymentModalComponent();
  });
</script>

<style>
  .modal {
    @apply fixed inset-0 z-50 hidden;
  }

  .modal-open {
    @apply block;
  }

  .modal-overlay {
    @apply absolute inset-0 bg-black bg-opacity-50;
  }

  .modal-content {
    @apply relative bg-white rounded-lg shadow-xl max-w-md mx-auto mt-20;
  }

  .modal-header {
    @apply flex items-center justify-between p-6 border-b border-gray-200;
  }

  .modal-title {
    @apply text-xl font-semibold text-gray-900;
  }

  .modal-close {
    @apply text-2xl text-gray-400 hover:text-gray-600 cursor-pointer;
  }

  .modal-body {
    @apply p-6;
  }

  .modal-footer {
    @apply flex items-center justify-end space-x-3 p-6 border-t border-gray-200;
  }

  .payment-form {
    @apply space-y-4;
  }

  .form-group {
    @apply space-y-2;
  }

  .form-label {
    @apply block text-sm font-medium text-gray-700;
  }

  .form-input {
    @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
  }

  .form-textarea {
    @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 resize-none;
  }

  .amount-input-group {
    @apply relative;
  }

  .amount-currency {
    @apply absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500;
  }

  .form-error {
    @apply text-sm text-red-600 hidden;
  }

  .payment-summary {
    @apply bg-gray-50 rounded-lg p-4 space-y-2;
  }

  .summary-row {
    @apply flex justify-between text-sm;
  }

  .summary-row.total {
    @apply font-semibold text-lg border-t border-gray-300 pt-2;
  }

  .btn {
    @apply px-4 py-2 rounded-lg font-medium transition-colors;
  }

  .btn-primary {
    @apply bg-blue-600 text-white hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed;
  }

  .btn-secondary {
    @apply bg-gray-200 text-gray-800 hover:bg-gray-300;
  }

  .btn-loading {
    @apply inline-flex items-center;
  }

  .notification {
    @apply fixed top-4 right-4 px-4 py-2 rounded-lg text-white font-medium z-50;
  }

  .notification-success {
    @apply bg-green-600;
  }

  .notification-error {
    @apply bg-red-600;
  }
</style>

<script>
  // Global functions for external use
  declare global {
    interface Window {
      paymentModal: PaymentModalComponent;
      paymentModalSuccess?: (transaction: any) => void;
      paymentModalError?: (error: any) => void;
      paymentModalClose?: () => void;
    }
  }
</script>
