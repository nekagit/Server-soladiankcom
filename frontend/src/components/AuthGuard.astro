---
export interface Props {
  redirectTo?: string;
  requireAuth?: boolean;
  requireRole?: string;
  fallback?: any;
}

const {
  redirectTo = '/auth',
  requireAuth = true,
  requireRole,
  fallback,
} = Astro.props;
---

<div id='auth-guard'>
  <slot />
</div>

<script define:vars={{ redirectTo, requireAuth, requireRole }}>
  document.addEventListener('DOMContentLoaded', () => {
    const authManager = (window as any).authManager;

    if (!authManager) {
      console.error('Auth manager not available');
      if (requireAuth) {
        window.location.href = redirectTo;
      }
      return;
    }

    const checkAuth = () => {
      const isAuthenticated = authManager.isAuthenticated();
      const user = authManager.getCurrentUser();

      if (requireAuth && !isAuthenticated) {
        console.log('Authentication required, redirecting to:', redirectTo);
        window.location.href = redirectTo;
        return;
      }

      if (requireRole && user && !authManager.hasRole(requireRole)) {
        console.log('Insufficient permissions, redirecting to:', redirectTo);
        window.location.href = redirectTo;
        return;
      }

      // Show the protected content
      const authGuard = document.getElementById('auth-guard');
      if (authGuard) {
        authGuard.style.display = 'block';
      }
    };

    // Initial check
    checkAuth();

    // Listen for auth state changes
    window.addEventListener('authStateChanged', checkAuth);
  });
</script>

<style>
  #auth-guard {
    display: none;
  }
</style>
