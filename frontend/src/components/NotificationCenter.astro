---
// Notification Center Component
---

<div id='notification-center' class='fixed top-4 right-4 z-50 max-w-sm w-full'>
  <!-- Notification Bell -->
  <div class='relative'>
    <button
      id='notification-bell'
      class='relative p-2 text-gray-600 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-soladia-primary focus:ring-offset-2 rounded-full bg-white shadow-lg'
      aria-label='Notifications'
    >
      <svg
        class='w-6 h-6'
        fill='none'
        stroke='currentColor'
        viewBox='0 0 24 24'
      >
        <path
          stroke-linecap='round'
          stroke-linejoin='round'
          stroke-width='2'
          d='M15 17h5l-5 5v-5zM4.5 19.5a2.5 2.5 0 01-2.5-2.5V7a2.5 2.5 0 012.5-2.5h15a2.5 2.5 0 012.5 2.5v10a2.5 2.5 0 01-2.5 2.5h-15z'
        ></path>
      </svg>

      <!-- Unread Badge -->
      <span
        id='notification-badge'
        class='absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center hidden'
      >
        0
      </span>
    </button>

    <!-- Notification Dropdown -->
    <div
      id='notification-dropdown'
      class='absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-xl border border-gray-200 hidden'
    >
      <!-- Header -->
      <div class='px-4 py-3 border-b border-gray-200'>
        <div class='flex items-center justify-between'>
          <h3 class='text-lg font-semibold text-gray-900'>Notifications</h3>
          <div class='flex space-x-2'>
            <button
              id='mark-all-read'
              class='text-sm text-soladia-primary hover:text-red-700'
            >
              Mark all read
            </button>
            <button
              id='clear-all'
              class='text-sm text-gray-500 hover:text-gray-700'
            >
              Clear all
            </button>
          </div>
        </div>
      </div>

      <!-- Notifications List -->
      <div id='notifications-list' class='max-h-96 overflow-y-auto'>
        <!-- Notifications will be populated here -->
      </div>

      <!-- Footer -->
      <div class='px-4 py-3 border-t border-gray-200'>
        <a
          href='/notifications'
          class='block text-center text-sm text-soladia-primary hover:text-red-700'
        >
          View all notifications
        </a>
      </div>
    </div>
  </div>
</div>

<!-- Toast Notifications Container -->
<div id='toast-container' class='fixed top-4 left-4 z-50 space-y-2'>
  <!-- Toast notifications will be added here -->
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const notificationService = (window as any).notificationService;
    if (!notificationService) {
      console.error('Notification service not available');
      return;
    }

    const bell = document.getElementById('notification-bell');
    const dropdown = document.getElementById('notification-dropdown');
    const badge = document.getElementById('notification-badge');
    const notificationsList = document.getElementById('notifications-list');
    const markAllReadBtn = document.getElementById('mark-all-read');
    const clearAllBtn = document.getElementById('clear-all');
    const toastContainer = document.getElementById('toast-container');

    let isDropdownOpen = false;

    // Toggle dropdown
    bell?.addEventListener('click', e => {
      e.stopPropagation();
      toggleDropdown();
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', e => {
      if (isDropdownOpen && !dropdown?.contains(e.target as Node)) {
        closeDropdown();
      }
    });

    function toggleDropdown() {
      if (isDropdownOpen) {
        closeDropdown();
      } else {
        openDropdown();
      }
    }

    function openDropdown() {
      dropdown?.classList.remove('hidden');
      isDropdownOpen = true;
      updateNotificationsList();
    }

    function closeDropdown() {
      dropdown?.classList.add('hidden');
      isDropdownOpen = false;
    }

    // Mark all as read
    markAllReadBtn?.addEventListener('click', () => {
      notificationService.markAllAsRead();
    });

    // Clear all notifications
    clearAllBtn?.addEventListener('click', () => {
      notificationService.clearAll();
    });

    // Subscribe to notification updates
    notificationService.subscribe(notifications => {
      updateBadge();
      if (isDropdownOpen) {
        updateNotificationsList();
      }

      // Show toast for new notifications
      const newNotifications = notifications.filter(
        n => !n.read && new Date().getTime() - n.timestamp.getTime() < 5000
      );
      newNotifications.forEach(notification => {
        showToast(notification);
      });
    });

    function updateBadge() {
      const unreadCount = notificationService.getUnreadCount();
      if (badge) {
        if (unreadCount > 0) {
          badge.textContent = unreadCount > 99 ? '99+' : unreadCount.toString();
          badge.classList.remove('hidden');
        } else {
          badge.classList.add('hidden');
        }
      }
    }

    function updateNotificationsList() {
      if (!notificationsList) return;

      const notifications = notificationService.getNotifications();

      if (notifications.length === 0) {
        notificationsList.innerHTML = `
          <div class="px-4 py-8 text-center text-gray-500">
            <svg class="w-12 h-12 mx-auto mb-2 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM4.5 19.5a2.5 2.5 0 01-2.5-2.5V7a2.5 2.5 0 012.5-2.5h15a2.5 2.5 0 012.5 2.5v10a2.5 2.5 0 01-2.5 2.5h-15z" />
            </svg>
            <p>No notifications yet</p>
          </div>
        `;
        return;
      }

      notificationsList.innerHTML = notifications
        .map(
          notification => `
        <div class="px-4 py-3 border-b border-gray-100 hover:bg-gray-50 ${!notification.read ? 'bg-blue-50' : ''}">
          <div class="flex items-start space-x-3">
            <div class="flex-shrink-0">
              <div class="w-2 h-2 rounded-full ${getNotificationColor(notification.type)} ${!notification.read ? 'opacity-100' : 'opacity-30'}"></div>
            </div>
            <div class="flex-1 min-w-0">
              <p class="text-sm font-medium text-gray-900">${notification.title}</p>
              <p class="text-sm text-gray-600 mt-1">${notification.message}</p>
              <div class="flex items-center justify-between mt-2">
                <p class="text-xs text-gray-500">${formatTime(notification.timestamp)}</p>
                ${
                  notification.actionUrl
                    ? `
                  <a href="${notification.actionUrl}" class="text-xs text-soladia-primary hover:text-red-700">
                    ${notification.actionText || 'View'}
                  </a>
                `
                    : ''
                }
              </div>
            </div>
            <button
              class="flex-shrink-0 text-gray-400 hover:text-gray-600"
              onclick="notificationService.dismissNotification('${notification.id}')"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
      `
        )
        .join('');
    }

    function showToast(notification: any) {
      const toast = document.createElement('div');
      toast.className = `p-4 rounded-lg shadow-lg border-l-4 ${getToastClasses(notification.type)} transform transition-all duration-300 translate-x-full`;

      toast.innerHTML = `
        <div class="flex items-start">
          <div class="flex-shrink-0">
            <div class="w-2 h-2 rounded-full ${getNotificationColor(notification.type)} mt-2"></div>
          </div>
          <div class="ml-3 flex-1">
            <p class="text-sm font-medium text-gray-900">${notification.title}</p>
            <p class="text-sm text-gray-600 mt-1">${notification.message}</p>
            ${
              notification.actionUrl
                ? `
              <a href="${notification.actionUrl}" class="text-xs text-soladia-primary hover:text-red-700 mt-1 inline-block">
                ${notification.actionText || 'View'}
              </a>
            `
                : ''
            }
          </div>
          <button
            class="ml-4 flex-shrink-0 text-gray-400 hover:text-gray-600"
            onclick="this.parentElement.parentElement.remove()"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      `;

      toastContainer?.appendChild(toast);

      // Animate in
      setTimeout(() => {
        toast.classList.remove('translate-x-full');
      }, 100);

      // Auto-remove after 5 seconds
      setTimeout(() => {
        toast.classList.add('translate-x-full');
        setTimeout(() => {
          toast.remove();
        }, 300);
      }, 5000);
    }

    function getNotificationColor(type: string) {
      switch (type) {
        case 'success':
          return 'bg-green-500';
        case 'warning':
          return 'bg-yellow-500';
        case 'error':
          return 'bg-red-500';
        default:
          return 'bg-blue-500';
      }
    }

    function getToastClasses(type: string) {
      switch (type) {
        case 'success':
          return 'bg-green-50 border-green-500';
        case 'warning':
          return 'bg-yellow-50 border-yellow-500';
        case 'error':
          return 'bg-red-50 border-red-500';
        default:
          return 'bg-blue-50 border-blue-500';
      }
    }

    function formatTime(timestamp: Date) {
      const now = new Date();
      const diff = now.getTime() - timestamp.getTime();
      const minutes = Math.floor(diff / 60000);
      const hours = Math.floor(diff / 3600000);
      const days = Math.floor(diff / 86400000);

      if (minutes < 1) return 'Just now';
      if (minutes < 60) return `${minutes}m ago`;
      if (hours < 24) return `${hours}h ago`;
      return `${days}d ago`;
    }

    // Request notification permission on first interaction
    bell?.addEventListener('click', async () => {
      if (Notification.permission === 'default') {
        await notificationService.requestNotificationPermission();
      }
    });

    // Initial update
    updateBadge();
  });
</script>

<style>
  .notification-center {
    z-index: 50;
  }

  .notification-dropdown {
    max-height: 24rem;
  }

  .notification-item {
    transition: background-color 0.2s ease;
  }

  .notification-item:hover {
    background-color: #f9fafb;
  }

  .toast-notification {
    animation: slideInRight 0.3s ease-out;
  }

  @keyframes slideInRight {
    from {
      transform: translateX(100%);
    }
    to {
      transform: translateX(0);
    }
  }

  .toast-notification.removing {
    animation: slideOutRight 0.3s ease-in;
  }

  @keyframes slideOutRight {
    from {
      transform: translateX(0);
    }
    to {
      transform: translateX(100%);
    }
  }
</style>
