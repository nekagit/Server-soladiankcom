---
// Theme Toggle Component
---

<div class="theme-toggle">
  <button 
    id="theme-toggle" 
    class="theme-toggle-btn"
    aria-label="Toggle dark mode"
    title="Toggle dark mode"
  >
    <svg class="sun-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <circle cx="12" cy="12" r="5"/>
      <line x1="12" y1="1" x2="12" y2="3"/>
      <line x1="12" y1="21" x2="12" y2="23"/>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
      <line x1="1" y1="12" x2="3" y2="12"/>
      <line x1="21" y1="12" x2="23" y2="12"/>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
    </svg>
    <svg class="moon-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
    </svg>
  </button>
</div>

<style>
  .theme-toggle {
    position: relative;
  }

  .theme-toggle-btn {
    @apply relative p-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-200;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
  }

  .theme-toggle-btn:focus {
    @apply outline-none ring-2 ring-blue-500 ring-opacity-50;
  }

  .sun-icon,
  .moon-icon {
    position: absolute;
    transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
  }

  .sun-icon {
    opacity: 1;
    transform: rotate(0deg);
  }

  .moon-icon {
    opacity: 0;
    transform: rotate(180deg);
  }

  .dark .sun-icon {
    opacity: 0;
    transform: rotate(180deg);
  }

  .dark .moon-icon {
    opacity: 1;
    transform: rotate(0deg);
  }

  /* Smooth transitions for theme changes */
  * {
    transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out, color 0.2s ease-in-out;
  }
</style>

<script>
  // Enhanced Theme Management with better UX
  class ThemeManager {
    constructor() {
      this.theme = this.getStoredTheme() || this.getSystemTheme();
      this.isTransitioning = false;
      this.init();
    }

    getStoredTheme() {
      if (typeof window !== 'undefined') {
        return localStorage.getItem('theme');
      }
      return null;
    }

    getSystemTheme() {
      if (typeof window !== 'undefined' && window.matchMedia) {
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      }
      return 'light';
    }

    init() {
      if (typeof window !== 'undefined') {
        this.applyTheme(this.theme);
        this.setupListeners();
        this.watchSystemTheme();
        this.setupKeyboardShortcuts();
        this.announceThemeChange();
      }
    }

    applyTheme(theme) {
      if (typeof document !== 'undefined' && !this.isTransitioning) {
        this.isTransitioning = true;
        const root = document.documentElement;
        
        // Add transition class for smooth theme switching
        root.classList.add('theme-transitioning');
        
        // Apply theme
        if (theme === 'dark') {
          root.classList.add('dark');
          root.classList.remove('light');
        } else {
          root.classList.add('light');
          root.classList.remove('dark');
        }
        
        // Store preference
        if (typeof localStorage !== 'undefined') {
          localStorage.setItem('theme', theme);
        }
        
        // Update theme toggle button
        this.updateToggleButton(theme);
        
        // Update meta theme-color for mobile browsers
        this.updateMetaThemeColor(theme);
        
        // Remove transition class after animation
        setTimeout(() => {
          root.classList.remove('theme-transitioning');
          this.isTransitioning = false;
        }, 300);
      }
    }

    toggleTheme() {
      this.theme = this.theme === 'light' ? 'dark' : 'light';
      this.applyTheme(this.theme);
      this.announceThemeChange();
    }

    updateToggleButton(theme) {
      const toggleBtn = document.getElementById('theme-toggle');
      const icon = toggleBtn?.querySelector('.theme-icon');
      const text = toggleBtn?.querySelector('.theme-text');
      
      if (toggleBtn && icon && text) {
        if (theme === 'dark') {
          icon.innerHTML = '🌙';
          text.textContent = 'Dark Mode';
          toggleBtn.setAttribute('aria-label', 'Switch to light mode');
        } else {
          icon.innerHTML = '☀️';
          text.textContent = 'Light Mode';
          toggleBtn.setAttribute('aria-label', 'Switch to dark mode');
        }
      }
    }

    updateMetaThemeColor(theme) {
      const metaThemeColor = document.querySelector('meta[name="theme-color"]');
      if (metaThemeColor) {
        metaThemeColor.content = theme === 'dark' ? '#0F0F0F' : '#F8F9FA';
      }
    }

    announceThemeChange() {
      // Announce theme change for screen readers
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.style.position = 'absolute';
      announcement.style.left = '-10000px';
      announcement.style.width = '1px';
      announcement.style.height = '1px';
      announcement.style.overflow = 'hidden';
      
      announcement.textContent = `Switched to ${this.theme} mode`;
      document.body.appendChild(announcement);
      
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    }

    setupListeners() {
      const toggleBtn = document.getElementById('theme-toggle');
      if (toggleBtn) {
        toggleBtn.addEventListener('click', (e) => {
          e.preventDefault();
          this.toggleTheme();
        });
        
        // Add keyboard support
        toggleBtn.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.toggleTheme();
          }
        });
      }
    }

    setupKeyboardShortcuts() {
      document.addEventListener('keydown', (e) => {
        // Ctrl/Cmd + Shift + T to toggle theme
        if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'T') {
          e.preventDefault();
          this.toggleTheme();
        }
      });
    }

    watchSystemTheme() {
      if (typeof window !== 'undefined' && window.matchMedia) {
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        mediaQuery.addEventListener('change', (e) => {
          // Only auto-switch if user hasn't manually set a preference
          if (!this.getStoredTheme()) {
            this.theme = e.matches ? 'dark' : 'light';
            this.applyTheme(this.theme);
            this.announceThemeChange();
          }
        });
      }
    }

    // Public method to get current theme
    getCurrentTheme() {
      return this.theme;
    }

    // Public method to set theme programmatically
    setTheme(theme) {
      if (theme === 'light' || theme === 'dark') {
        this.theme = theme;
        this.applyTheme(this.theme);
        this.announceThemeChange();
      }
    }

    // Public method to reset to system theme
    resetToSystemTheme() {
      if (typeof localStorage !== 'undefined') {
        localStorage.removeItem('theme');
      }
      this.theme = this.getSystemTheme();
      this.applyTheme(this.theme);
      this.announceThemeChange();
    }
  }

  // Initialize theme manager when DOM is ready
  if (typeof document !== 'undefined') {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => new ThemeManager());
    } else {
      new ThemeManager();
    }
  }
</script>
