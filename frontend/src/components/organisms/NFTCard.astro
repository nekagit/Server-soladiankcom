---
import Card from '../atoms/Card.astro';
import Button from '../atoms/Button.astro';

export interface NFT {
  id: string;
  name: string;
  description: string;
  image: string;
  animationUrl?: string;
  tokenId: string;
  contractAddress: string;
  owner: string;
  ownerName: string;
  creator: string;
  creatorName: string;
  price?: number;
  currency: 'SOL' | 'USDC' | 'USDT';
  isListed: boolean;
  isAuction: boolean;
  auctionEndTime?: string;
  highestBid?: number;
  bidCount?: number;
  collection: {
    id: string;
    name: string;
    slug: string;
    verified: boolean;
  };
  attributes: Array<{
    trait_type: string;
    value: string | number;
    rarity?: number;
  }>;
  rarity?: {
    rank: number;
    score: number;
    total: number;
  };
  createdAt: string;
  updatedAt: string;
}

export interface Props {
  nft: NFT;
  showBuyButton?: boolean;
  showBidButton?: boolean;
  showLikeButton?: boolean;
  showShareButton?: boolean;
  className?: string;
  'data-testid'?: string;
}

const {
  nft,
  showBuyButton = true,
  showBidButton = true,
  showLikeButton = true,
  showShareButton = true,
  className = '',
  'data-testid': testId,
} = Astro.props;

const formatPrice = (price: number, currency: string) => {
  return `${price.toFixed(2)} ${currency}`;
};

const formatTimeRemaining = (endTime: string) => {
  const now = new Date().getTime();
  const end = new Date(endTime).getTime();
  const diff = end - now;

  if (diff <= 0) return 'Ended';

  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));

  if (days > 0) return `${days}d ${hours}h`;
  if (hours > 0) return `${hours}h ${minutes}m`;
  return `${minutes}m`;
};
---

<Card
  variant='default'
  padding='none'
  hover={true}
  clickable={true}
  className={`group overflow-hidden ${className}`}
  data-testid={testId}
>
  <a href={`/nft/${nft.id}`} class='block'>
    <!-- NFT Image/Video -->
    <div class='aspect-square bg-gray-200 overflow-hidden relative'>
      {
        nft.animationUrl ? (
          <video
            src={nft.animationUrl}
            class='w-full h-full object-cover group-hover:scale-105 transition-transform duration-300'
            loop
            muted
            playsInline
          />
        ) : (
          <img
            src={nft.image}
            alt={nft.name}
            class='w-full h-full object-cover group-hover:scale-105 transition-transform duration-300'
            loading='lazy'
          />
        )
      }

      <!-- Collection Badge -->
      <div class='absolute top-2 left-2'>
        <div
          class='flex items-center space-x-1 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded-full'
        >
          {
            nft.collection.verified && (
              <svg class='w-3 h-3' fill='currentColor' viewBox='0 0 20 20'>
                <path
                  fill-rule='evenodd'
                  d='M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z'
                  clip-rule='evenodd'
                />
              </svg>
            )
          }
          <span>{nft.collection.name}</span>
        </div>
      </div>

      <!-- Rarity Badge -->
      {
        nft.rarity && (
          <div class='absolute top-2 right-2'>
            <div class='bg-yellow-500 text-black text-xs font-bold px-2 py-1 rounded-full'>
              #{nft.rarity.rank}
            </div>
          </div>
        )
      }

      <!-- Auction Timer -->
      {
        nft.isAuction && nft.auctionEndTime && (
          <div class='absolute bottom-2 left-2 right-2'>
            <div class='bg-red-500 text-white text-xs font-bold px-2 py-1 rounded text-center'>
              {formatTimeRemaining(nft.auctionEndTime)}
            </div>
          </div>
        )
      }

      <!-- Action Buttons Overlay -->
      <div
        class='absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 flex items-center justify-center'
      >
        <div
          class='opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex space-x-2'
        >
          {
            showLikeButton && (
              <button
                class='w-10 h-10 bg-white bg-opacity-90 rounded-full flex items-center justify-center hover:bg-opacity-100 transition-all'
                onclick='toggleLike(event, "${nft.id}")'
                title='Like'
              >
                <svg
                  class='w-5 h-5 text-gray-600'
                  fill='none'
                  stroke='currentColor'
                  viewBox='0 0 24 24'
                >
                  <path
                    stroke-linecap='round'
                    stroke-linejoin='round'
                    stroke-width='2'
                    d='M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z'
                  />
                </svg>
              </button>
            )
          }
          {
            showShareButton && (
              <button
                class='w-10 h-10 bg-white bg-opacity-90 rounded-full flex items-center justify-center hover:bg-opacity-100 transition-all'
                onclick='shareNFT(event, "${nft.id}")'
                title='Share'
              >
                <svg
                  class='w-5 h-5 text-gray-600'
                  fill='none'
                  stroke='currentColor'
                  viewBox='0 0 24 24'
                >
                  <path
                    stroke-linecap='round'
                    stroke-linejoin='round'
                    stroke-width='2'
                    d='M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z'
                  />
                </svg>
              </button>
            )
          }
        </div>
      </div>
    </div>

    <!-- NFT Info -->
    <div class='p-4'>
      <!-- Name and Collection -->
      <div class='mb-2'>
        <h3
          class='text-lg font-semibold text-gray-900 truncate group-hover:text-soladia-primary transition-colors'
        >
          {nft.name}
        </h3>
        <p class='text-sm text-gray-500 truncate'>{nft.collection.name}</p>
      </div>

      <!-- Creator -->
      <div class='flex items-center space-x-2 mb-3'>
        <div
          class='w-6 h-6 bg-gray-200 rounded-full flex items-center justify-center'
        >
          <svg
            class='w-4 h-4 text-gray-500'
            fill='none'
            stroke='currentColor'
            viewBox='0 0 24 24'
          >
            <path
              stroke-linecap='round'
              stroke-linejoin='round'
              stroke-width='2'
              d='M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z'
            ></path>
          </svg>
        </div>
        <span class='text-sm text-gray-600'>by {nft.creatorName}</span>
      </div>

      <!-- Price and Actions -->
      <div class='flex items-center justify-between'>
        <div class='flex-1'>
          {
            nft.isListed && nft.price ? (
              <div>
                <p class='text-lg font-bold text-gray-900'>
                  {formatPrice(nft.price, nft.currency)}
                </p>
                {nft.isAuction && (
                  <p class='text-sm text-gray-500'>
                    {nft.bidCount || 0} bid{nft.bidCount !== 1 ? 's' : ''}
                  </p>
                )}
              </div>
            ) : (
              <p class='text-sm text-gray-500'>Not for sale</p>
            )
          }
        </div>

        <div class='flex space-x-2'>
          {
            showBuyButton && nft.isListed && nft.price && !nft.isAuction && (
              <Button
                variant='primary'
                size='sm'
                onclick='buyNFT(event, "${nft.id}")'
              >
                Buy Now
              </Button>
            )
          }
          {
            showBidButton && nft.isAuction && (
              <Button
                variant='outline'
                size='sm'
                onclick='placeBid(event, "${nft.id}")'
              >
                Place Bid
              </Button>
            )
          }
        </div>
      </div>

      <!-- Attributes Preview -->
      {
        nft.attributes && nft.attributes.length > 0 && (
          <div class='mt-3 pt-3 border-t border-gray-200'>
            <div class='flex flex-wrap gap-1'>
              {nft.attributes.slice(0, 3).map((attr, index) => (
                <span
                  key={index}
                  class='text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded'
                >
                  {attr.trait_type}: {attr.value}
                </span>
              ))}
              {nft.attributes.length > 3 && (
                <span class='text-xs text-gray-500'>
                  +{nft.attributes.length - 3} more
                </span>
              )}
            </div>
          </div>
        )
      }
    </div>
  </a>
</Card>

<script>
  // Toggle like
  function toggleLike(event: Event, nftId: string) {
    event.preventDefault();
    event.stopPropagation();

    // Mock like functionality - replace with actual API call
    console.log('Toggling like for NFT:', nftId);

    // Show notification
    showNotification('Like toggled!', 'info');
  }

  // Share NFT
  function shareNFT(event: Event, nftId: string) {
    event.preventDefault();
    event.stopPropagation();

    if (navigator.share) {
      navigator.share({
        title: 'Check out this NFT on Soladia',
        text: 'Amazing NFT available on Soladia marketplace',
        url: `${window.location.origin}/nft/${nftId}`,
      });
    } else {
      // Fallback to clipboard
      navigator.clipboard.writeText(`${window.location.origin}/nft/${nftId}`);
      showNotification('Link copied to clipboard!', 'success');
    }
  }

  // Buy NFT
  function buyNFT(event: Event, nftId: string) {
    event.preventDefault();
    event.stopPropagation();

    // Mock buy functionality - replace with actual Solana transaction
    console.log('Buying NFT:', nftId);
    showNotification('Redirecting to purchase...', 'info');

    // In a real implementation, this would:
    // 1. Connect wallet
    // 2. Create transaction
    // 3. Sign and send transaction
    // 4. Update UI based on result
  }

  // Place bid
  function placeBid(event: Event, nftId: string) {
    event.preventDefault();
    event.stopPropagation();

    // Mock bid functionality - replace with actual implementation
    console.log('Placing bid for NFT:', nftId);
    showNotification('Opening bid dialog...', 'info');

    // In a real implementation, this would:
    // 1. Open bid modal
    // 2. Allow user to enter bid amount
    // 3. Connect wallet
    // 4. Create bid transaction
    // 5. Sign and send transaction
  }

  // Show notification
  function showNotification(
    message: string,
    type: 'success' | 'error' | 'info'
  ) {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 p-4 rounded-md text-white z-50 ${
      type === 'success'
        ? 'bg-green-500'
        : type === 'error'
          ? 'bg-red-500'
          : 'bg-blue-500'
    }`;
    notification.textContent = message;
    document.body.appendChild(notification);

    setTimeout(() => {
      notification.remove();
    }, 3000);
  }
</script>

<style>
  .aspect-square {
    aspect-ratio: 1 / 1;
  }
</style>
