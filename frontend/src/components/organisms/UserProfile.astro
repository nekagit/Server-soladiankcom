---
import Card from '../atoms/Card.astro';
import Button from '../atoms/Button.astro';

export interface User {
  id: string;
  username: string;
  displayName: string;
  bio: string;
  avatar: string;
  coverImage?: string;
  verified: boolean;
  followers: number;
  following: number;
  listings: number;
  sales: number;
  joinedAt: string;
  socialLinks: {
    twitter?: string;
    instagram?: string;
    website?: string;
  };
  stats: {
    totalSales: number;
    totalVolume: number;
    averageRating: number;
    reviewCount: number;
  };
  badges: Array<{
    id: string;
    name: string;
    description: string;
    icon: string;
    color: string;
  }>;
}

export interface Props {
  user: User;
  isOwnProfile?: boolean;
  showFollowButton?: boolean;
  className?: string;
  'data-testid'?: string;
}

const {
  user,
  isOwnProfile = false,
  showFollowButton = true,
  className = '',
  'data-testid': testId,
} = Astro.props;

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
  });
};

const formatNumber = (num: number) => {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  }
  return num.toString();
};
---

<Card
  variant='default'
  padding='none'
  className={`user-profile overflow-hidden ${className}`}
  data-testid={testId}
>
  <!-- Cover Image -->
  {
    user.coverImage && (
      <div class='h-32 bg-gradient-to-r from-soladia-primary to-soladia-secondary relative'>
        <img
          src={user.coverImage}
          alt={`${user.displayName} cover`}
          class='w-full h-full object-cover'
        />
      </div>
    )
  }

  <!-- Profile Content -->
  <div class='p-6'>
    <!-- Profile Header -->
    <div class='flex items-start justify-between mb-6'>
      <div class='flex items-start space-x-4'>
        <!-- Avatar -->
        <div class='relative -mt-16'>
          <div
            class='w-24 h-24 rounded-full border-4 border-white bg-gray-200 overflow-hidden'
          >
            {
              user.avatar ? (
                <img
                  src={user.avatar}
                  alt={user.displayName}
                  class='w-full h-full object-cover'
                />
              ) : (
                <div class='w-full h-full bg-gray-300 flex items-center justify-center'>
                  <svg
                    class='w-8 h-8 text-gray-500'
                    fill='none'
                    stroke='currentColor'
                    viewBox='0 0 24 24'
                  >
                    <path
                      stroke-linecap='round'
                      stroke-linejoin='round'
                      stroke-width='2'
                      d='M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z'
                    />
                  </svg>
                </div>
              )
            }
          </div>
          {
            user.verified && (
              <div class='absolute -bottom-1 -right-1 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center'>
                <svg
                  class='w-4 h-4 text-white'
                  fill='currentColor'
                  viewBox='0 0 20 20'
                >
                  <path
                    fill-rule='evenodd'
                    d='M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z'
                    clip-rule='evenodd'
                  />
                </svg>
              </div>
            )
          }
        </div>

        <!-- User Info -->
        <div class='flex-1 min-w-0'>
          <div class='flex items-center space-x-2 mb-1'>
            <h1 class='text-2xl font-bold text-gray-900 truncate'>
              {user.displayName}
            </h1>
            <span class='text-gray-500'>@{user.username}</span>
          </div>

          {user.bio && <p class='text-gray-600 mb-3'>{user.bio}</p>}

          <!-- Social Links -->
          {
            user.socialLinks && (
              <div class='flex items-center space-x-4 mb-3'>
                {user.socialLinks.twitter && (
                  <a
                    href={user.socialLinks.twitter}
                    target='_blank'
                    rel='noopener noreferrer'
                    class='text-gray-400 hover:text-blue-400 transition-colors'
                  >
                    <svg
                      class='w-5 h-5'
                      fill='currentColor'
                      viewBox='0 0 24 24'
                    >
                      <path d='M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z' />
                    </svg>
                  </a>
                )}
                {user.socialLinks.instagram && (
                  <a
                    href={user.socialLinks.instagram}
                    target='_blank'
                    rel='noopener noreferrer'
                    class='text-gray-400 hover:text-pink-400 transition-colors'
                  >
                    <svg
                      class='w-5 h-5'
                      fill='currentColor'
                      viewBox='0 0 24 24'
                    >
                      <path d='M12.017 0C5.396 0 .029 5.367.029 11.987c0 6.62 5.367 11.987 11.988 11.987s11.987-5.367 11.987-11.987C24.014 5.367 18.647.001 12.017.001zM8.449 16.988c-1.297 0-2.448-.49-3.323-1.297C4.198 14.895 3.708 13.744 3.708 12.447s.49-2.448 1.418-3.323c.875-.807 2.026-1.297 3.323-1.297s2.448.49 3.323 1.297c.928.875 1.418 2.026 1.418 3.323s-.49 2.448-1.418 3.244c-.875.807-2.026 1.297-3.323 1.297zm7.718-1.297c-.875.807-2.026 1.297-3.323 1.297s-2.448-.49-3.323-1.297c-.928-.875-1.418-2.026-1.418-3.323s.49-2.448 1.418-3.323c.875-.807 2.026-1.297 3.323-1.297s2.448.49 3.323 1.297c.928.875 1.418 2.026 1.418 3.323s-.49 2.448-1.418 3.244z' />
                    </svg>
                  </a>
                )}
                {user.socialLinks.website && (
                  <a
                    href={user.socialLinks.website}
                    target='_blank'
                    rel='noopener noreferrer'
                    class='text-gray-400 hover:text-gray-600 transition-colors'
                  >
                    <svg
                      class='w-5 h-5'
                      fill='none'
                      stroke='currentColor'
                      viewBox='0 0 24 24'
                    >
                      <path
                        stroke-linecap='round'
                        stroke-linejoin='round'
                        stroke-width='2'
                        d='M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14'
                      />
                    </svg>
                  </a>
                )}
              </div>
            )
          }

          <!-- Join Date -->
          <p class='text-sm text-gray-500'>
            Joined {formatDate(user.joinedAt)}
          </p>
        </div>
      </div>

      <!-- Action Buttons -->
      <div class='flex items-center space-x-3'>
        {
          isOwnProfile ? (
            <Button variant='outline' size='md' onclick='editProfile()'>
              Edit Profile
            </Button>
          ) : (
            <>
              {showFollowButton && (
                <Button
                  id='follow-btn'
                  variant='primary'
                  size='md'
                  onclick='toggleFollow("${user.id}")'
                >
                  Follow
                </Button>
              )}
              <Button
                variant='outline'
                size='md'
                onclick='messageUser("${user.id}")'
              >
                Message
              </Button>
            </>
          )
        }
      </div>
    </div>

    <!-- Stats -->
    <div class='grid grid-cols-2 md:grid-cols-4 gap-6 mb-6'>
      <div class='text-center'>
        <p class='text-2xl font-bold text-gray-900'>
          {formatNumber(user.followers)}
        </p>
        <p class='text-sm text-gray-500'>Followers</p>
      </div>
      <div class='text-center'>
        <p class='text-2xl font-bold text-gray-900'>
          {formatNumber(user.following)}
        </p>
        <p class='text-sm text-gray-500'>Following</p>
      </div>
      <div class='text-center'>
        <p class='text-2xl font-bold text-gray-900'>
          {formatNumber(user.listings)}
        </p>
        <p class='text-sm text-gray-500'>Listings</p>
      </div>
      <div class='text-center'>
        <p class='text-2xl font-bold text-gray-900'>
          {formatNumber(user.sales)}
        </p>
        <p class='text-sm text-gray-500'>Sales</p>
      </div>
    </div>

    <!-- Performance Stats -->
    <div class='grid grid-cols-1 md:grid-cols-3 gap-6 mb-6'>
      <div class='text-center p-4 bg-gray-50 rounded-lg'>
        <p class='text-lg font-semibold text-gray-900'>
          ${user.stats.totalVolume.toLocaleString()}
        </p>
        <p class='text-sm text-gray-500'>Total Volume</p>
      </div>
      <div class='text-center p-4 bg-gray-50 rounded-lg'>
        <div class='flex items-center justify-center space-x-1'>
          <p class='text-lg font-semibold text-gray-900'>
            {user.stats.averageRating.toFixed(1)}
          </p>
          <svg
            class='w-4 h-4 text-yellow-400'
            fill='currentColor'
            viewBox='0 0 20 20'
          >
            <path
              d='M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z'
            ></path>
          </svg>
        </div>
        <p class='text-sm text-gray-500'>
          Rating ({user.stats.reviewCount} reviews)
        </p>
      </div>
      <div class='text-center p-4 bg-gray-50 rounded-lg'>
        <p class='text-lg font-semibold text-gray-900'>
          {user.stats.totalSales}
        </p>
        <p class='text-sm text-gray-500'>Total Sales</p>
      </div>
    </div>

    <!-- Badges -->
    {
      user.badges && user.badges.length > 0 && (
        <div class='mb-6'>
          <h3 class='text-lg font-semibold text-gray-900 mb-3'>Badges</h3>
          <div class='flex flex-wrap gap-2'>
            {user.badges.map(badge => (
              <div
                key={badge.id}
                class='flex items-center space-x-2 px-3 py-2 rounded-full text-sm'
                style={`background-color: ${badge.color}20; color: ${badge.color}`}
              >
                <span>{badge.icon}</span>
                <span class='font-medium'>{badge.name}</span>
              </div>
            ))}
          </div>
        </div>
      )
    }
  </div>
</Card>

<script>
  // Toggle follow
  function toggleFollow(userId: string) {
    const followBtn = document.getElementById('follow-btn');
    if (!followBtn) return;

    const isFollowing = followBtn.textContent === 'Following';

    // Mock follow/unfollow - replace with actual API call
    if (isFollowing) {
      followBtn.textContent = 'Follow';
      followBtn.className = followBtn.className.replace(
        'bg-gray-500',
        'bg-soladia-primary'
      );
      showNotification('Unfollowed user', 'info');
    } else {
      followBtn.textContent = 'Following';
      followBtn.className = followBtn.className.replace(
        'bg-soladia-primary',
        'bg-gray-500'
      );
      showNotification('Following user', 'success');
    }
  }

  // Message user
  function messageUser(userId: string) {
    // Mock messaging - replace with actual implementation
    showNotification('Opening message dialog...', 'info');
    console.log('Messaging user:', userId);
  }

  // Edit profile
  function editProfile() {
    // Mock edit profile - replace with actual implementation
    showNotification('Opening profile editor...', 'info');
    console.log('Editing profile');
  }

  // Show notification
  function showNotification(
    message: string,
    type: 'success' | 'error' | 'info'
  ) {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 p-4 rounded-md text-white z-50 ${
      type === 'success'
        ? 'bg-green-500'
        : type === 'error'
          ? 'bg-red-500'
          : 'bg-blue-500'
    }`;
    notification.textContent = message;
    document.body.appendChild(notification);

    setTimeout(() => {
      notification.remove();
    }, 3000);
  }
</script>

<style>
  .user-profile {
    position: relative;
  }

  .user-profile .avatar {
    z-index: 10;
  }
</style>
