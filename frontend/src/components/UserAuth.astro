---
export interface Props {
  showLogin?: boolean;
  showSignup?: boolean;
  showWalletConnect?: boolean;
  className?: string;
  onAuthSuccess?: (user: any) => void;
  onAuthError?: (error: string) => void;
}

const {
  showLogin = true,
  showSignup = true,
  showWalletConnect = true,
  className = '',
  onAuthSuccess,
  onAuthError,
} = Astro.props;
---

<div class={`user-auth ${className}`} data-testid='user-auth'>
  <div class='auth-container'>
    <!-- Login Form -->
    {
      showLogin && (
        <div class='auth-form' id='login-form'>
          <h2 class='auth-title'>Sign In</h2>
          <form class='form' id='login-form-element'>
            <div class='form-group'>
              <label for='login-email' class='form-label'>
                Email
              </label>
              <input
                type='email'
                id='login-email'
                class='form-input'
                placeholder='Enter your email'
                required
                data-testid='login-email'
              />
            </div>

            <div class='form-group'>
              <label for='login-password' class='form-label'>
                Password
              </label>
              <input
                type='password'
                id='login-password'
                class='form-input'
                placeholder='Enter your password'
                required
                data-testid='login-password'
              />
            </div>

            <div class='form-options'>
              <label class='checkbox-label'>
                <input
                  type='checkbox'
                  id='remember-me'
                  data-testid='remember-me'
                />
                <span class='checkmark' />
                Remember me
              </label>
              <a href='#' class='forgot-password' data-testid='forgot-password'>
                Forgot password?
              </a>
            </div>

            <button
              type='submit'
              class='btn btn-primary'
              data-testid='login-submit'
            >
              Sign In
            </button>
          </form>

          <div class='auth-divider'>
            <span>or</span>
          </div>
        </div>
      )
    }

    <!-- Signup Form -->
    {
      showSignup && (
        <div class='auth-form' id='signup-form'>
          <h2 class='auth-title'>Create Account</h2>
          <form class='form' id='signup-form-element'>
            <div class='form-row'>
              <div class='form-group'>
                <label for='signup-firstname' class='form-label'>
                  First Name
                </label>
                <input
                  type='text'
                  id='signup-firstname'
                  class='form-input'
                  placeholder='First name'
                  required
                  data-testid='signup-firstname'
                />
              </div>

              <div class='form-group'>
                <label for='signup-lastname' class='form-label'>
                  Last Name
                </label>
                <input
                  type='text'
                  id='signup-lastname'
                  class='form-input'
                  placeholder='Last name'
                  required
                  data-testid='signup-lastname'
                />
              </div>
            </div>

            <div class='form-group'>
              <label for='signup-username' class='form-label'>
                Username
              </label>
              <input
                type='text'
                id='signup-username'
                class='form-input'
                placeholder='Choose a username'
                required
                data-testid='signup-username'
              />
            </div>

            <div class='form-group'>
              <label for='signup-email' class='form-label'>
                Email
              </label>
              <input
                type='email'
                id='signup-email'
                class='form-input'
                placeholder='Enter your email'
                required
                data-testid='signup-email'
              />
            </div>

            <div class='form-group'>
              <label for='signup-password' class='form-label'>
                Password
              </label>
              <input
                type='password'
                id='signup-password'
                class='form-input'
                placeholder='Create a password'
                required
                data-testid='signup-password'
              />
            </div>

            <div class='form-group'>
              <label for='signup-confirm-password' class='form-label'>
                Confirm Password
              </label>
              <input
                type='password'
                id='signup-confirm-password'
                class='form-input'
                placeholder='Confirm your password'
                required
                data-testid='signup-confirm-password'
              />
            </div>

            <div class='form-options'>
              <label class='checkbox-label'>
                <input
                  type='checkbox'
                  id='agree-terms'
                  required
                  data-testid='agree-terms'
                />
                <span class='checkmark' />I agree to the{' '}
                <a href='/terms' class='link'>
                  Terms of Service
                </a>{' '}
                and{' '}
                <a href='/privacy' class='link'>
                  Privacy Policy
                </a>
              </label>
            </div>

            <button
              type='submit'
              class='btn btn-primary'
              data-testid='signup-submit'
            >
              Create Account
            </button>
          </form>

          <div class='auth-divider'>
            <span>or</span>
          </div>
        </div>
      )
    }

    <!-- Wallet Connect -->
    {
      showWalletConnect && (
        <div class='wallet-connect'>
          <h3 class='wallet-title'>Connect with Solana Wallet</h3>
          <p class='wallet-description'>
            Connect your Solana wallet to access all features
          </p>

          <div class='wallet-buttons'>
            <button
              class='wallet-btn phantom-btn'
              id='phantom-connect'
              data-testid='phantom-connect'
            >
              <img
                src='https://phantom.app/img/phantom-logo.svg'
                alt='Phantom'
                class='wallet-icon'
              />
              <span>Phantom</span>
            </button>

            <button
              class='wallet-btn solflare-btn'
              id='solflare-connect'
              data-testid='solflare-connect'
            >
              <img
                src='https://solflare.com/assets/solflare-logo.svg'
                alt='Solflare'
                class='wallet-icon'
              />
              <span>Solflare</span>
            </button>

            <button
              class='wallet-btn backpack-btn'
              id='backpack-connect'
              data-testid='backpack-connect'
            >
              <img
                src='https://backpack.app/assets/backpack-logo.svg'
                alt='Backpack'
                class='wallet-icon'
              />
              <span>Backpack</span>
            </button>
          </div>

          <div
            class='wallet-status'
            id='wallet-status'
            data-testid='wallet-status'
            style='display: none;'
          >
            <div class='wallet-info'>
              <span
                class='wallet-address'
                id='wallet-address'
                data-testid='wallet-address'
              />
              <button
                class='wallet-disconnect'
                id='wallet-disconnect'
                data-testid='wallet-disconnect'
              >
                Disconnect
              </button>
            </div>
          </div>
        </div>
      )
    }

    <!-- Social Login -->
    <div class='social-login'>
      <div class='social-divider'>
        <span>or continue with</span>
      </div>

      <div class='social-buttons'>
        <button
          class='social-btn google-btn'
          id='google-login'
          data-testid='google-login'
        >
          <svg class='social-icon' viewBox='0 0 24 24'>
            <path
              fill='#4285F4'
              d='M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z'
            ></path>
            <path
              fill='#34A853'
              d='M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z'
            ></path>
            <path
              fill='#FBBC05'
              d='M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z'
            ></path>
            <path
              fill='#EA4335'
              d='M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z'
            ></path>
          </svg>
          Google
        </button>

        <button
          class='social-btn github-btn'
          id='github-login'
          data-testid='github-login'
        >
          <svg class='social-icon' viewBox='0 0 24 24'>
            <path
              fill='currentColor'
              d='M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z'
            ></path>
          </svg>
          GitHub
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  .user-auth {
    @apply w-full max-w-md mx-auto;
  }

  .auth-container {
    @apply space-y-6;
  }

  .auth-form {
    @apply bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700;
  }

  .auth-title {
    @apply text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center;
  }

  .form {
    @apply space-y-4;
  }

  .form-row {
    @apply grid grid-cols-2 gap-4;
  }

  .form-group {
    @apply space-y-2;
  }

  .form-label {
    @apply block text-sm font-medium text-gray-700 dark:text-gray-300;
  }

  .form-input {
    @apply w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-2 focus:ring-soladia-primary focus:border-transparent outline-none transition-all duration-200 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400;
  }

  .form-options {
    @apply flex items-center justify-between;
  }

  .checkbox-label {
    @apply flex items-center space-x-2 cursor-pointer text-sm text-gray-700 dark:text-gray-300;
  }

  .checkbox-label input[type='checkbox'] {
    @apply sr-only;
  }

  .checkmark {
    @apply w-4 h-4 border-2 border-gray-300 dark:border-gray-600 rounded flex items-center justify-center transition-all duration-200;
  }

  .checkbox-label input[type='checkbox']:checked + .checkmark {
    @apply bg-soladia-primary border-soladia-primary;
  }

  .checkbox-label input[type='checkbox']:checked + .checkmark::after {
    content: '✓';
    @apply text-white text-xs font-bold;
  }

  .forgot-password {
    @apply text-sm text-soladia-primary hover:text-soladia-primary/80 transition-colors duration-200;
  }

  .btn {
    @apply w-full px-4 py-2 rounded-md font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
  }

  .btn-primary {
    @apply bg-soladia-primary text-white hover:bg-soladia-primary/90 focus:ring-soladia-primary;
  }

  .auth-divider {
    @apply relative text-center my-6;
  }

  .auth-divider::before {
    content: '';
    @apply absolute top-1/2 left-0 right-0 h-px bg-gray-300 dark:bg-gray-600;
  }

  .auth-divider span {
    @apply relative bg-white dark:bg-gray-800 px-4 text-gray-500 dark:text-gray-400 text-sm;
  }

  .wallet-connect {
    @apply bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700;
  }

  .wallet-title {
    @apply text-xl font-semibold text-gray-900 dark:text-white mb-2 text-center;
  }

  .wallet-description {
    @apply text-gray-600 dark:text-gray-400 text-center mb-6;
  }

  .wallet-buttons {
    @apply grid grid-cols-1 gap-3;
  }

  .wallet-btn {
    @apply flex items-center justify-center space-x-3 px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-soladia-primary;
  }

  .wallet-icon {
    @apply w-6 h-6;
  }

  .wallet-status {
    @apply mt-4 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-md;
  }

  .wallet-info {
    @apply flex items-center justify-between;
  }

  .wallet-address {
    @apply text-sm font-mono text-green-800 dark:text-green-200;
  }

  .wallet-disconnect {
    @apply text-sm text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors duration-200;
  }

  .social-login {
    @apply space-y-4;
  }

  .social-divider {
    @apply relative text-center;
  }

  .social-divider::before {
    content: '';
    @apply absolute top-1/2 left-0 right-0 h-px bg-gray-300 dark:bg-gray-600;
  }

  .social-divider span {
    @apply relative bg-white dark:bg-gray-800 px-4 text-gray-500 dark:text-gray-400 text-sm;
  }

  .social-buttons {
    @apply grid grid-cols-2 gap-3;
  }

  .social-btn {
    @apply flex items-center justify-center space-x-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-soladia-primary;
  }

  .social-icon {
    @apply w-5 h-5;
  }

  .link {
    @apply text-soladia-primary hover:text-soladia-primary/80 transition-colors duration-200;
  }

  /* Responsive design */
  @media (max-width: 640px) {
    .form-row {
      @apply grid-cols-1;
    }

    .social-buttons {
      @apply grid-cols-1;
    }
  }

  /* Dark mode transitions */
  .auth-form,
  .wallet-connect,
  .form-input,
  .wallet-btn,
  .social-btn {
    @apply theme-transitioning;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Form elements
    const loginForm = document.getElementById(
      'login-form-element'
    ) as HTMLFormElement;
    const signupForm = document.getElementById(
      'signup-form-element'
    ) as HTMLFormElement;
    const phantomBtn = document.getElementById(
      'phantom-connect'
    ) as HTMLButtonElement;
    const solflareBtn = document.getElementById(
      'solflare-connect'
    ) as HTMLButtonElement;
    const backpackBtn = document.getElementById(
      'backpack-connect'
    ) as HTMLButtonElement;
    const walletStatus = document.getElementById(
      'wallet-status'
    ) as HTMLDivElement;
    const walletAddress = document.getElementById(
      'wallet-address'
    ) as HTMLSpanElement;
    const walletDisconnect = document.getElementById(
      'wallet-disconnect'
    ) as HTMLButtonElement;

    // Handle login form submission
    loginForm?.addEventListener('submit', async e => {
      e.preventDefault();
      const formData = new FormData(loginForm);
      const email = (document.getElementById('login-email') as HTMLInputElement)
        ?.value;
      const password = (
        document.getElementById('login-password') as HTMLInputElement
      )?.value;

      try {
        // Simulate API call
        const response = await fetch('/api/auth/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ email, password }),
        });

        if (response.ok) {
          const user = await response.json();

          // Store auth data
          localStorage.setItem('auth_token', user.access_token || user.token);
          localStorage.setItem('user_data', JSON.stringify(user.user || user));

          // Dispatch auth state change event
          window.dispatchEvent(new CustomEvent('authStateChanged'));

          if (window.handleAuthSuccess) {
            window.handleAuthSuccess(user);
          }
        } else {
          throw new Error('Login failed');
        }
      } catch (error) {
        console.error('Login error:', error);
        if (window.handleAuthError) {
          window.handleAuthError('Login failed. Please try again.');
        }
      }
    });

    // Handle signup form submission
    signupForm?.addEventListener('submit', async e => {
      e.preventDefault();
      const formData = new FormData(signupForm);
      const userData = {
        first_name: (
          document.getElementById('signup-firstname') as HTMLInputElement
        )?.value,
        last_name: (
          document.getElementById('signup-lastname') as HTMLInputElement
        )?.value,
        username: (
          document.getElementById('signup-username') as HTMLInputElement
        )?.value,
        email: (document.getElementById('signup-email') as HTMLInputElement)
          ?.value,
        password: (
          document.getElementById('signup-password') as HTMLInputElement
        )?.value,
        confirm_password: (
          document.getElementById('signup-confirm-password') as HTMLInputElement
        )?.value,
      };

      // Validate password confirmation
      if (userData.password !== userData.confirm_password) {
        if (window.handleAuthError) {
          window.handleAuthError('Passwords do not match');
        }
        return;
      }

      try {
        const response = await fetch('/api/auth/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(userData),
        });

        if (response.ok) {
          const user = await response.json();
          if (window.handleAuthSuccess) {
            window.handleAuthSuccess(user);
          }
        } else {
          throw new Error('Registration failed');
        }
      } catch (error) {
        console.error('Registration error:', error);
        if (window.handleAuthError) {
          window.handleAuthError('Registration failed. Please try again.');
        }
      }
    });

    // Handle wallet connections
    phantomBtn?.addEventListener('click', async () => {
      try {
        if (typeof window !== 'undefined' && window.solana?.isPhantom) {
          const response = await window.solana.connect();
          const address = response.publicKey.toString();

          walletAddress.textContent = `${address.slice(0, 8)}...${address.slice(-8)}`;
          walletStatus.style.display = 'block';

          if (window.handleAuthSuccess) {
            window.handleAuthSuccess({
              type: 'wallet',
              wallet: 'phantom',
              address,
            });
          }
        } else {
          throw new Error('Phantom wallet not found');
        }
      } catch (error) {
        console.error('Phantom connection error:', error);
        if (window.handleAuthError) {
          window.handleAuthError('Failed to connect to Phantom wallet');
        }
      }
    });

    solflareBtn?.addEventListener('click', async () => {
      try {
        // Simulate Solflare connection
        const address = 'mock-solflare-address';
        walletAddress.textContent = `${address.slice(0, 8)}...${address.slice(-8)}`;
        walletStatus.style.display = 'block';

        if (window.handleAuthSuccess) {
          window.handleAuthSuccess({
            type: 'wallet',
            wallet: 'solflare',
            address,
          });
        }
      } catch (error) {
        console.error('Solflare connection error:', error);
        if (window.handleAuthError) {
          window.handleAuthError('Failed to connect to Solflare wallet');
        }
      }
    });

    backpackBtn?.addEventListener('click', async () => {
      try {
        // Simulate Backpack connection
        const address = 'mock-backpack-address';
        walletAddress.textContent = `${address.slice(0, 8)}...${address.slice(-8)}`;
        walletStatus.style.display = 'block';

        if (window.handleAuthSuccess) {
          window.handleAuthSuccess({
            type: 'wallet',
            wallet: 'backpack',
            address,
          });
        }
      } catch (error) {
        console.error('Backpack connection error:', error);
        if (window.handleAuthError) {
          window.handleAuthError('Failed to connect to Backpack wallet');
        }
      }
    });

    // Handle wallet disconnect
    walletDisconnect?.addEventListener('click', async () => {
      try {
        if (window.solana?.disconnect) {
          await window.solana.disconnect();
        }

        walletStatus.style.display = 'none';

        if (window.handleAuthSuccess) {
          window.handleAuthSuccess({ type: 'disconnect' });
        }
      } catch (error) {
        console.error('Disconnect error:', error);
      }
    });

    // Handle social login
    document.getElementById('google-login')?.addEventListener('click', () => {
      if (window.handleAuthError) {
        window.handleAuthError('Google login will be implemented with OAuth');
      }
    });

    document.getElementById('github-login')?.addEventListener('click', () => {
      if (window.handleAuthError) {
        window.handleAuthError('GitHub login will be implemented with OAuth');
      }
    });
  });
</script>
