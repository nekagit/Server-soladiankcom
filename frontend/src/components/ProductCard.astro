---
export interface Props {
  product?: {
    id: number;
    name: string;
    description: string;
    price: number;
    originalPrice?: number;
    image: string;
    rating?: number;
    reviewCount?: number;
    seller: string;
    location?: string;
    category: string;
    nft?: boolean;
    solana?: boolean;
    badge?: 'Featured' | 'New' | 'Sale' | 'Eco';
    condition?: string;
  };
  showSolana?: boolean;
  showNFT?: boolean;
  // Legacy props for backward compatibility
  id?: number;
  title?: string;
  description?: string;
  price?: number;
  originalPrice?: number;
  image?: string;
  rating?: number;
  reviewCount?: number;
  seller?: string;
  location?: string;
  badge?: 'Featured' | 'New' | 'Sale' | 'Eco';
  condition?: string;
}

const { 
  product,
  showSolana = false,
  showNFT = false,
  // Legacy props
  id: legacyId, 
  title: legacyTitle, 
  description: legacyDescription, 
  price: legacyPrice, 
  originalPrice, 
  image: legacyImage, 
  rating: legacyRating, 
  reviewCount: legacyReviewCount, 
  seller: legacySeller, 
  location: legacyLocation, 
  badge,
  condition = 'New'
} = Astro.props;

// Use product object if provided, otherwise use legacy props
const id = product?.id || legacyId || 0;
const title = product?.name || legacyTitle || '';
const description = product?.description || legacyDescription || '';
const price = product?.price || legacyPrice || 0;
const image = product?.image || legacyImage || '';
const rating = product?.rating || legacyRating || 0;
const reviewCount = product?.reviewCount || legacyReviewCount || 0;
const seller = product?.seller || legacySeller || '';
const location = product?.location || legacyLocation || '';
const category = product?.category || '';
const nft = product?.nft || false;
const solana = product?.solana || false;

const formatPrice = (price: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(price);
};

const formatRating = (rating: number) => {
  return '⭐'.repeat(Math.floor(rating)) + (rating % 1 >= 0.5 ? '⭐' : '');
};
---

<div class="product-card" data-product-id={id}>
  <div class="product-image">
    <img src={image} alt={title} class="w-full h-48 object-cover rounded-lg" />
    {badge && <div class="product-badge">{badge}</div>}
  </div>
  <div class="product-info">
    <div class="flex items-start justify-between mb-2">
      <h3 class="product-title">{title}</h3>
      <div class="flex space-x-1">
        {nft && showNFT && (
          <span class="px-2 py-1 text-xs bg-purple-100 text-purple-800 rounded-full">NFT</span>
        )}
        {solana && showSolana && (
          <span class="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">SOL</span>
        )}
      </div>
    </div>
    <p class="product-description">{description}</p>
    <div class="product-price">
      <span class="price-current">{formatPrice(price)}</span>
      {originalPrice && originalPrice > price && (
        <span class="price-original">{formatPrice(originalPrice)}</span>
      )}
    </div>
    <div class="product-meta">
      <span class="product-rating">
        {formatRating(rating)} ({reviewCount})
      </span>
      <span class="product-seller">by {seller}</span>
    </div>
    <div class="mt-2 text-sm text-gray-500">
      <span>{category}</span>
      {location && (
        <>
          <span class="mx-2">•</span>
          <span>{location}</span>
        </>
      )}
      <span class="mx-2">•</span>
      <span>{condition}</span>
    </div>
  </div>
</div>

<script>
  // Add click handler for product cards
  document.addEventListener('DOMContentLoaded', () => {
    const productCards = document.querySelectorAll('.product-card');
    
    productCards.forEach(card => {
      card.addEventListener('click', () => {
        const productId = card.getAttribute('data-product-id');
        if (productId) {
          window.location.href = `/product/${productId}`;
        }
      });
      
      // Add hover effects
      card.addEventListener('mouseenter', function() {
        this.style.transform = 'translateY(-4px)';
      });
      
      card.addEventListener('mouseleave', function() {
        this.style.transform = 'translateY(0)';
      });
    });
  });
</script>
