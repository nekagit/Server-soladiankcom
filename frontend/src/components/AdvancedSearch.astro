---
// AdvancedSearch.astro - Advanced search with AI recommendations and filters
export interface Props {
  placeholder?: string;
  showFilters?: boolean;
  showRecommendations?: boolean;
  searchTypes?: string[];
  onSearch?: (query: string, filters: any) => void;
  onRecommendationClick?: (recommendation: any) => void;
}

const {
  placeholder = "Search products, NFTs, collections...",
  showFilters = true,
  showRecommendations = true,
  searchTypes = ['products', 'nfts', 'collections', 'users'],
  onSearch,
  onRecommendationClick
} = Astro.props;

// Mock search suggestions and recommendations
const searchSuggestions = [
  "Solana NFTs",
  "Digital Art",
  "Gaming Items",
  "Collectibles",
  "Rare Tokens",
  "Crypto Art",
  "Virtual Real Estate",
  "Music NFTs"
];

const aiRecommendations = [
  {
    id: 1,
    type: "trending",
    title: "Trending This Week",
    items: [
      { name: "Bored Ape #1234", price: 15.5, image: "/images/nft1.jpg" },
      { name: "CryptoPunk #5678", price: 25.0, image: "/images/nft2.jpg" }
    ]
  },
  {
    id: 2,
    type: "personalized",
    title: "Recommended for You",
    items: [
      { name: "Digital Art Collection", price: 8.5, image: "/images/nft3.jpg" },
      { name: "Gaming NFT Pack", price: 12.0, image: "/images/nft4.jpg" }
    ]
  },
  {
    id: 3,
    type: "new",
    title: "Newly Listed",
    items: [
      { name: "Fresh NFT Drop", price: 5.0, image: "/images/nft5.jpg" },
      { name: "Limited Edition", price: 18.0, image: "/images/nft6.jpg" }
    ]
  }
];
---

<div class="advanced-search" id="advanced-search">
  <div class="search-container">
    <div class="search-input-container">
      <div class="search-icon">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="11" cy="11" r="8"></circle>
          <path d="m21 21-4.35-4.35"></path>
        </svg>
      </div>
      <input 
        type="text" 
        class="search-input" 
        id="search-input"
        placeholder={placeholder}
        autocomplete="off"
      />
      <button class="search-button" id="search-button">
        Search
      </button>
      <button class="filter-toggle" id="filter-toggle">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polygon points="22,3 2,3 10,12.46 10,19 14,21 14,12.46"></polygon>
        </svg>
        Filters
      </button>
    </div>

    {showRecommendations && (
      <div class="ai-recommendations" id="ai-recommendations">
        <h3 class="recommendations-title">AI Recommendations</h3>
        <div class="recommendations-grid">
          {aiRecommendations.map((recommendation) => (
            <div class="recommendation-card" data-type={recommendation.type}>
              <h4 class="recommendation-title">{recommendation.title}</h4>
              <div class="recommendation-items">
                {recommendation.items.map((item, index) => (
                  <div class="recommendation-item" data-item-id={item.name}>
                    <img src={item.image} alt={item.name} class="item-image" />
                    <div class="item-info">
                      <span class="item-name">{item.name}</span>
                      <span class="item-price">{item.price} SOL</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    )}

    <div class="search-suggestions" id="search-suggestions">
      <div class="suggestions-header">
        <span class="suggestions-title">Popular Searches</span>
        <button class="clear-suggestions" id="clear-suggestions">Clear</button>
      </div>
      <div class="suggestions-list">
        {searchSuggestions.map((suggestion) => (
          <button class="suggestion-item" data-suggestion={suggestion}>
            {suggestion}
          </button>
        ))}
      </div>
    </div>
  </div>

  {showFilters && (
    <div class="search-filters" id="search-filters">
      <div class="filters-header">
        <h3 class="filters-title">Advanced Filters</h3>
        <button class="close-filters" id="close-filters">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>

      <div class="filters-content">
        <div class="filter-section">
          <h4 class="filter-section-title">Search Type</h4>
          <div class="filter-options">
            {searchTypes.map((type) => (
              <label class="filter-option">
                <input type="checkbox" value={type} class="filter-checkbox" />
                <span class="filter-label">{type.charAt(0).toUpperCase() + type.slice(1)}</span>
              </label>
            ))}
          </div>
        </div>

        <div class="filter-section">
          <h4 class="filter-section-title">Price Range</h4>
          <div class="price-range">
            <input type="range" min="0" max="100" value="50" class="price-slider" id="price-min" />
            <input type="range" min="0" max="100" value="100" class="price-slider" id="price-max" />
            <div class="price-labels">
              <span class="price-label">0 SOL</span>
              <span class="price-label">100+ SOL</span>
            </div>
          </div>
        </div>

        <div class="filter-section">
          <h4 class="filter-section-title">Categories</h4>
          <div class="filter-options">
            <label class="filter-option">
              <input type="checkbox" value="art" class="filter-checkbox" />
              <span class="filter-label">Digital Art</span>
            </label>
            <label class="filter-option">
              <input type="checkbox" value="gaming" class="filter-checkbox" />
              <span class="filter-label">Gaming</span>
            </label>
            <label class="filter-option">
              <input type="checkbox" value="music" class="filter-checkbox" />
              <span class="filter-label">Music</span>
            </label>
            <label class="filter-option">
              <input type="checkbox" value="collectibles" class="filter-checkbox" />
              <span class="filter-label">Collectibles</span>
            </label>
          </div>
        </div>

        <div class="filter-section">
          <h4 class="filter-section-title">Sort By</h4>
          <select class="sort-select" id="sort-select">
            <option value="relevance">Relevance</option>
            <option value="price-low">Price: Low to High</option>
            <option value="price-high">Price: High to Low</option>
            <option value="newest">Newest First</option>
            <option value="oldest">Oldest First</option>
            <option value="popularity">Most Popular</option>
          </select>
        </div>

        <div class="filter-actions">
          <button class="apply-filters" id="apply-filters">Apply Filters</button>
          <button class="reset-filters" id="reset-filters">Reset</button>
        </div>
      </div>
    </div>
  )}

  <div class="search-results" id="search-results">
    <div class="results-header">
      <span class="results-count">0 results found</span>
      <div class="results-actions">
        <button class="view-toggle active" data-view="grid" id="grid-view">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="3" width="7" height="7"></rect>
            <rect x="14" y="3" width="7" height="7"></rect>
            <rect x="14" y="14" width="7" height="7"></rect>
            <rect x="3" y="14" width="7" height="7"></rect>
          </svg>
        </button>
        <button class="view-toggle" data-view="list" id="list-view">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="8" y1="6" x2="21" y2="6"></line>
            <line x1="8" y1="12" x2="21" y2="12"></line>
            <line x1="8" y1="18" x2="21" y2="18"></line>
            <line x1="3" y1="6" x2="3.01" y2="6"></line>
            <line x1="3" y1="12" x2="3.01" y2="12"></line>
            <line x1="3" y1="18" x2="3.01" y2="18"></line>
          </svg>
        </button>
      </div>
    </div>
    <div class="results-grid" id="results-grid">
      <div class="no-results">
        <div class="no-results-icon">üîç</div>
        <h3>No results found</h3>
        <p>Try adjusting your search terms or filters</p>
      </div>
    </div>
  </div>
</div>

<script>
  class AdvancedSearch {
    private searchInput: HTMLInputElement | null = null;
    private searchButton: HTMLButtonElement | null = null;
    private filterToggle: HTMLButtonElement | null = null;
    private searchFilters: HTMLElement | null = null;
    private searchResults: HTMLElement | null = null;
    private resultsGrid: HTMLElement | null = null;
    private searchSuggestions: HTMLElement | null = null;
    private aiRecommendations: HTMLElement | null = null;
    
    private currentQuery: string = '';
    private currentFilters: any = {};
    private searchTimeout: number | null = null;
    private isSearching: boolean = false;

    constructor() {
      this.initializeElements();
      this.setupEventListeners();
      this.loadSearchHistory();
    }

    private initializeElements() {
      // This will be called when the component is mounted
    }

    private setupEventListeners() {
      document.addEventListener('DOMContentLoaded', () => {
        this.searchInput = document.getElementById('search-input') as HTMLInputElement;
        this.searchButton = document.getElementById('search-button') as HTMLButtonElement;
        this.filterToggle = document.getElementById('filter-toggle') as HTMLButtonElement;
        this.searchFilters = document.getElementById('search-filters');
        this.searchResults = document.getElementById('search-results');
        this.resultsGrid = document.getElementById('results-grid');
        this.searchSuggestions = document.getElementById('search-suggestions');
        this.aiRecommendations = document.getElementById('ai-recommendations');

        // Search input events
        this.searchInput?.addEventListener('input', (e) => this.handleSearchInput(e));
        this.searchInput?.addEventListener('focus', () => this.showSuggestions());
        this.searchInput?.addEventListener('blur', () => this.hideSuggestions());

        // Search button
        this.searchButton?.addEventListener('click', () => this.performSearch());

        // Filter toggle
        this.filterToggle?.addEventListener('click', () => this.toggleFilters());

        // Suggestion clicks
        const suggestionItems = document.querySelectorAll('.suggestion-item');
        suggestionItems.forEach(item => {
          item.addEventListener('click', (e) => {
            const suggestion = (e.target as HTMLElement).getAttribute('data-suggestion');
            if (suggestion && this.searchInput) {
              this.searchInput.value = suggestion;
              this.performSearch();
            }
          });
        });

        // Recommendation clicks
        const recommendationItems = document.querySelectorAll('.recommendation-item');
        recommendationItems.forEach(item => {
          item.addEventListener('click', (e) => {
            const itemId = (e.target as HTMLElement).closest('.recommendation-item')?.getAttribute('data-item-id');
            if (itemId) {
              this.handleRecommendationClick(itemId);
            }
          });
        });

        // Filter events
        this.setupFilterEvents();

        // View toggle
        const viewToggles = document.querySelectorAll('.view-toggle');
        viewToggles.forEach(toggle => {
          toggle.addEventListener('click', (e) => {
            const view = (e.target as HTMLElement).getAttribute('data-view');
            if (view) {
              this.setViewMode(view);
            }
          });
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => this.handleKeyboardShortcuts(e));
      });
    }

    private setupFilterEvents() {
      // Close filters
      const closeFilters = document.getElementById('close-filters');
      closeFilters?.addEventListener('click', () => this.hideFilters());

      // Apply filters
      const applyFilters = document.getElementById('apply-filters');
      applyFilters?.addEventListener('click', () => this.applyFilters());

      // Reset filters
      const resetFilters = document.getElementById('reset-filters');
      resetFilters?.addEventListener('click', () => this.resetFilters());

      // Price range sliders
      const priceMin = document.getElementById('price-min') as HTMLInputElement;
      const priceMax = document.getElementById('price-max') as HTMLInputElement;
      
      if (priceMin && priceMax) {
        priceMin.addEventListener('input', () => this.updatePriceRange());
        priceMax.addEventListener('input', () => this.updatePriceRange());
      }

      // Clear suggestions
      const clearSuggestions = document.getElementById('clear-suggestions');
      clearSuggestions?.addEventListener('click', () => this.clearSuggestions());
    }

    private handleSearchInput(event: Event) {
      const target = event.target as HTMLInputElement;
      this.currentQuery = target.value;

      // Clear previous timeout
      if (this.searchTimeout) {
        clearTimeout(this.searchTimeout);
      }

      // Show suggestions if there's input
      if (this.currentQuery.length > 0) {
        this.showSuggestions();
        this.filterSuggestions(this.currentQuery);
      } else {
        this.hideSuggestions();
      }

      // Auto-search after delay
      this.searchTimeout = setTimeout(() => {
        if (this.currentQuery.length >= 2) {
          this.performSearch();
        }
      }, 500);
    }

    private filterSuggestions(query: string) {
      const suggestions = document.querySelectorAll('.suggestion-item');
      suggestions.forEach(item => {
        const text = item.textContent?.toLowerCase() || '';
        const matches = text.includes(query.toLowerCase());
        (item as HTMLElement).style.display = matches ? 'block' : 'none';
      });
    }

    private showSuggestions() {
      if (this.searchSuggestions) {
        this.searchSuggestions.style.display = 'block';
      }
    }

    private hideSuggestions() {
      // Delay hiding to allow clicks on suggestions
      setTimeout(() => {
        if (this.searchSuggestions) {
          this.searchSuggestions.style.display = 'none';
        }
      }, 200);
    }

    private async performSearch() {
      if (this.isSearching) return;

      this.isSearching = true;
      this.currentQuery = this.searchInput?.value || '';

      try {
        this.showLoadingState();
        
        // In a real implementation, this would call the search API
        const results = await this.searchAPI(this.currentQuery, this.currentFilters);
        
        this.displayResults(results);
        this.saveSearchHistory(this.currentQuery);
        this.hideSuggestions();
      } catch (error) {
        this.showErrorState('Search failed. Please try again.');
        console.error('Search error:', error);
      } finally {
        this.isSearching = false;
        this.hideLoadingState();
      }
    }

    private async searchAPI(query: string, filters: any): Promise<any[]> {
      // Mock API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Mock results
      return [
        {
          id: 1,
          name: 'Solana NFT #1234',
          price: 15.5,
          image: '/images/nft1.jpg',
          type: 'nft',
          category: 'art'
        },
        {
          id: 2,
          name: 'Digital Art Collection',
          price: 8.5,
          image: '/images/nft2.jpg',
          type: 'collection',
          category: 'art'
        }
      ];
    }

    private displayResults(results: any[]) {
      if (!this.resultsGrid) return;

      if (results.length === 0) {
        this.resultsGrid.innerHTML = `
          <div class="no-results">
            <div class="no-results-icon">üîç</div>
            <h3>No results found</h3>
            <p>Try adjusting your search terms or filters</p>
          </div>
        `;
        return;
      }

      this.resultsGrid.innerHTML = results.map(result => `
        <div class="result-item" data-id="${result.id}">
          <img src="${result.image}" alt="${result.name}" class="result-image" />
          <div class="result-info">
            <h4 class="result-name">${result.name}</h4>
            <p class="result-price">${result.price} SOL</p>
            <span class="result-type">${result.type}</span>
          </div>
        </div>
      `).join('');

      // Add click handlers to results
      const resultItems = this.resultsGrid.querySelectorAll('.result-item');
      resultItems.forEach(item => {
        item.addEventListener('click', () => {
          const id = item.getAttribute('data-id');
          if (id) {
            this.handleResultClick(id);
          }
        });
      });

      // Update results count
      const resultsCount = document.querySelector('.results-count');
      if (resultsCount) {
        resultsCount.textContent = `${results.length} result${results.length !== 1 ? 's' : ''} found`;
      }
    }

    private handleResultClick(id: string) {
      this.showNotification(`Opening item ${id}...`, 'info');
      // In a real implementation, this would navigate to the item details
    }

    private handleRecommendationClick(itemId: string) {
      this.showNotification(`Opening ${itemId}...`, 'info');
      // In a real implementation, this would navigate to the recommended item
    }

    private toggleFilters() {
      if (this.searchFilters) {
        const isVisible = this.searchFilters.style.display === 'block';
        this.searchFilters.style.display = isVisible ? 'none' : 'block';
      }
    }

    private hideFilters() {
      if (this.searchFilters) {
        this.searchFilters.style.display = 'none';
      }
    }

    private applyFilters() {
      const filters: any = {};

      // Get search type filters
      const typeCheckboxes = document.querySelectorAll('.filter-checkbox[value]');
      const selectedTypes: string[] = [];
      typeCheckboxes.forEach(checkbox => {
        if ((checkbox as HTMLInputElement).checked) {
          selectedTypes.push((checkbox as HTMLInputElement).value);
        }
      });
      if (selectedTypes.length > 0) {
        filters.types = selectedTypes;
      }

      // Get price range
      const priceMin = document.getElementById('price-min') as HTMLInputElement;
      const priceMax = document.getElementById('price-max') as HTMLInputElement;
      if (priceMin && priceMax) {
        filters.priceMin = parseFloat(priceMin.value);
        filters.priceMax = parseFloat(priceMax.value);
      }

      // Get sort option
      const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
      if (sortSelect) {
        filters.sort = sortSelect.value;
      }

      this.currentFilters = filters;
      this.performSearch();
      this.hideFilters();
    }

    private resetFilters() {
      // Reset all checkboxes
      const checkboxes = document.querySelectorAll('.filter-checkbox');
      checkboxes.forEach(checkbox => {
        (checkbox as HTMLInputElement).checked = false;
      });

      // Reset price sliders
      const priceMin = document.getElementById('price-min') as HTMLInputElement;
      const priceMax = document.getElementById('price-max') as HTMLInputElement;
      if (priceMin && priceMax) {
        priceMin.value = '0';
        priceMax.value = '100';
      }

      // Reset sort
      const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
      if (sortSelect) {
        sortSelect.value = 'relevance';
      }

      this.currentFilters = {};
    }

    private updatePriceRange() {
      const priceMin = document.getElementById('price-min') as HTMLInputElement;
      const priceMax = document.getElementById('price-max') as HTMLInputElement;
      
      if (priceMin && priceMax) {
        const min = parseFloat(priceMin.value);
        const max = parseFloat(priceMax.value);
        
        // Ensure min doesn't exceed max
        if (min > max) {
          priceMin.value = max.toString();
        }
      }
    }

    private setViewMode(view: string) {
      const viewToggles = document.querySelectorAll('.view-toggle');
      viewToggles.forEach(toggle => {
        toggle.classList.remove('active');
      });

      const activeToggle = document.querySelector(`[data-view="${view}"]`);
      if (activeToggle) {
        activeToggle.classList.add('active');
      }

      if (this.resultsGrid) {
        this.resultsGrid.className = `results-${view}`;
      }
    }

    private handleKeyboardShortcuts(event: KeyboardEvent) {
      // Ctrl/Cmd + K to focus search
      if ((event.ctrlKey || event.metaKey) && event.key === 'k') {
        event.preventDefault();
        this.searchInput?.focus();
      }

      // Escape to close filters
      if (event.key === 'Escape') {
        this.hideFilters();
        this.hideSuggestions();
      }

      // Enter to search
      if (event.key === 'Enter' && document.activeElement === this.searchInput) {
        this.performSearch();
      }
    }

    private showLoadingState() {
      if (this.resultsGrid) {
        this.resultsGrid.innerHTML = `
          <div class="loading-state">
            <div class="loading-spinner"></div>
            <p>Searching...</p>
          </div>
        `;
      }
    }

    private hideLoadingState() {
      // Loading state will be replaced by results
    }

    private showErrorState(message: string) {
      if (this.resultsGrid) {
        this.resultsGrid.innerHTML = `
          <div class="error-state">
            <div class="error-icon">‚ö†Ô∏è</div>
            <h3>Search Error</h3>
            <p>${message}</p>
            <button class="retry-button" onclick="window.location.reload()">Try Again</button>
          </div>
        `;
      }
    }

    private saveSearchHistory(query: string) {
      const history = this.getSearchHistory();
      if (!history.includes(query)) {
        history.unshift(query);
        history.splice(10); // Keep only last 10 searches
        localStorage.setItem('soladia_search_history', JSON.stringify(history));
      }
    }

    private loadSearchHistory() {
      const history = this.getSearchHistory();
      // In a real implementation, this would populate recent searches
    }

    private getSearchHistory(): string[] {
      try {
        return JSON.parse(localStorage.getItem('soladia_search_history') || '[]');
      } catch {
        return [];
      }
    }

    private clearSuggestions() {
      if (this.searchSuggestions) {
        this.searchSuggestions.style.display = 'none';
      }
    }

    private showNotification(message: string, type: 'success' | 'error' | 'info') {
      const notification = document.createElement('div');
      notification.className = `notification notification-${type}`;
      notification.textContent = message;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }
  }

  // Initialize search when DOM is loaded
  let advancedSearch: AdvancedSearch;
  
  document.addEventListener('DOMContentLoaded', () => {
    advancedSearch = new AdvancedSearch();
  });

  // Export for external use
  window.getAdvancedSearch = () => advancedSearch;
</script>

<style>
  .advanced-search {
    @apply w-full max-w-4xl mx-auto;
  }

  .search-container {
    @apply relative;
  }

  .search-input-container {
    @apply flex items-center bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden;
  }

  .search-icon {
    @apply p-3 text-gray-400;
  }

  .search-input {
    @apply flex-1 px-4 py-3 text-gray-900 placeholder-gray-500 focus:outline-none;
  }

  .search-button {
    @apply px-6 py-3 bg-blue-600 text-white font-medium hover:bg-blue-700 transition-colors;
  }

  .filter-toggle {
    @apply px-4 py-3 bg-gray-100 text-gray-700 font-medium hover:bg-gray-200 transition-colors flex items-center space-x-2;
  }

  .ai-recommendations {
    @apply mt-6 p-6 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg;
  }

  .recommendations-title {
    @apply text-lg font-semibold text-gray-900 mb-4;
  }

  .recommendations-grid {
    @apply grid grid-cols-1 md:grid-cols-3 gap-4;
  }

  .recommendation-card {
    @apply bg-white rounded-lg p-4 shadow-sm;
  }

  .recommendation-title {
    @apply font-medium text-gray-900 mb-3;
  }

  .recommendation-items {
    @apply space-y-2;
  }

  .recommendation-item {
    @apply flex items-center space-x-3 p-2 rounded hover:bg-gray-50 cursor-pointer;
  }

  .item-image {
    @apply w-10 h-10 rounded object-cover;
  }

  .item-info {
    @apply flex-1 min-w-0;
  }

  .item-name {
    @apply block text-sm font-medium text-gray-900 truncate;
  }

  .item-price {
    @apply block text-xs text-gray-600;
  }

  .search-suggestions {
    @apply absolute top-full left-0 right-0 mt-1 bg-white rounded-lg shadow-lg border border-gray-200 z-10 hidden;
  }

  .suggestions-header {
    @apply flex justify-between items-center p-3 border-b border-gray-200;
  }

  .suggestions-title {
    @apply text-sm font-medium text-gray-700;
  }

  .clear-suggestions {
    @apply text-xs text-blue-600 hover:text-blue-800;
  }

  .suggestions-list {
    @apply p-2;
  }

  .suggestion-item {
    @apply w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100 rounded;
  }

  .search-filters {
    @apply fixed inset-0 bg-black bg-opacity-50 z-50 hidden;
  }

  .filters-header {
    @apply flex justify-between items-center p-4 bg-white border-b border-gray-200;
  }

  .filters-title {
    @apply text-lg font-semibold text-gray-900;
  }

  .close-filters {
    @apply p-2 text-gray-400 hover:text-gray-600;
  }

  .filters-content {
    @apply bg-white h-full overflow-y-auto p-4;
  }

  .filter-section {
    @apply mb-6;
  }

  .filter-section-title {
    @apply text-sm font-medium text-gray-900 mb-3;
  }

  .filter-options {
    @apply space-y-2;
  }

  .filter-option {
    @apply flex items-center space-x-2 cursor-pointer;
  }

  .filter-checkbox {
    @apply rounded border-gray-300 text-blue-600 focus:ring-blue-500;
  }

  .filter-label {
    @apply text-sm text-gray-700;
  }

  .price-range {
    @apply space-y-4;
  }

  .price-slider {
    @apply w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer;
  }

  .price-labels {
    @apply flex justify-between text-xs text-gray-600;
  }

  .sort-select {
    @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
  }

  .filter-actions {
    @apply flex space-x-3 pt-4 border-t border-gray-200;
  }

  .apply-filters {
    @apply flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700;
  }

  .reset-filters {
    @apply flex-1 px-4 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300;
  }

  .search-results {
    @apply mt-6;
  }

  .results-header {
    @apply flex justify-between items-center mb-4;
  }

  .results-count {
    @apply text-sm text-gray-600;
  }

  .results-actions {
    @apply flex space-x-2;
  }

  .view-toggle {
    @apply p-2 text-gray-400 hover:text-gray-600 rounded;
  }

  .view-toggle.active {
    @apply text-blue-600 bg-blue-100;
  }

  .results-grid {
    @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4;
  }

  .result-item {
    @apply bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden cursor-pointer hover:shadow-md transition-shadow;
  }

  .result-image {
    @apply w-full h-48 object-cover;
  }

  .result-info {
    @apply p-4;
  }

  .result-name {
    @apply font-medium text-gray-900 mb-1;
  }

  .result-price {
    @apply text-lg font-semibold text-blue-600 mb-1;
  }

  .result-type {
    @apply text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded;
  }

  .no-results {
    @apply text-center py-12;
  }

  .no-results-icon {
    @apply text-4xl mb-4;
  }

  .loading-state {
    @apply text-center py-12;
  }

  .loading-spinner {
    @apply w-8 h-8 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto mb-4;
  }

  .error-state {
    @apply text-center py-12;
  }

  .error-icon {
    @apply text-4xl mb-4;
  }

  .retry-button {
    @apply mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700;
  }

  .notification {
    @apply fixed top-4 right-4 px-4 py-2 rounded-lg text-white font-medium z-50;
  }

  .notification-success {
    @apply bg-green-600;
  }

  .notification-error {
    @apply bg-red-600;
  }

  .notification-info {
    @apply bg-blue-600;
  }
</style>

<!-- Global types for TypeScript -->
<script>
  declare global {
    interface Window {
      getAdvancedSearch: () => AdvancedSearch;
    }
  }
</script>
