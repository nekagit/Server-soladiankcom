---
// Incremental Static Regeneration (ISR) API endpoint
// Handles revalidation of static pages based on content changes
---

import type { APIRoute } from 'astro';

export const POST: APIRoute = async ({ request }) => {
  try {
    const body = await request.json();
    const { secret, paths } = body;

    // Verify revalidation secret
    if (secret !== process.env.REVALIDATION_SECRET) {
      return new Response(
        JSON.stringify({ error: 'Invalid secret' }),
        { 
          status: 401,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // Revalidate specified paths
    const revalidatedPaths = [];
    
    if (paths && Array.isArray(paths)) {
      for (const path of paths) {
        try {
          // Trigger revalidation for the path
          await revalidatePath(path);
          revalidatedPaths.push(path);
        } catch (error) {
          console.error(`Failed to revalidate path ${path}:`, error);
        }
      }
    } else {
      // Revalidate all static pages
      await revalidateAllPages();
    }

    return new Response(
      JSON.stringify({ 
        revalidated: true,
        paths: revalidatedPaths,
        timestamp: new Date().toISOString()
      }),
      { 
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    console.error('Revalidation error:', error);
    
    return new Response(
      JSON.stringify({ 
        error: 'Revalidation failed',
        message: error.message 
      }),
      { 
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
};

async function revalidatePath(path: string): Promise<void> {
  // Implementation for revalidating a specific path
  // This would integrate with your build system to regenerate the page
  
  console.log(`Revalidating path: ${path}`);
  
  // In a real implementation, this would:
  // 1. Check if the path exists in the static build
  // 2. Regenerate the page with fresh data
  // 3. Update the cache
  // 4. Notify CDN to purge the old version
  
  // For now, we'll simulate the process
  await new Promise(resolve => setTimeout(resolve, 100));
}

async function revalidateAllPages(): Promise<void> {
  // Implementation for revalidating all static pages
  console.log('Revalidating all static pages');
  
  // This would trigger a full static regeneration
  // In production, this might be done through:
  // 1. Triggering a new build
  // 2. Updating the static files
  // 3. Clearing all caches
  
  await new Promise(resolve => setTimeout(resolve, 500));
}
