---
// Products page - Browse all products
import Layout from '../layouts/Layout.astro';
import ProductCard from '../components/ProductCard.astro';
import AdvancedSearch from '../components/AdvancedSearch.astro';
import BlockchainAnalytics from '../components/BlockchainAnalytics.astro';

// Mock products data
const products = [
  {
    id: 1,
    name: "Digital Art NFT #001",
    price: 2.5,
    image: "/api/placeholder/300/200",
    category: "Digital Art",
    seller: "Artist123",
    description: "Unique digital artwork created with AI",
    nft: true,
    solana: true
  },
  {
    id: 2,
    name: "Gaming Collectible",
    price: 1.8,
    image: "/api/placeholder/300/200",
    category: "Gaming",
    seller: "GameMaster",
    description: "Rare gaming collectible from popular game",
    nft: true,
    solana: true
  },
  {
    id: 3,
    name: "Music NFT Album",
    price: 5.0,
    image: "/api/placeholder/300/200",
    category: "Music",
    seller: "MusicProducer",
    description: "Exclusive music album as NFT",
    nft: true,
    solana: true
  },
  {
    id: 4,
    name: "Virtual Land Plot",
    price: 15.0,
    image: "/api/placeholder/300/200",
    category: "Virtual World",
    seller: "MetaverseBuilder",
    description: "Prime location in virtual world",
    nft: true,
    solana: true
  },
  {
    id: 5,
    name: "Trading Card Pack",
    price: 0.5,
    image: "/api/placeholder/300/200",
    category: "Trading Cards",
    seller: "CardCollector",
    description: "Mystery pack of trading cards",
    nft: true,
    solana: true
  },
  {
    id: 6,
    name: "3D Model Asset",
    price: 3.2,
    image: "/api/placeholder/300/200",
    category: "3D Assets",
    seller: "3DArtist",
    description: "High-quality 3D model for games",
    nft: true,
    solana: true
  }
];

const categories = [
  "All",
  "Digital Art",
  "Gaming",
  "Music",
  "Virtual World",
  "Trading Cards",
  "3D Assets",
  "Photography",
  "Collectibles"
];

const selectedCategory = Astro.url.searchParams.get('category') || 'All';
const filteredProducts = selectedCategory === 'All' 
  ? products 
  : products.filter(product => product.category === selectedCategory);
---

<Layout title="Products - Soladia Marketplace">
  <main class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow-sm">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">Products</h1>
            <p class="mt-2 text-gray-600">Discover amazing NFTs and digital assets</p>
          </div>
          <div class="mt-4 md:mt-0">
            <button class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
              Create NFT
            </button>
          </div>
        </div>
      </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
        <!-- Sidebar -->
        <div class="lg:col-span-1">
          <div class="bg-white rounded-lg shadow-sm p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Categories</h3>
            <ul class="space-y-2">
              {categories.map(category => (
                <li>
                  <a 
                    href={`/products?category=${encodeURIComponent(category)}`}
                    class={`block px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                      selectedCategory === category
                        ? 'bg-blue-100 text-blue-700'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    {category}
                  </a>
                </li>
              ))}
            </ul>
          </div>

          <!-- Advanced Search -->
          <div class="mt-6">
            <AdvancedSearch />
          </div>

          <!-- Blockchain Analytics -->
          <div class="mt-6">
            <BlockchainAnalytics 
              showNetworkStats={false}
              showTransactionFlow={false}
              showTokenAnalytics={true}
              showNFTAnalytics={true}
              timeRange="24h"
            />
          </div>
        </div>

        <!-- Main Content -->
        <div class="lg:col-span-3">
          <!-- Filters and Sort -->
          <div class="bg-white rounded-lg shadow-sm p-4 mb-6">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <div class="flex items-center space-x-4">
                <span class="text-sm text-gray-600">
                  {filteredProducts.length} products found
                </span>
                {selectedCategory !== 'All' && (
                  <span class="text-sm text-blue-600">
                    in {selectedCategory}
                  </span>
                )}
              </div>
              <div class="mt-4 sm:mt-0">
                <select class="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                  <option>Sort by: Newest</option>
                  <option>Sort by: Price (Low to High)</option>
                  <option>Sort by: Price (High to Low)</option>
                  <option>Sort by: Most Popular</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Products Grid -->
          <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
            {filteredProducts.map(product => (
              <ProductCard 
                product={product}
                showSolana={true}
                showNFT={true}
              />
            ))}
          </div>

          <!-- Load More -->
          <div class="text-center mt-8">
            <button class="bg-gray-200 text-gray-700 px-6 py-3 rounded-lg hover:bg-gray-300 transition-colors">
              Load More Products
            </button>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Add client-side functionality for sorting and filtering
  document.addEventListener('DOMContentLoaded', () => {
    const sortSelect = document.querySelector('select');
    if (sortSelect) {
      sortSelect.addEventListener('change', (e) => {
        console.log('Sort changed:', (e.target as HTMLSelectElement).value);
        // In a real implementation, this would trigger a re-sort
      });
    }
  });
</script>
