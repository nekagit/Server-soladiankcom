---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
---

<Layout title='Authentication Test - Soladia'>
  <Navigation />

  <main class='min-h-screen bg-gray-50 py-8'>
    <div class='max-w-6xl mx-auto px-4 sm:px-6 lg:px-8'>
      <div class='bg-white rounded-lg shadow-sm border border-gray-200 p-8'>
        <h1 class='text-3xl font-bold text-gray-900 mb-6'>
          Authentication System Test
        </h1>

        <div class='grid grid-cols-1 lg:grid-cols-2 gap-8'>
          <!-- Auth State Display -->
          <div class='space-y-6'>
            <div class='bg-gray-50 rounded-lg p-6'>
              <h2 class='text-xl font-semibold text-gray-900 mb-4'>
                Current Auth State
              </h2>
              <div id='auth-state-display' class='space-y-3'>
                <div class='flex justify-between'>
                  <span class='font-medium text-gray-700'>Status:</span>
                  <span
                    id='auth-status'
                    class='px-2 py-1 rounded-full text-xs font-medium'
                    >Loading...</span
                  >
                </div>
                <div class='flex justify-between'>
                  <span class='font-medium text-gray-700'>User:</span>
                  <span id='auth-user' class='text-sm text-gray-900'
                    >Loading...</span
                  >
                </div>
                <div class='flex justify-between'>
                  <span class='font-medium text-gray-700'>Email:</span>
                  <span id='auth-email' class='text-sm text-gray-900'
                    >Loading...</span
                  >
                </div>
                <div class='flex justify-between'>
                  <span class='font-medium text-gray-700'>Token:</span>
                  <span id='auth-token' class='text-sm text-gray-900 font-mono'
                    >Loading...</span
                  >
                </div>
                <div class='flex justify-between'>
                  <span class='font-medium text-gray-700'>Role:</span>
                  <span id='auth-role' class='text-sm text-gray-900'
                    >Loading...</span
                  >
                </div>
              </div>
            </div>

            <!-- Test Actions -->
            <div class='bg-blue-50 rounded-lg p-6'>
              <h3 class='text-lg font-semibold text-blue-900 mb-4'>
                Test Actions
              </h3>
              <div class='space-y-3'>
                <button
                  id='test-login'
                  class='w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors'
                >
                  Test Login (admin@example.com)
                </button>
                <button
                  id='test-logout'
                  class='w-full bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors'
                >
                  Test Logout
                </button>
                <button
                  id='refresh-state'
                  class='w-full bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors'
                >
                  Refresh State
                </button>
                <button
                  id='test-token-validation'
                  class='w-full bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition-colors'
                >
                  Test Token Validation
                </button>
              </div>
            </div>
          </div>

          <!-- Auth Manager Info -->
          <div class='space-y-6'>
            <div class='bg-green-50 rounded-lg p-6'>
              <h3 class='text-lg font-semibold text-green-900 mb-4'>
                Auth Manager Info
              </h3>
              <div class='space-y-2 text-sm text-green-800'>
                <p>‚úÖ Centralized authentication state management</p>
                <p>‚úÖ Automatic token validation</p>
                <p>‚úÖ Persistent login state</p>
                <p>‚úÖ Role-based access control</p>
                <p>‚úÖ Event-driven UI updates</p>
                <p>‚úÖ Global availability</p>
              </div>
            </div>

            <!-- Test Results -->
            <div class='bg-yellow-50 rounded-lg p-6'>
              <h3 class='text-lg font-semibold text-yellow-900 mb-4'>
                Test Results
              </h3>
              <div id='test-results' class='space-y-2 text-sm text-yellow-800'>
                <p>No tests run yet. Click the test buttons to see results.</p>
              </div>
            </div>

            <!-- Navigation Test -->
            <div class='bg-indigo-50 rounded-lg p-6'>
              <h3 class='text-lg font-semibold text-indigo-900 mb-4'>
                Navigation Test
              </h3>
              <div class='space-y-2'>
                <a
                  href='/profile'
                  class='block w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors text-center'
                >
                  Test Profile Page
                </a>
                <a
                  href='/dashboard'
                  class='block w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors text-center'
                >
                  Test Dashboard Page
                </a>
                <a
                  href='/orders'
                  class='block w-full bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors text-center'
                >
                  Test Orders Page
                </a>
              </div>
            </div>
          </div>
        </div>

        <!-- Console Output -->
        <div class='mt-8 bg-gray-900 rounded-lg p-6'>
          <h3 class='text-lg font-semibold text-white mb-4'>Console Output</h3>
          <div
            id='console-output'
            class='bg-black rounded p-4 h-32 overflow-y-auto text-green-400 font-mono text-sm'
          >
            <div>Authentication system initialized...</div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const authManager = (window as any).authManager;

    if (!authManager) {
      console.error('Auth manager not available');
      addConsoleOutput('‚ùå Auth manager not available');
      return;
    }

    addConsoleOutput('‚úÖ Auth manager loaded successfully');

    // Get DOM elements
    const authStatus = document.getElementById('auth-status');
    const authUser = document.getElementById('auth-user');
    const authEmail = document.getElementById('auth-email');
    const authToken = document.getElementById('auth-token');
    const authRole = document.getElementById('auth-role');
    const testResults = document.getElementById('test-results');
    const testLoginBtn = document.getElementById('test-login');
    const testLogoutBtn = document.getElementById('test-logout');
    const refreshStateBtn = document.getElementById('refresh-state');
    const testTokenValidationBtn = document.getElementById(
      'test-token-validation'
    );

    // Console output helper
    function addConsoleOutput(message) {
      const consoleOutput = document.getElementById('console-output');
      if (consoleOutput) {
        const timestamp = new Date().toLocaleTimeString();
        consoleOutput.innerHTML += `<div>[${timestamp}] ${message}</div>`;
        consoleOutput.scrollTop = consoleOutput.scrollHeight;
      }
      console.log(message);
    }

    // Update auth state display
    const updateAuthDisplay = () => {
      const state = authManager.getState();
      const user = authManager.getCurrentUser();
      const token = authManager.getToken();

      if (authStatus) {
        authStatus.textContent = state.isAuthenticated
          ? 'Authenticated'
          : 'Not Authenticated';
        authStatus.className = state.isAuthenticated
          ? 'px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800'
          : 'px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800';
      }

      if (authUser) {
        authUser.textContent = user
          ? user.full_name || user.username || 'User'
          : 'No user';
      }

      if (authEmail) {
        authEmail.textContent = user ? user.email : 'No email';
      }

      if (authToken) {
        authToken.textContent = token
          ? `${token.substring(0, 20)}...`
          : 'No token';
      }

      if (authRole) {
        authRole.textContent = user ? user.user_type || 'User' : 'No role';
      }

      addConsoleOutput(
        `Auth state updated: ${state.isAuthenticated ? 'Authenticated' : 'Not authenticated'}`
      );
    };

    // Test functions
    const testLogin = async () => {
      addConsoleOutput('üîÑ Testing login...');
      try {
        const success = await authManager.login(
          'admin@example.com',
          'admin123'
        );
        if (success) {
          addConsoleOutput('‚úÖ Login successful');
          updateTestResults('Login test: ‚úÖ PASSED');
        } else {
          addConsoleOutput('‚ùå Login failed');
          updateTestResults('Login test: ‚ùå FAILED');
        }
        updateAuthDisplay();
      } catch (error) {
        addConsoleOutput(`‚ùå Login error: ${error.message}`);
        updateTestResults('Login test: ‚ùå ERROR');
      }
    };

    const testLogout = async () => {
      addConsoleOutput('üîÑ Testing logout...');
      try {
        await authManager.logout();
        addConsoleOutput('‚úÖ Logout successful');
        updateTestResults('Logout test: ‚úÖ PASSED');
        updateAuthDisplay();
      } catch (error) {
        addConsoleOutput(`‚ùå Logout error: ${error.message}`);
        updateTestResults('Logout test: ‚ùå ERROR');
      }
    };

    const testTokenValidation = async () => {
      addConsoleOutput('üîÑ Testing token validation...');
      try {
        const isValid = await authManager.validateToken();
        if (isValid) {
          addConsoleOutput('‚úÖ Token is valid');
          updateTestResults('Token validation: ‚úÖ PASSED');
        } else {
          addConsoleOutput('‚ùå Token is invalid');
          updateTestResults('Token validation: ‚ùå FAILED');
        }
      } catch (error) {
        addConsoleOutput(`‚ùå Token validation error: ${error.message}`);
        updateTestResults('Token validation: ‚ùå ERROR');
      }
    };

    const updateTestResults = result => {
      if (testResults) {
        const timestamp = new Date().toLocaleTimeString();
        testResults.innerHTML += `<div>[${timestamp}] ${result}</div>`;
      }
    };

    // Event listeners
    if (testLoginBtn) {
      testLoginBtn.addEventListener('click', testLogin);
    }

    if (testLogoutBtn) {
      testLogoutBtn.addEventListener('click', testLogout);
    }

    if (refreshStateBtn) {
      refreshStateBtn.addEventListener('click', updateAuthDisplay);
    }

    if (testTokenValidationBtn) {
      testTokenValidationBtn.addEventListener('click', testTokenValidation);
    }

    // Listen for auth state changes
    window.addEventListener('authStateChanged', () => {
      addConsoleOutput('üîÑ Auth state changed event received');
      updateAuthDisplay();
    });

    // Initial display
    updateAuthDisplay();
    addConsoleOutput('üöÄ Authentication test page ready');
  });
</script>
