---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import SolanaWallet from '../components/solana/SolanaWallet.astro';
import TransactionHistory from '../components/solana/TransactionHistory.astro';
import TokenSelector from '../components/solana/TokenSelector.astro';

// Sample wallet data
const walletData = {
  address: "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",
  balance: 2.5,
  network: "devnet",
  provider: "Phantom"
};

const tokenBalances = [
  {
    mint: "So11111111111111111111111111111111111111112",
    name: "Wrapped SOL",
    symbol: "SOL",
    balance: 2.5,
    value: 250.0,
    change24h: 5.2
  },
  {
    mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
    name: "USD Coin",
    symbol: "USDC",
    balance: 1000.0,
    value: 1000.0,
    change24h: 0.1
  },
  {
    mint: "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB",
    name: "Tether USD",
    symbol: "USDT",
    balance: 500.0,
    value: 500.0,
    change24h: -0.2
  }
];

const recentTransactions = [
  {
    id: "tx1",
    type: "send",
    amount: 0.5,
    token: "SOL",
    to: "7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU",
    timestamp: "2024-01-20T10:30:00Z",
    status: "confirmed"
  },
  {
    id: "tx2",
    type: "receive",
    amount: 1.2,
    token: "SOL",
    from: "5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1",
    timestamp: "2024-01-19T15:45:00Z",
    status: "confirmed"
  },
  {
    id: "tx3",
    type: "swap",
    amount: 100,
    token: "USDC",
    to: "SOL",
    timestamp: "2024-01-18T09:15:00Z",
    status: "confirmed"
  }
];
---

<Layout title="Wallet Management - Soladia">
  <Navigation />
  
  <div class="wallet-page">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Page Header -->
      <div class="page-header">
        <h1 class="page-title">Wallet Management</h1>
        <p class="page-subtitle">Manage your Solana wallet, tokens, and transactions</p>
      </div>

      <!-- Wallet Connection Status -->
      <div class="wallet-section">
        <h2 class="section-title">Wallet Status</h2>
        <div class="wallet-container">
          <SolanaWallet />
        </div>
      </div>

      <!-- Portfolio Overview -->
      <div class="portfolio-section">
        <h2 class="section-title">Portfolio Overview</h2>
        <div class="portfolio-grid">
          <div class="portfolio-card">
            <div class="card-header">
              <h3 class="card-title">Total Balance</h3>
              <span class="card-subtitle">USD Value</span>
            </div>
            <div class="card-content">
              <div class="balance-amount">$1,750.00</div>
              <div class="balance-change positive">+2.5% (24h)</div>
            </div>
          </div>
          
          <div class="portfolio-card">
            <div class="card-header">
              <h3 class="card-title">SOL Balance</h3>
              <span class="card-subtitle">Native Token</span>
            </div>
            <div class="card-content">
              <div class="balance-amount">2.5 SOL</div>
              <div class="balance-change positive">+5.2% (24h)</div>
            </div>
          </div>
          
          <div class="portfolio-card">
            <div class="card-header">
              <h3 class="card-title">Token Count</h3>
              <span class="card-subtitle">Different Tokens</span>
            </div>
            <div class="card-content">
              <div class="balance-amount">3</div>
              <div class="balance-change neutral">No change</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Token Balances -->
      <div class="tokens-section">
        <div class="section-header">
          <h2 class="section-title">Token Balances</h2>
          <button class="btn-secondary" id="refresh-balances">
            <span class="btn-icon">üîÑ</span>
            Refresh
          </button>
        </div>
        
        <div class="tokens-table">
          <div class="table-header">
            <span>Token</span>
            <span>Balance</span>
            <span>Value</span>
            <span>Change (24h)</span>
            <span>Actions</span>
          </div>
          
          {tokenBalances.map((token) => (
            <div class="table-row">
              <div class="token-info">
                <div class="token-logo">
                  <img src="https://images.unsplash.com/photo-1634017839464-5c339ebe3cb4?w=32&h=32&fit=crop&crop=center" alt={token.symbol} />
                </div>
                <div class="token-details">
                  <div class="token-name">{token.name}</div>
                  <div class="token-symbol">{token.symbol}</div>
                </div>
              </div>
              
              <div class="token-balance">
                <div class="balance-amount">{token.balance.toFixed(4)}</div>
                <div class="balance-symbol">{token.symbol}</div>
              </div>
              
              <div class="token-value">
                ${token.value.toFixed(2)}
              </div>
              
              <div class={`token-change ${token.change24h >= 0 ? 'positive' : 'negative'}`}>
                {token.change24h >= 0 ? '+' : ''}{token.change24h.toFixed(1)}%
              </div>
              
              <div class="token-actions">
                <button class="action-btn send-btn" data-token={token.symbol}>
                  Send
                </button>
                <button class="action-btn receive-btn" data-token={token.symbol}>
                  Receive
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Token Selector Demo -->
      <div class="token-selector-section">
        <h2 class="section-title">Token Selector</h2>
        <div class="selector-container">
          <TokenSelector />
        </div>
      </div>

      <!-- Recent Transactions -->
      <div class="transactions-section">
        <div class="section-header">
          <h2 class="section-title">Recent Transactions</h2>
          <a href="/transactions" class="view-all-link">View All</a>
        </div>
        
        <div class="transactions-container">
          <TransactionHistory />
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="actions-section">
        <h2 class="section-title">Quick Actions</h2>
        <div class="actions-grid">
          <button class="action-card" id="send-tokens">
            <div class="action-icon">üì§</div>
            <div class="action-content">
              <h3 class="action-title">Send Tokens</h3>
              <p class="action-description">Transfer tokens to another wallet</p>
            </div>
          </button>
          
          <button class="action-card" id="receive-tokens">
            <div class="action-icon">üì•</div>
            <div class="action-content">
              <h3 class="action-title">Receive Tokens</h3>
              <p class="action-description">Get your wallet address</p>
            </div>
          </button>
          
          <button class="action-card" id="swap-tokens">
            <div class="action-icon">üîÑ</div>
            <div class="action-content">
              <h3 class="action-title">Swap Tokens</h3>
              <p class="action-description">Exchange one token for another</p>
            </div>
          </button>
          
          <button class="action-card" id="add-token">
            <div class="action-icon">‚ûï</div>
            <div class="action-content">
              <h3 class="action-title">Add Token</h3>
              <p class="action-description">Import custom SPL token</p>
            </div>
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    initializeWalletPage();
    setupEventListeners();
  });

  function initializeWalletPage() {
    console.log('Wallet page initialized');
  }

  function setupEventListeners() {
    // Refresh balances button
    const refreshBtn = document.getElementById('refresh-balances');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', refreshBalances);
    }

    // Token action buttons
    const sendBtns = document.querySelectorAll('.send-btn');
    const receiveBtns = document.querySelectorAll('.receive-btn');
    
    sendBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const token = this.getAttribute('data-token');
        sendTokens(token);
      });
    });

    receiveBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        const token = this.getAttribute('data-token');
        receiveTokens(token);
      });
    });

    // Quick action buttons
    const actionCards = document.querySelectorAll('.action-card');
    actionCards.forEach(card => {
      card.addEventListener('click', function() {
        const action = this.id;
        handleQuickAction(action);
      });
    });
  }

  async function refreshBalances() {
    const refreshBtn = document.getElementById('refresh-balances');
    if (refreshBtn) {
      refreshBtn.disabled = true;
      refreshBtn.innerHTML = '<span class="btn-icon">‚è≥</span> Refreshing...';
    }

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Update balances with random values
      const balanceElements = document.querySelectorAll('.balance-amount');
      balanceElements.forEach(element => {
        const currentBalance = parseFloat(element.textContent || '0');
        const newBalance = currentBalance + (Math.random() - 0.5) * 0.1;
        element.textContent = newBalance.toFixed(4);
      });

      showNotification('Balances refreshed successfully', 'success');
    } catch (error) {
      showNotification('Failed to refresh balances', 'error');
    } finally {
      if (refreshBtn) {
        refreshBtn.disabled = false;
        refreshBtn.innerHTML = '<span class="btn-icon">üîÑ</span> Refresh';
      }
    }
  }

  function sendTokens(token: string | null) {
    if (token) {
      showNotification(`Opening send dialog for ${token}`, 'info');
      // In a real app, this would open a send modal
    }
  }

  function receiveTokens(token: string | null) {
    if (token) {
      const walletAddress = "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM";
      navigator.clipboard.writeText(walletAddress);
      showNotification('Wallet address copied to clipboard!', 'success');
    }
  }

  function handleQuickAction(action: string) {
    switch (action) {
      case 'send-tokens':
        showNotification('Opening send tokens dialog...', 'info');
        break;
      case 'receive-tokens':
        showNotification('Opening receive tokens dialog...', 'info');
        break;
      case 'swap-tokens':
        showNotification('Opening token swap dialog...', 'info');
        break;
      case 'add-token':
        showNotification('Opening add token dialog...', 'info');
        break;
      default:
        console.log('Unknown action:', action);
    }
  }

  function showNotification(message: string, type: 'success' | 'error' | 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }
</script>

<style>
  .wallet-page {
    @apply min-h-screen bg-gray-50;
  }

  .page-header {
    @apply mb-8;
  }

  .page-title {
    @apply text-3xl font-bold text-gray-900 mb-2;
  }

  .page-subtitle {
    @apply text-gray-600;
  }

  .wallet-section,
  .portfolio-section,
  .tokens-section,
  .token-selector-section,
  .transactions-section,
  .actions-section {
    @apply mb-8;
  }

  .section-title {
    @apply text-xl font-semibold text-gray-900 mb-4;
  }

  .section-header {
    @apply flex justify-between items-center mb-4;
  }

  .wallet-container {
    @apply max-w-2xl;
  }

  .portfolio-grid {
    @apply grid grid-cols-1 md:grid-cols-3 gap-6;
  }

  .portfolio-card {
    @apply bg-white rounded-lg shadow-sm p-6;
  }

  .card-header {
    @apply flex justify-between items-start mb-4;
  }

  .card-title {
    @apply font-semibold text-gray-900;
  }

  .card-subtitle {
    @apply text-sm text-gray-600;
  }

  .card-content {
    @apply space-y-2;
  }

  .balance-amount {
    @apply text-2xl font-bold text-gray-900;
  }

  .balance-change {
    @apply text-sm font-medium;
  }

  .balance-change.positive {
    @apply text-green-600;
  }

  .balance-change.negative {
    @apply text-red-600;
  }

  .balance-change.neutral {
    @apply text-gray-600;
  }

  .tokens-table {
    @apply bg-white rounded-lg shadow-sm overflow-hidden;
  }

  .table-header {
    @apply grid grid-cols-5 gap-4 py-3 px-6 font-semibold text-gray-700 bg-gray-50 border-b border-gray-200;
  }

  .table-row {
    @apply grid grid-cols-5 gap-4 py-4 px-6 hover:bg-gray-50 transition-colors;
  }

  .token-info {
    @apply flex items-center space-x-3;
  }

  .token-logo {
    @apply w-8 h-8 rounded-full overflow-hidden;
  }

  .token-logo img {
    @apply w-full h-full object-cover;
  }

  .token-details {
    @apply space-y-1;
  }

  .token-name {
    @apply font-medium text-gray-900;
  }

  .token-symbol {
    @apply text-sm text-gray-600;
  }

  .token-balance {
    @apply space-y-1;
  }

  .token-value {
    @apply font-semibold text-gray-900;
  }

  .token-change {
    @apply font-medium;
  }

  .token-change.positive {
    @apply text-green-600;
  }

  .token-change.negative {
    @apply text-red-600;
  }

  .token-actions {
    @apply flex space-x-2;
  }

  .action-btn {
    @apply px-3 py-1 text-sm rounded font-medium transition-colors;
  }

  .send-btn {
    @apply bg-blue-100 text-blue-700 hover:bg-blue-200;
  }

  .receive-btn {
    @apply bg-green-100 text-green-700 hover:bg-green-200;
  }

  .selector-container {
    @apply max-w-md;
  }

  .transactions-container {
    @apply max-w-4xl;
  }

  .view-all-link {
    @apply text-blue-600 hover:text-blue-800 font-medium;
  }

  .actions-grid {
    @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4;
  }

  .action-card {
    @apply bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow cursor-pointer text-left;
  }

  .action-icon {
    @apply text-3xl mb-3;
  }

  .action-title {
    @apply font-semibold text-gray-900 mb-2;
  }

  .action-description {
    @apply text-sm text-gray-600;
  }

  .btn-secondary {
    @apply px-4 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300 transition-colors flex items-center space-x-2;
  }

  .btn-icon {
    @apply text-sm;
  }

  .notification {
    @apply fixed top-4 right-4 px-4 py-2 rounded-lg text-white font-medium z-50;
  }

  .notification-success {
    @apply bg-green-600;
  }

  .notification-error {
    @apply bg-red-600;
  }

  .notification-info {
    @apply bg-blue-600;
  }
</style>
