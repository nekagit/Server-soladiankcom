---
import SEO from '../components/SEO.astro';

export interface Props {
  title: string;
  description?: string;
  canonical?: string;
  ogImage?: string;
  ogType?: string;
  keywords?: string[];
  author?: string;
  publishedTime?: string;
  modifiedTime?: string;
  structuredData?: any;
}

const { 
  title, 
  description, 
  canonical, 
  ogImage, 
  ogType, 
  keywords, 
  author, 
  publishedTime, 
  modifiedTime, 
  structuredData 
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Component -->
    <SEO 
      title={title}
      description={description}
      canonical={canonical}
      ogImage={ogImage}
      ogType={ogType}
      keywords={keywords}
      author={author}
      publishedTime={publishedTime}
      modifiedTime={modifiedTime}
      structuredData={structuredData}
    />
    
    <!-- Payment Permissions Policy -->
    <meta http-equiv="Permissions-Policy" content="payment=*, camera=(), microphone=(), geolocation=()" />
    
    <!-- Security Headers -->
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https://fonts.gstatic.com; connect-src 'self' http://localhost:8000;" />
  </head>
  <body>
    <slot />
    
    <!-- Global Error Handling Script -->
    <script>
      // Block external scripts and domains
      (function() {
        // Override console methods to filter out external script errors
        const originalConsoleError = console.error;
        const originalConsoleWarn = console.warn;
        
        console.error = function(...args) {
          const message = args.join(' ');
          if (!message.includes('app.masterschool.com') && 
              !message.includes('masterschool.com') &&
              !message.includes('postMessage')) {
            originalConsoleError.apply(console, args);
          }
        };
        
        console.warn = function(...args) {
          const message = args.join(' ');
          if (!message.includes('app.masterschool.com') && 
              !message.includes('masterschool.com') &&
              !message.includes('postMessage')) {
            originalConsoleWarn.apply(console, args);
          }
        };
        
        // Block external domain requests
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
          const url = args[0];
          if (typeof url === 'string' && url.includes('masterschool.com')) {
            console.log('Blocked external request to:', url);
            return Promise.reject(new Error('External request blocked'));
          }
          return originalFetch.apply(this, args);
        };
        
        // Block external postMessage calls
        const originalPostMessage = window.postMessage;
        window.postMessage = function(message, targetOrigin, transfer) {
          if (targetOrigin && targetOrigin.includes('masterschool.com')) {
            console.log('Blocked postMessage to external domain:', targetOrigin);
            return;
          }
          return originalPostMessage.call(this, message, targetOrigin, transfer);
        };
      })();
      
      // Global error handling
      window.addEventListener('error', function(event) {
        const message = event.message || '';
        if (!message.includes('masterschool.com') && 
            !message.includes('postMessage') &&
            !message.includes('app.masterschool.com')) {
          console.log('Global error caught:', event.error);
        }
        // Prevent error from showing in console
        event.preventDefault();
      });
      
      // Handle unhandled promise rejections
      window.addEventListener('unhandledrejection', function(event) {
        const message = event.reason?.message || '';
        if (!message.includes('masterschool.com') && 
            !message.includes('postMessage') &&
            !message.includes('app.masterschool.com')) {
          console.log('Unhandled promise rejection:', event.reason);
        }
        // Prevent the default behavior
        event.preventDefault();
      });
      
      // Handle API errors gracefully
      window.addEventListener('DOMContentLoaded', function() {
        // Override fetch to handle errors gracefully
        const originalFetch = window.fetch;
        window.fetch = function(...args) {
          return originalFetch.apply(this, args)
            .catch(error => {
              console.log('API call failed:', error);
              // Return a mock response for failed API calls
              return new Response(JSON.stringify({
                success: false,
                message: 'Service temporarily unavailable',
                data: null
              }), {
                status: 200,
                headers: { 'Content-Type': 'application/json' }
              });
            });
        };
      });
    </script>
  </body>
</html>

<style is:global>
  @import '../styles/global.css';
</style>
